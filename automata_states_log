
I0= { 
S->exp , c="$", pivote:-1
exp->high_level ; , c="$", pivote:-1
exp->high_level in exp , c="$", pivote:-1
exp->param in exp , c="$", pivote:-1
exp->function label param exp , c="$", pivote:-1
exp->label param => exp , c="$", pivote:-1
exp->while param exp , c="$", pivote:-1
exp->if_exp else_exp , c="$", pivote:-1
exp->if_exp elif_exp else_exp , c="$", pivote:-1
high_level->bool , c=";", pivote:-1
high_level->label = high_level , c=";", pivote:-1
high_level->var_declaration = high_level , c=";", pivote:-1
high_level->label := high_level , c=";", pivote:-1
high_level->param in high_level , c=";", pivote:-1
high_level->high_level in high_level , c=";", pivote:-1
high_level->high_level in block , c=";", pivote:-1
high_level->function label param high_level , c=";", pivote:-1
high_level->label param => high_level , c=";", pivote:-1
high_level->new call , c=";", pivote:-1
high_level->label ++ , c=";", pivote:-1
high_level->label -- , c=";", pivote:-1
high_level->bool , c="in", pivote:-1
high_level->label = high_level , c="in", pivote:-1
high_level->var_declaration = high_level , c="in", pivote:-1
high_level->label := high_level , c="in", pivote:-1
high_level->param in high_level , c="in", pivote:-1
high_level->high_level in high_level , c="in", pivote:-1
high_level->high_level in block , c="in", pivote:-1
high_level->function label param high_level , c="in", pivote:-1
high_level->label param => high_level , c="in", pivote:-1
high_level->new call , c="in", pivote:-1
high_level->label ++ , c="in", pivote:-1
high_level->label -- , c="in", pivote:-1
param->( structure ) , c="in", pivote:-1
param->( ) , c="in", pivote:-1
label->int , c="(", pivote:-1
if_exp->if param exp , c="else", pivote:-1
if_exp->if param block , c="else", pivote:-1
if_exp->if param exp , c="elif", pivote:-1
if_exp->if param block , c="elif", pivote:-1
bool->bool == concatenation , c=";", pivote:-1
bool->bool >= concatenation , c=";", pivote:-1
bool->bool <= concatenation , c=";", pivote:-1
bool->bool & concatenation , c=";", pivote:-1
bool->bool | concatenation , c=";", pivote:-1
bool->concatenation , c=";", pivote:-1
bool->! bool , c=";", pivote:-1
label->int , c="=", pivote:-1
var_declaration->let label , c="=", pivote:-1
label->int , c=":=", pivote:-1
label->int , c="++", pivote:-1
label->int , c="--", pivote:-1
bool->bool == concatenation , c="in", pivote:-1
bool->bool >= concatenation , c="in", pivote:-1
bool->bool <= concatenation , c="in", pivote:-1
bool->bool & concatenation , c="in", pivote:-1
bool->bool | concatenation , c="in", pivote:-1
bool->concatenation , c="in", pivote:-1
bool->! bool , c="in", pivote:-1
bool->bool == concatenation , c="==", pivote:-1
bool->bool >= concatenation , c="==", pivote:-1
bool->bool <= concatenation , c="==", pivote:-1
bool->bool & concatenation , c="==", pivote:-1
bool->bool | concatenation , c="==", pivote:-1
bool->concatenation , c="==", pivote:-1
bool->! bool , c="==", pivote:-1
bool->bool == concatenation , c=">=", pivote:-1
bool->bool >= concatenation , c=">=", pivote:-1
bool->bool <= concatenation , c=">=", pivote:-1
bool->bool & concatenation , c=">=", pivote:-1
bool->bool | concatenation , c=">=", pivote:-1
bool->concatenation , c=">=", pivote:-1
bool->! bool , c=">=", pivote:-1
bool->bool == concatenation , c="<=", pivote:-1
bool->bool >= concatenation , c="<=", pivote:-1
bool->bool <= concatenation , c="<=", pivote:-1
bool->bool & concatenation , c="<=", pivote:-1
bool->bool | concatenation , c="<=", pivote:-1
bool->concatenation , c="<=", pivote:-1
bool->! bool , c="<=", pivote:-1
bool->bool == concatenation , c="&", pivote:-1
bool->bool >= concatenation , c="&", pivote:-1
bool->bool <= concatenation , c="&", pivote:-1
bool->bool & concatenation , c="&", pivote:-1
bool->bool | concatenation , c="&", pivote:-1
bool->concatenation , c="&", pivote:-1
bool->! bool , c="&", pivote:-1
bool->bool == concatenation , c="|", pivote:-1
bool->bool >= concatenation , c="|", pivote:-1
bool->bool <= concatenation , c="|", pivote:-1
bool->bool & concatenation , c="|", pivote:-1
bool->bool | concatenation , c="|", pivote:-1
bool->concatenation , c="|", pivote:-1
bool->! bool , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c=";", pivote:-1
concatenation->concatenation @@ sum_minus , c=";", pivote:-1
concatenation->sum_minus , c=";", pivote:-1
concatenation->concatenation @ sum_minus , c="in", pivote:-1
concatenation->concatenation @@ sum_minus , c="in", pivote:-1
concatenation->sum_minus , c="in", pivote:-1
concatenation->concatenation @ sum_minus , c="==", pivote:-1
concatenation->concatenation @@ sum_minus , c="==", pivote:-1
concatenation->sum_minus , c="==", pivote:-1
concatenation->concatenation @ sum_minus , c=">=", pivote:-1
concatenation->concatenation @@ sum_minus , c=">=", pivote:-1
concatenation->sum_minus , c=">=", pivote:-1
concatenation->concatenation @ sum_minus , c="<=", pivote:-1
concatenation->concatenation @@ sum_minus , c="<=", pivote:-1
concatenation->sum_minus , c="<=", pivote:-1
concatenation->concatenation @ sum_minus , c="&", pivote:-1
concatenation->concatenation @@ sum_minus , c="&", pivote:-1
concatenation->sum_minus , c="&", pivote:-1
concatenation->concatenation @ sum_minus , c="|", pivote:-1
concatenation->concatenation @@ sum_minus , c="|", pivote:-1
concatenation->sum_minus , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c="@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@", pivote:-1
concatenation->sum_minus , c="@", pivote:-1
concatenation->concatenation @ sum_minus , c="@@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@@", pivote:-1
concatenation->sum_minus , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c=";", pivote:-1
sum_minus->sum_minus - div_mult , c=";", pivote:-1
sum_minus->div_mult , c=";", pivote:-1
sum_minus->sum_minus + div_mult , c="in", pivote:-1
sum_minus->sum_minus - div_mult , c="in", pivote:-1
sum_minus->div_mult , c="in", pivote:-1
sum_minus->sum_minus + div_mult , c="==", pivote:-1
sum_minus->sum_minus - div_mult , c="==", pivote:-1
sum_minus->div_mult , c="==", pivote:-1
sum_minus->sum_minus + div_mult , c=">=", pivote:-1
sum_minus->sum_minus - div_mult , c=">=", pivote:-1
sum_minus->div_mult , c=">=", pivote:-1
sum_minus->sum_minus + div_mult , c="<=", pivote:-1
sum_minus->sum_minus - div_mult , c="<=", pivote:-1
sum_minus->div_mult , c="<=", pivote:-1
sum_minus->sum_minus + div_mult , c="&", pivote:-1
sum_minus->sum_minus - div_mult , c="&", pivote:-1
sum_minus->div_mult , c="&", pivote:-1
sum_minus->sum_minus + div_mult , c="|", pivote:-1
sum_minus->sum_minus - div_mult , c="|", pivote:-1
sum_minus->div_mult , c="|", pivote:-1
sum_minus->sum_minus + div_mult , c="@", pivote:-1
sum_minus->sum_minus - div_mult , c="@", pivote:-1
sum_minus->div_mult , c="@", pivote:-1
sum_minus->sum_minus + div_mult , c="@@", pivote:-1
sum_minus->sum_minus - div_mult , c="@@", pivote:-1
sum_minus->div_mult , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c="+", pivote:-1
sum_minus->sum_minus - div_mult , c="+", pivote:-1
sum_minus->div_mult , c="+", pivote:-1
sum_minus->sum_minus + div_mult , c="-", pivote:-1
sum_minus->sum_minus - div_mult , c="-", pivote:-1
sum_minus->div_mult , c="-", pivote:-1
div_mult->div_mult * pow , c=";", pivote:-1
div_mult->div_mult / pow , c=";", pivote:-1
div_mult->pow , c=";", pivote:-1
div_mult->div_mult * pow , c="in", pivote:-1
div_mult->div_mult / pow , c="in", pivote:-1
div_mult->pow , c="in", pivote:-1
div_mult->div_mult * pow , c="==", pivote:-1
div_mult->div_mult / pow , c="==", pivote:-1
div_mult->pow , c="==", pivote:-1
div_mult->div_mult * pow , c=">=", pivote:-1
div_mult->div_mult / pow , c=">=", pivote:-1
div_mult->pow , c=">=", pivote:-1
div_mult->div_mult * pow , c="<=", pivote:-1
div_mult->div_mult / pow , c="<=", pivote:-1
div_mult->pow , c="<=", pivote:-1
div_mult->div_mult * pow , c="&", pivote:-1
div_mult->div_mult / pow , c="&", pivote:-1
div_mult->pow , c="&", pivote:-1
div_mult->div_mult * pow , c="|", pivote:-1
div_mult->div_mult / pow , c="|", pivote:-1
div_mult->pow , c="|", pivote:-1
div_mult->div_mult * pow , c="@", pivote:-1
div_mult->div_mult / pow , c="@", pivote:-1
div_mult->pow , c="@", pivote:-1
div_mult->div_mult * pow , c="@@", pivote:-1
div_mult->div_mult / pow , c="@@", pivote:-1
div_mult->pow , c="@@", pivote:-1
div_mult->div_mult * pow , c="+", pivote:-1
div_mult->div_mult / pow , c="+", pivote:-1
div_mult->pow , c="+", pivote:-1
div_mult->div_mult * pow , c="-", pivote:-1
div_mult->div_mult / pow , c="-", pivote:-1
div_mult->pow , c="-", pivote:-1
div_mult->div_mult * pow , c="*", pivote:-1
div_mult->div_mult / pow , c="*", pivote:-1
div_mult->pow , c="*", pivote:-1
div_mult->div_mult * pow , c="/", pivote:-1
div_mult->div_mult / pow , c="/", pivote:-1
div_mult->pow , c="/", pivote:-1
pow->pow ** atom , c=";", pivote:-1
pow->pow ^ atom , c=";", pivote:-1
pow->pow % atom , c=";", pivote:-1
pow->atom , c=";", pivote:-1
pow->pow ** atom , c="in", pivote:-1
pow->pow ^ atom , c="in", pivote:-1
pow->pow % atom , c="in", pivote:-1
pow->atom , c="in", pivote:-1
pow->pow ** atom , c="==", pivote:-1
pow->pow ^ atom , c="==", pivote:-1
pow->pow % atom , c="==", pivote:-1
pow->atom , c="==", pivote:-1
pow->pow ** atom , c=">=", pivote:-1
pow->pow ^ atom , c=">=", pivote:-1
pow->pow % atom , c=">=", pivote:-1
pow->atom , c=">=", pivote:-1
pow->pow ** atom , c="<=", pivote:-1
pow->pow ^ atom , c="<=", pivote:-1
pow->pow % atom , c="<=", pivote:-1
pow->atom , c="<=", pivote:-1
pow->pow ** atom , c="&", pivote:-1
pow->pow ^ atom , c="&", pivote:-1
pow->pow % atom , c="&", pivote:-1
pow->atom , c="&", pivote:-1
pow->pow ** atom , c="|", pivote:-1
pow->pow ^ atom , c="|", pivote:-1
pow->pow % atom , c="|", pivote:-1
pow->atom , c="|", pivote:-1
pow->pow ** atom , c="@", pivote:-1
pow->pow ^ atom , c="@", pivote:-1
pow->pow % atom , c="@", pivote:-1
pow->atom , c="@", pivote:-1
pow->pow ** atom , c="@@", pivote:-1
pow->pow ^ atom , c="@@", pivote:-1
pow->pow % atom , c="@@", pivote:-1
pow->atom , c="@@", pivote:-1
pow->pow ** atom , c="+", pivote:-1
pow->pow ^ atom , c="+", pivote:-1
pow->pow % atom , c="+", pivote:-1
pow->atom , c="+", pivote:-1
pow->pow ** atom , c="-", pivote:-1
pow->pow ^ atom , c="-", pivote:-1
pow->pow % atom , c="-", pivote:-1
pow->atom , c="-", pivote:-1
pow->pow ** atom , c="*", pivote:-1
pow->pow ^ atom , c="*", pivote:-1
pow->pow % atom , c="*", pivote:-1
pow->atom , c="*", pivote:-1
pow->pow ** atom , c="/", pivote:-1
pow->pow ^ atom , c="/", pivote:-1
pow->pow % atom , c="/", pivote:-1
pow->atom , c="/", pivote:-1
pow->pow ** atom , c="**", pivote:-1
pow->pow ^ atom , c="**", pivote:-1
pow->pow % atom , c="**", pivote:-1
pow->atom , c="**", pivote:-1
pow->pow ** atom , c="^", pivote:-1
pow->pow ^ atom , c="^", pivote:-1
pow->pow % atom , c="^", pivote:-1
pow->atom , c="^", pivote:-1
pow->pow ** atom , c="%", pivote:-1
pow->pow ^ atom , c="%", pivote:-1
pow->pow % atom , c="%", pivote:-1
pow->atom , c="%", pivote:-1
atom->label . label , c=";", pivote:-1
atom->label . call , c=";", pivote:-1
atom->call . call , c=";", pivote:-1
atom->call . label , c=";", pivote:-1
atom->label , c=";", pivote:-1
atom->( high_level ) , c=";", pivote:-1
atom->for param block , c=";", pivote:-1
atom->for param exp , c=";", pivote:-1
atom->for param high_level , c=";", pivote:-1
atom->protocol label block , c=";", pivote:-1
atom->protocol label extends label block , c=";", pivote:-1
atom->type label block , c=";", pivote:-1
atom->type label param block , c=";", pivote:-1
atom->type label inherits label block , c=";", pivote:-1
atom->type label param inherits label param block , c=";", pivote:-1
atom->function label param block , c=";", pivote:-1
atom->label param => block , c=";", pivote:-1
atom->while param block , c=";", pivote:-1
atom->while param high_level , c=";", pivote:-1
atom->if_high_level else_high_level , c=";", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=";", pivote:-1
atom->call , c=";", pivote:-1
atom->label . label , c="in", pivote:-1
atom->label . call , c="in", pivote:-1
atom->call . call , c="in", pivote:-1
atom->call . label , c="in", pivote:-1
atom->label , c="in", pivote:-1
atom->( high_level ) , c="in", pivote:-1
atom->for param block , c="in", pivote:-1
atom->for param exp , c="in", pivote:-1
atom->for param high_level , c="in", pivote:-1
atom->protocol label block , c="in", pivote:-1
atom->protocol label extends label block , c="in", pivote:-1
atom->type label block , c="in", pivote:-1
atom->type label param block , c="in", pivote:-1
atom->type label inherits label block , c="in", pivote:-1
atom->type label param inherits label param block , c="in", pivote:-1
atom->function label param block , c="in", pivote:-1
atom->label param => block , c="in", pivote:-1
atom->while param block , c="in", pivote:-1
atom->while param high_level , c="in", pivote:-1
atom->if_high_level else_high_level , c="in", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="in", pivote:-1
atom->call , c="in", pivote:-1
atom->label . label , c="==", pivote:-1
atom->label . call , c="==", pivote:-1
atom->call . call , c="==", pivote:-1
atom->call . label , c="==", pivote:-1
atom->label , c="==", pivote:-1
atom->( high_level ) , c="==", pivote:-1
atom->for param block , c="==", pivote:-1
atom->for param exp , c="==", pivote:-1
atom->for param high_level , c="==", pivote:-1
atom->protocol label block , c="==", pivote:-1
atom->protocol label extends label block , c="==", pivote:-1
atom->type label block , c="==", pivote:-1
atom->type label param block , c="==", pivote:-1
atom->type label inherits label block , c="==", pivote:-1
atom->type label param inherits label param block , c="==", pivote:-1
atom->function label param block , c="==", pivote:-1
atom->label param => block , c="==", pivote:-1
atom->while param block , c="==", pivote:-1
atom->while param high_level , c="==", pivote:-1
atom->if_high_level else_high_level , c="==", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="==", pivote:-1
atom->call , c="==", pivote:-1
atom->label . label , c=">=", pivote:-1
atom->label . call , c=">=", pivote:-1
atom->call . call , c=">=", pivote:-1
atom->call . label , c=">=", pivote:-1
atom->label , c=">=", pivote:-1
atom->( high_level ) , c=">=", pivote:-1
atom->for param block , c=">=", pivote:-1
atom->for param exp , c=">=", pivote:-1
atom->for param high_level , c=">=", pivote:-1
atom->protocol label block , c=">=", pivote:-1
atom->protocol label extends label block , c=">=", pivote:-1
atom->type label block , c=">=", pivote:-1
atom->type label param block , c=">=", pivote:-1
atom->type label inherits label block , c=">=", pivote:-1
atom->type label param inherits label param block , c=">=", pivote:-1
atom->function label param block , c=">=", pivote:-1
atom->label param => block , c=">=", pivote:-1
atom->while param block , c=">=", pivote:-1
atom->while param high_level , c=">=", pivote:-1
atom->if_high_level else_high_level , c=">=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=">=", pivote:-1
atom->call , c=">=", pivote:-1
atom->label . label , c="<=", pivote:-1
atom->label . call , c="<=", pivote:-1
atom->call . call , c="<=", pivote:-1
atom->call . label , c="<=", pivote:-1
atom->label , c="<=", pivote:-1
atom->( high_level ) , c="<=", pivote:-1
atom->for param block , c="<=", pivote:-1
atom->for param exp , c="<=", pivote:-1
atom->for param high_level , c="<=", pivote:-1
atom->protocol label block , c="<=", pivote:-1
atom->protocol label extends label block , c="<=", pivote:-1
atom->type label block , c="<=", pivote:-1
atom->type label param block , c="<=", pivote:-1
atom->type label inherits label block , c="<=", pivote:-1
atom->type label param inherits label param block , c="<=", pivote:-1
atom->function label param block , c="<=", pivote:-1
atom->label param => block , c="<=", pivote:-1
atom->while param block , c="<=", pivote:-1
atom->while param high_level , c="<=", pivote:-1
atom->if_high_level else_high_level , c="<=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="<=", pivote:-1
atom->call , c="<=", pivote:-1
atom->label . label , c="&", pivote:-1
atom->label . call , c="&", pivote:-1
atom->call . call , c="&", pivote:-1
atom->call . label , c="&", pivote:-1
atom->label , c="&", pivote:-1
atom->( high_level ) , c="&", pivote:-1
atom->for param block , c="&", pivote:-1
atom->for param exp , c="&", pivote:-1
atom->for param high_level , c="&", pivote:-1
atom->protocol label block , c="&", pivote:-1
atom->protocol label extends label block , c="&", pivote:-1
atom->type label block , c="&", pivote:-1
atom->type label param block , c="&", pivote:-1
atom->type label inherits label block , c="&", pivote:-1
atom->type label param inherits label param block , c="&", pivote:-1
atom->function label param block , c="&", pivote:-1
atom->label param => block , c="&", pivote:-1
atom->while param block , c="&", pivote:-1
atom->while param high_level , c="&", pivote:-1
atom->if_high_level else_high_level , c="&", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="&", pivote:-1
atom->call , c="&", pivote:-1
atom->label . label , c="|", pivote:-1
atom->label . call , c="|", pivote:-1
atom->call . call , c="|", pivote:-1
atom->call . label , c="|", pivote:-1
atom->label , c="|", pivote:-1
atom->( high_level ) , c="|", pivote:-1
atom->for param block , c="|", pivote:-1
atom->for param exp , c="|", pivote:-1
atom->for param high_level , c="|", pivote:-1
atom->protocol label block , c="|", pivote:-1
atom->protocol label extends label block , c="|", pivote:-1
atom->type label block , c="|", pivote:-1
atom->type label param block , c="|", pivote:-1
atom->type label inherits label block , c="|", pivote:-1
atom->type label param inherits label param block , c="|", pivote:-1
atom->function label param block , c="|", pivote:-1
atom->label param => block , c="|", pivote:-1
atom->while param block , c="|", pivote:-1
atom->while param high_level , c="|", pivote:-1
atom->if_high_level else_high_level , c="|", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="|", pivote:-1
atom->call , c="|", pivote:-1
atom->label . label , c="@", pivote:-1
atom->label . call , c="@", pivote:-1
atom->call . call , c="@", pivote:-1
atom->call . label , c="@", pivote:-1
atom->label , c="@", pivote:-1
atom->( high_level ) , c="@", pivote:-1
atom->for param block , c="@", pivote:-1
atom->for param exp , c="@", pivote:-1
atom->for param high_level , c="@", pivote:-1
atom->protocol label block , c="@", pivote:-1
atom->protocol label extends label block , c="@", pivote:-1
atom->type label block , c="@", pivote:-1
atom->type label param block , c="@", pivote:-1
atom->type label inherits label block , c="@", pivote:-1
atom->type label param inherits label param block , c="@", pivote:-1
atom->function label param block , c="@", pivote:-1
atom->label param => block , c="@", pivote:-1
atom->while param block , c="@", pivote:-1
atom->while param high_level , c="@", pivote:-1
atom->if_high_level else_high_level , c="@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@", pivote:-1
atom->call , c="@", pivote:-1
atom->label . label , c="@@", pivote:-1
atom->label . call , c="@@", pivote:-1
atom->call . call , c="@@", pivote:-1
atom->call . label , c="@@", pivote:-1
atom->label , c="@@", pivote:-1
atom->( high_level ) , c="@@", pivote:-1
atom->for param block , c="@@", pivote:-1
atom->for param exp , c="@@", pivote:-1
atom->for param high_level , c="@@", pivote:-1
atom->protocol label block , c="@@", pivote:-1
atom->protocol label extends label block , c="@@", pivote:-1
atom->type label block , c="@@", pivote:-1
atom->type label param block , c="@@", pivote:-1
atom->type label inherits label block , c="@@", pivote:-1
atom->type label param inherits label param block , c="@@", pivote:-1
atom->function label param block , c="@@", pivote:-1
atom->label param => block , c="@@", pivote:-1
atom->while param block , c="@@", pivote:-1
atom->while param high_level , c="@@", pivote:-1
atom->if_high_level else_high_level , c="@@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@@", pivote:-1
atom->call , c="@@", pivote:-1
atom->label . label , c="+", pivote:-1
atom->label . call , c="+", pivote:-1
atom->call . call , c="+", pivote:-1
atom->call . label , c="+", pivote:-1
atom->label , c="+", pivote:-1
atom->( high_level ) , c="+", pivote:-1
atom->for param block , c="+", pivote:-1
atom->for param exp , c="+", pivote:-1
atom->for param high_level , c="+", pivote:-1
atom->protocol label block , c="+", pivote:-1
atom->protocol label extends label block , c="+", pivote:-1
atom->type label block , c="+", pivote:-1
atom->type label param block , c="+", pivote:-1
atom->type label inherits label block , c="+", pivote:-1
atom->type label param inherits label param block , c="+", pivote:-1
atom->function label param block , c="+", pivote:-1
atom->label param => block , c="+", pivote:-1
atom->while param block , c="+", pivote:-1
atom->while param high_level , c="+", pivote:-1
atom->if_high_level else_high_level , c="+", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="+", pivote:-1
atom->call , c="+", pivote:-1
atom->label . label , c="-", pivote:-1
atom->label . call , c="-", pivote:-1
atom->call . call , c="-", pivote:-1
atom->call . label , c="-", pivote:-1
atom->label , c="-", pivote:-1
atom->( high_level ) , c="-", pivote:-1
atom->for param block , c="-", pivote:-1
atom->for param exp , c="-", pivote:-1
atom->for param high_level , c="-", pivote:-1
atom->protocol label block , c="-", pivote:-1
atom->protocol label extends label block , c="-", pivote:-1
atom->type label block , c="-", pivote:-1
atom->type label param block , c="-", pivote:-1
atom->type label inherits label block , c="-", pivote:-1
atom->type label param inherits label param block , c="-", pivote:-1
atom->function label param block , c="-", pivote:-1
atom->label param => block , c="-", pivote:-1
atom->while param block , c="-", pivote:-1
atom->while param high_level , c="-", pivote:-1
atom->if_high_level else_high_level , c="-", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="-", pivote:-1
atom->call , c="-", pivote:-1
atom->label . label , c="*", pivote:-1
atom->label . call , c="*", pivote:-1
atom->call . call , c="*", pivote:-1
atom->call . label , c="*", pivote:-1
atom->label , c="*", pivote:-1
atom->( high_level ) , c="*", pivote:-1
atom->for param block , c="*", pivote:-1
atom->for param exp , c="*", pivote:-1
atom->for param high_level , c="*", pivote:-1
atom->protocol label block , c="*", pivote:-1
atom->protocol label extends label block , c="*", pivote:-1
atom->type label block , c="*", pivote:-1
atom->type label param block , c="*", pivote:-1
atom->type label inherits label block , c="*", pivote:-1
atom->type label param inherits label param block , c="*", pivote:-1
atom->function label param block , c="*", pivote:-1
atom->label param => block , c="*", pivote:-1
atom->while param block , c="*", pivote:-1
atom->while param high_level , c="*", pivote:-1
atom->if_high_level else_high_level , c="*", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="*", pivote:-1
atom->call , c="*", pivote:-1
atom->label . label , c="/", pivote:-1
atom->label . call , c="/", pivote:-1
atom->call . call , c="/", pivote:-1
atom->call . label , c="/", pivote:-1
atom->label , c="/", pivote:-1
atom->( high_level ) , c="/", pivote:-1
atom->for param block , c="/", pivote:-1
atom->for param exp , c="/", pivote:-1
atom->for param high_level , c="/", pivote:-1
atom->protocol label block , c="/", pivote:-1
atom->protocol label extends label block , c="/", pivote:-1
atom->type label block , c="/", pivote:-1
atom->type label param block , c="/", pivote:-1
atom->type label inherits label block , c="/", pivote:-1
atom->type label param inherits label param block , c="/", pivote:-1
atom->function label param block , c="/", pivote:-1
atom->label param => block , c="/", pivote:-1
atom->while param block , c="/", pivote:-1
atom->while param high_level , c="/", pivote:-1
atom->if_high_level else_high_level , c="/", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="/", pivote:-1
atom->call , c="/", pivote:-1
atom->label . label , c="**", pivote:-1
atom->label . call , c="**", pivote:-1
atom->call . call , c="**", pivote:-1
atom->call . label , c="**", pivote:-1
atom->label , c="**", pivote:-1
atom->( high_level ) , c="**", pivote:-1
atom->for param block , c="**", pivote:-1
atom->for param exp , c="**", pivote:-1
atom->for param high_level , c="**", pivote:-1
atom->protocol label block , c="**", pivote:-1
atom->protocol label extends label block , c="**", pivote:-1
atom->type label block , c="**", pivote:-1
atom->type label param block , c="**", pivote:-1
atom->type label inherits label block , c="**", pivote:-1
atom->type label param inherits label param block , c="**", pivote:-1
atom->function label param block , c="**", pivote:-1
atom->label param => block , c="**", pivote:-1
atom->while param block , c="**", pivote:-1
atom->while param high_level , c="**", pivote:-1
atom->if_high_level else_high_level , c="**", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="**", pivote:-1
atom->call , c="**", pivote:-1
atom->label . label , c="^", pivote:-1
atom->label . call , c="^", pivote:-1
atom->call . call , c="^", pivote:-1
atom->call . label , c="^", pivote:-1
atom->label , c="^", pivote:-1
atom->( high_level ) , c="^", pivote:-1
atom->for param block , c="^", pivote:-1
atom->for param exp , c="^", pivote:-1
atom->for param high_level , c="^", pivote:-1
atom->protocol label block , c="^", pivote:-1
atom->protocol label extends label block , c="^", pivote:-1
atom->type label block , c="^", pivote:-1
atom->type label param block , c="^", pivote:-1
atom->type label inherits label block , c="^", pivote:-1
atom->type label param inherits label param block , c="^", pivote:-1
atom->function label param block , c="^", pivote:-1
atom->label param => block , c="^", pivote:-1
atom->while param block , c="^", pivote:-1
atom->while param high_level , c="^", pivote:-1
atom->if_high_level else_high_level , c="^", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="^", pivote:-1
atom->call , c="^", pivote:-1
atom->label . label , c="%", pivote:-1
atom->label . call , c="%", pivote:-1
atom->call . call , c="%", pivote:-1
atom->call . label , c="%", pivote:-1
atom->label , c="%", pivote:-1
atom->( high_level ) , c="%", pivote:-1
atom->for param block , c="%", pivote:-1
atom->for param exp , c="%", pivote:-1
atom->for param high_level , c="%", pivote:-1
atom->protocol label block , c="%", pivote:-1
atom->protocol label extends label block , c="%", pivote:-1
atom->type label block , c="%", pivote:-1
atom->type label param block , c="%", pivote:-1
atom->type label inherits label block , c="%", pivote:-1
atom->type label param inherits label param block , c="%", pivote:-1
atom->function label param block , c="%", pivote:-1
atom->label param => block , c="%", pivote:-1
atom->while param block , c="%", pivote:-1
atom->while param high_level , c="%", pivote:-1
atom->if_high_level else_high_level , c="%", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="%", pivote:-1
atom->call , c="%", pivote:-1
label->int , c=".", pivote:-1
call->label param , c=".", pivote:-1
label->int , c=";", pivote:-1
if_high_level->if param high_level , c="else", pivote:-1
if_high_level->if param high_level , c="elif", pivote:-1
call->label param , c=";", pivote:-1
label->int , c="in", pivote:-1
call->label param , c="in", pivote:-1
label->int , c="==", pivote:-1
call->label param , c="==", pivote:-1
label->int , c=">=", pivote:-1
call->label param , c=">=", pivote:-1
label->int , c="<=", pivote:-1
call->label param , c="<=", pivote:-1
label->int , c="&", pivote:-1
call->label param , c="&", pivote:-1
label->int , c="|", pivote:-1
call->label param , c="|", pivote:-1
label->int , c="@", pivote:-1
call->label param , c="@", pivote:-1
label->int , c="@@", pivote:-1
call->label param , c="@@", pivote:-1
label->int , c="+", pivote:-1
call->label param , c="+", pivote:-1
label->int , c="-", pivote:-1
call->label param , c="-", pivote:-1
label->int , c="*", pivote:-1
call->label param , c="*", pivote:-1
label->int , c="/", pivote:-1
call->label param , c="/", pivote:-1
label->int , c="**", pivote:-1
call->label param , c="**", pivote:-1
label->int , c="^", pivote:-1
call->label param , c="^", pivote:-1
label->int , c="%", pivote:-1
call->label param , c="%", pivote:-1
 }
 GOTO(I0,new):
I1= { 
high_level->new call , c=";", pivote:0
call->label param , c=";", pivote:-1
label->int , c="(", pivote:-1
high_level->new call , c="in", pivote:0
call->label param , c="in", pivote:-1
 }
 GOTO(I0,!):
I2= { 
bool->! bool , c=";", pivote:0
bool->bool == concatenation , c=";", pivote:-1
bool->bool >= concatenation , c=";", pivote:-1
bool->bool <= concatenation , c=";", pivote:-1
bool->bool & concatenation , c=";", pivote:-1
bool->bool | concatenation , c=";", pivote:-1
bool->concatenation , c=";", pivote:-1
bool->! bool , c=";", pivote:-1
bool->bool == concatenation , c="==", pivote:-1
bool->bool >= concatenation , c="==", pivote:-1
bool->bool <= concatenation , c="==", pivote:-1
bool->bool & concatenation , c="==", pivote:-1
bool->bool | concatenation , c="==", pivote:-1
bool->concatenation , c="==", pivote:-1
bool->! bool , c="==", pivote:-1
bool->bool == concatenation , c=">=", pivote:-1
bool->bool >= concatenation , c=">=", pivote:-1
bool->bool <= concatenation , c=">=", pivote:-1
bool->bool & concatenation , c=">=", pivote:-1
bool->bool | concatenation , c=">=", pivote:-1
bool->concatenation , c=">=", pivote:-1
bool->! bool , c=">=", pivote:-1
bool->bool == concatenation , c="<=", pivote:-1
bool->bool >= concatenation , c="<=", pivote:-1
bool->bool <= concatenation , c="<=", pivote:-1
bool->bool & concatenation , c="<=", pivote:-1
bool->bool | concatenation , c="<=", pivote:-1
bool->concatenation , c="<=", pivote:-1
bool->! bool , c="<=", pivote:-1
bool->bool == concatenation , c="&", pivote:-1
bool->bool >= concatenation , c="&", pivote:-1
bool->bool <= concatenation , c="&", pivote:-1
bool->bool & concatenation , c="&", pivote:-1
bool->bool | concatenation , c="&", pivote:-1
bool->concatenation , c="&", pivote:-1
bool->! bool , c="&", pivote:-1
bool->bool == concatenation , c="|", pivote:-1
bool->bool >= concatenation , c="|", pivote:-1
bool->bool <= concatenation , c="|", pivote:-1
bool->bool & concatenation , c="|", pivote:-1
bool->bool | concatenation , c="|", pivote:-1
bool->concatenation , c="|", pivote:-1
bool->! bool , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c=";", pivote:-1
concatenation->concatenation @@ sum_minus , c=";", pivote:-1
concatenation->sum_minus , c=";", pivote:-1
concatenation->concatenation @ sum_minus , c="==", pivote:-1
concatenation->concatenation @@ sum_minus , c="==", pivote:-1
concatenation->sum_minus , c="==", pivote:-1
concatenation->concatenation @ sum_minus , c=">=", pivote:-1
concatenation->concatenation @@ sum_minus , c=">=", pivote:-1
concatenation->sum_minus , c=">=", pivote:-1
concatenation->concatenation @ sum_minus , c="<=", pivote:-1
concatenation->concatenation @@ sum_minus , c="<=", pivote:-1
concatenation->sum_minus , c="<=", pivote:-1
concatenation->concatenation @ sum_minus , c="&", pivote:-1
concatenation->concatenation @@ sum_minus , c="&", pivote:-1
concatenation->sum_minus , c="&", pivote:-1
concatenation->concatenation @ sum_minus , c="|", pivote:-1
concatenation->concatenation @@ sum_minus , c="|", pivote:-1
concatenation->sum_minus , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c="@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@", pivote:-1
concatenation->sum_minus , c="@", pivote:-1
concatenation->concatenation @ sum_minus , c="@@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@@", pivote:-1
concatenation->sum_minus , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c=";", pivote:-1
sum_minus->sum_minus - div_mult , c=";", pivote:-1
sum_minus->div_mult , c=";", pivote:-1
sum_minus->sum_minus + div_mult , c="==", pivote:-1
sum_minus->sum_minus - div_mult , c="==", pivote:-1
sum_minus->div_mult , c="==", pivote:-1
sum_minus->sum_minus + div_mult , c=">=", pivote:-1
sum_minus->sum_minus - div_mult , c=">=", pivote:-1
sum_minus->div_mult , c=">=", pivote:-1
sum_minus->sum_minus + div_mult , c="<=", pivote:-1
sum_minus->sum_minus - div_mult , c="<=", pivote:-1
sum_minus->div_mult , c="<=", pivote:-1
sum_minus->sum_minus + div_mult , c="&", pivote:-1
sum_minus->sum_minus - div_mult , c="&", pivote:-1
sum_minus->div_mult , c="&", pivote:-1
sum_minus->sum_minus + div_mult , c="|", pivote:-1
sum_minus->sum_minus - div_mult , c="|", pivote:-1
sum_minus->div_mult , c="|", pivote:-1
sum_minus->sum_minus + div_mult , c="@", pivote:-1
sum_minus->sum_minus - div_mult , c="@", pivote:-1
sum_minus->div_mult , c="@", pivote:-1
sum_minus->sum_minus + div_mult , c="@@", pivote:-1
sum_minus->sum_minus - div_mult , c="@@", pivote:-1
sum_minus->div_mult , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c="+", pivote:-1
sum_minus->sum_minus - div_mult , c="+", pivote:-1
sum_minus->div_mult , c="+", pivote:-1
sum_minus->sum_minus + div_mult , c="-", pivote:-1
sum_minus->sum_minus - div_mult , c="-", pivote:-1
sum_minus->div_mult , c="-", pivote:-1
div_mult->div_mult * pow , c=";", pivote:-1
div_mult->div_mult / pow , c=";", pivote:-1
div_mult->pow , c=";", pivote:-1
div_mult->div_mult * pow , c="==", pivote:-1
div_mult->div_mult / pow , c="==", pivote:-1
div_mult->pow , c="==", pivote:-1
div_mult->div_mult * pow , c=">=", pivote:-1
div_mult->div_mult / pow , c=">=", pivote:-1
div_mult->pow , c=">=", pivote:-1
div_mult->div_mult * pow , c="<=", pivote:-1
div_mult->div_mult / pow , c="<=", pivote:-1
div_mult->pow , c="<=", pivote:-1
div_mult->div_mult * pow , c="&", pivote:-1
div_mult->div_mult / pow , c="&", pivote:-1
div_mult->pow , c="&", pivote:-1
div_mult->div_mult * pow , c="|", pivote:-1
div_mult->div_mult / pow , c="|", pivote:-1
div_mult->pow , c="|", pivote:-1
div_mult->div_mult * pow , c="@", pivote:-1
div_mult->div_mult / pow , c="@", pivote:-1
div_mult->pow , c="@", pivote:-1
div_mult->div_mult * pow , c="@@", pivote:-1
div_mult->div_mult / pow , c="@@", pivote:-1
div_mult->pow , c="@@", pivote:-1
div_mult->div_mult * pow , c="+", pivote:-1
div_mult->div_mult / pow , c="+", pivote:-1
div_mult->pow , c="+", pivote:-1
div_mult->div_mult * pow , c="-", pivote:-1
div_mult->div_mult / pow , c="-", pivote:-1
div_mult->pow , c="-", pivote:-1
div_mult->div_mult * pow , c="*", pivote:-1
div_mult->div_mult / pow , c="*", pivote:-1
div_mult->pow , c="*", pivote:-1
div_mult->div_mult * pow , c="/", pivote:-1
div_mult->div_mult / pow , c="/", pivote:-1
div_mult->pow , c="/", pivote:-1
pow->pow ** atom , c=";", pivote:-1
pow->pow ^ atom , c=";", pivote:-1
pow->pow % atom , c=";", pivote:-1
pow->atom , c=";", pivote:-1
pow->pow ** atom , c="==", pivote:-1
pow->pow ^ atom , c="==", pivote:-1
pow->pow % atom , c="==", pivote:-1
pow->atom , c="==", pivote:-1
pow->pow ** atom , c=">=", pivote:-1
pow->pow ^ atom , c=">=", pivote:-1
pow->pow % atom , c=">=", pivote:-1
pow->atom , c=">=", pivote:-1
pow->pow ** atom , c="<=", pivote:-1
pow->pow ^ atom , c="<=", pivote:-1
pow->pow % atom , c="<=", pivote:-1
pow->atom , c="<=", pivote:-1
pow->pow ** atom , c="&", pivote:-1
pow->pow ^ atom , c="&", pivote:-1
pow->pow % atom , c="&", pivote:-1
pow->atom , c="&", pivote:-1
pow->pow ** atom , c="|", pivote:-1
pow->pow ^ atom , c="|", pivote:-1
pow->pow % atom , c="|", pivote:-1
pow->atom , c="|", pivote:-1
pow->pow ** atom , c="@", pivote:-1
pow->pow ^ atom , c="@", pivote:-1
pow->pow % atom , c="@", pivote:-1
pow->atom , c="@", pivote:-1
pow->pow ** atom , c="@@", pivote:-1
pow->pow ^ atom , c="@@", pivote:-1
pow->pow % atom , c="@@", pivote:-1
pow->atom , c="@@", pivote:-1
pow->pow ** atom , c="+", pivote:-1
pow->pow ^ atom , c="+", pivote:-1
pow->pow % atom , c="+", pivote:-1
pow->atom , c="+", pivote:-1
pow->pow ** atom , c="-", pivote:-1
pow->pow ^ atom , c="-", pivote:-1
pow->pow % atom , c="-", pivote:-1
pow->atom , c="-", pivote:-1
pow->pow ** atom , c="*", pivote:-1
pow->pow ^ atom , c="*", pivote:-1
pow->pow % atom , c="*", pivote:-1
pow->atom , c="*", pivote:-1
pow->pow ** atom , c="/", pivote:-1
pow->pow ^ atom , c="/", pivote:-1
pow->pow % atom , c="/", pivote:-1
pow->atom , c="/", pivote:-1
pow->pow ** atom , c="**", pivote:-1
pow->pow ^ atom , c="**", pivote:-1
pow->pow % atom , c="**", pivote:-1
pow->atom , c="**", pivote:-1
pow->pow ** atom , c="^", pivote:-1
pow->pow ^ atom , c="^", pivote:-1
pow->pow % atom , c="^", pivote:-1
pow->atom , c="^", pivote:-1
pow->pow ** atom , c="%", pivote:-1
pow->pow ^ atom , c="%", pivote:-1
pow->pow % atom , c="%", pivote:-1
pow->atom , c="%", pivote:-1
atom->label . label , c=";", pivote:-1
atom->label . call , c=";", pivote:-1
atom->call . call , c=";", pivote:-1
atom->call . label , c=";", pivote:-1
atom->label , c=";", pivote:-1
atom->( high_level ) , c=";", pivote:-1
atom->for param block , c=";", pivote:-1
atom->for param exp , c=";", pivote:-1
atom->for param high_level , c=";", pivote:-1
atom->protocol label block , c=";", pivote:-1
atom->protocol label extends label block , c=";", pivote:-1
atom->type label block , c=";", pivote:-1
atom->type label param block , c=";", pivote:-1
atom->type label inherits label block , c=";", pivote:-1
atom->type label param inherits label param block , c=";", pivote:-1
atom->function label param block , c=";", pivote:-1
atom->label param => block , c=";", pivote:-1
atom->while param block , c=";", pivote:-1
atom->while param high_level , c=";", pivote:-1
atom->if_high_level else_high_level , c=";", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=";", pivote:-1
atom->call , c=";", pivote:-1
atom->label . label , c="==", pivote:-1
atom->label . call , c="==", pivote:-1
atom->call . call , c="==", pivote:-1
atom->call . label , c="==", pivote:-1
atom->label , c="==", pivote:-1
atom->( high_level ) , c="==", pivote:-1
atom->for param block , c="==", pivote:-1
atom->for param exp , c="==", pivote:-1
atom->for param high_level , c="==", pivote:-1
atom->protocol label block , c="==", pivote:-1
atom->protocol label extends label block , c="==", pivote:-1
atom->type label block , c="==", pivote:-1
atom->type label param block , c="==", pivote:-1
atom->type label inherits label block , c="==", pivote:-1
atom->type label param inherits label param block , c="==", pivote:-1
atom->function label param block , c="==", pivote:-1
atom->label param => block , c="==", pivote:-1
atom->while param block , c="==", pivote:-1
atom->while param high_level , c="==", pivote:-1
atom->if_high_level else_high_level , c="==", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="==", pivote:-1
atom->call , c="==", pivote:-1
atom->label . label , c=">=", pivote:-1
atom->label . call , c=">=", pivote:-1
atom->call . call , c=">=", pivote:-1
atom->call . label , c=">=", pivote:-1
atom->label , c=">=", pivote:-1
atom->( high_level ) , c=">=", pivote:-1
atom->for param block , c=">=", pivote:-1
atom->for param exp , c=">=", pivote:-1
atom->for param high_level , c=">=", pivote:-1
atom->protocol label block , c=">=", pivote:-1
atom->protocol label extends label block , c=">=", pivote:-1
atom->type label block , c=">=", pivote:-1
atom->type label param block , c=">=", pivote:-1
atom->type label inherits label block , c=">=", pivote:-1
atom->type label param inherits label param block , c=">=", pivote:-1
atom->function label param block , c=">=", pivote:-1
atom->label param => block , c=">=", pivote:-1
atom->while param block , c=">=", pivote:-1
atom->while param high_level , c=">=", pivote:-1
atom->if_high_level else_high_level , c=">=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=">=", pivote:-1
atom->call , c=">=", pivote:-1
atom->label . label , c="<=", pivote:-1
atom->label . call , c="<=", pivote:-1
atom->call . call , c="<=", pivote:-1
atom->call . label , c="<=", pivote:-1
atom->label , c="<=", pivote:-1
atom->( high_level ) , c="<=", pivote:-1
atom->for param block , c="<=", pivote:-1
atom->for param exp , c="<=", pivote:-1
atom->for param high_level , c="<=", pivote:-1
atom->protocol label block , c="<=", pivote:-1
atom->protocol label extends label block , c="<=", pivote:-1
atom->type label block , c="<=", pivote:-1
atom->type label param block , c="<=", pivote:-1
atom->type label inherits label block , c="<=", pivote:-1
atom->type label param inherits label param block , c="<=", pivote:-1
atom->function label param block , c="<=", pivote:-1
atom->label param => block , c="<=", pivote:-1
atom->while param block , c="<=", pivote:-1
atom->while param high_level , c="<=", pivote:-1
atom->if_high_level else_high_level , c="<=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="<=", pivote:-1
atom->call , c="<=", pivote:-1
atom->label . label , c="&", pivote:-1
atom->label . call , c="&", pivote:-1
atom->call . call , c="&", pivote:-1
atom->call . label , c="&", pivote:-1
atom->label , c="&", pivote:-1
atom->( high_level ) , c="&", pivote:-1
atom->for param block , c="&", pivote:-1
atom->for param exp , c="&", pivote:-1
atom->for param high_level , c="&", pivote:-1
atom->protocol label block , c="&", pivote:-1
atom->protocol label extends label block , c="&", pivote:-1
atom->type label block , c="&", pivote:-1
atom->type label param block , c="&", pivote:-1
atom->type label inherits label block , c="&", pivote:-1
atom->type label param inherits label param block , c="&", pivote:-1
atom->function label param block , c="&", pivote:-1
atom->label param => block , c="&", pivote:-1
atom->while param block , c="&", pivote:-1
atom->while param high_level , c="&", pivote:-1
atom->if_high_level else_high_level , c="&", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="&", pivote:-1
atom->call , c="&", pivote:-1
atom->label . label , c="|", pivote:-1
atom->label . call , c="|", pivote:-1
atom->call . call , c="|", pivote:-1
atom->call . label , c="|", pivote:-1
atom->label , c="|", pivote:-1
atom->( high_level ) , c="|", pivote:-1
atom->for param block , c="|", pivote:-1
atom->for param exp , c="|", pivote:-1
atom->for param high_level , c="|", pivote:-1
atom->protocol label block , c="|", pivote:-1
atom->protocol label extends label block , c="|", pivote:-1
atom->type label block , c="|", pivote:-1
atom->type label param block , c="|", pivote:-1
atom->type label inherits label block , c="|", pivote:-1
atom->type label param inherits label param block , c="|", pivote:-1
atom->function label param block , c="|", pivote:-1
atom->label param => block , c="|", pivote:-1
atom->while param block , c="|", pivote:-1
atom->while param high_level , c="|", pivote:-1
atom->if_high_level else_high_level , c="|", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="|", pivote:-1
atom->call , c="|", pivote:-1
atom->label . label , c="@", pivote:-1
atom->label . call , c="@", pivote:-1
atom->call . call , c="@", pivote:-1
atom->call . label , c="@", pivote:-1
atom->label , c="@", pivote:-1
atom->( high_level ) , c="@", pivote:-1
atom->for param block , c="@", pivote:-1
atom->for param exp , c="@", pivote:-1
atom->for param high_level , c="@", pivote:-1
atom->protocol label block , c="@", pivote:-1
atom->protocol label extends label block , c="@", pivote:-1
atom->type label block , c="@", pivote:-1
atom->type label param block , c="@", pivote:-1
atom->type label inherits label block , c="@", pivote:-1
atom->type label param inherits label param block , c="@", pivote:-1
atom->function label param block , c="@", pivote:-1
atom->label param => block , c="@", pivote:-1
atom->while param block , c="@", pivote:-1
atom->while param high_level , c="@", pivote:-1
atom->if_high_level else_high_level , c="@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@", pivote:-1
atom->call , c="@", pivote:-1
atom->label . label , c="@@", pivote:-1
atom->label . call , c="@@", pivote:-1
atom->call . call , c="@@", pivote:-1
atom->call . label , c="@@", pivote:-1
atom->label , c="@@", pivote:-1
atom->( high_level ) , c="@@", pivote:-1
atom->for param block , c="@@", pivote:-1
atom->for param exp , c="@@", pivote:-1
atom->for param high_level , c="@@", pivote:-1
atom->protocol label block , c="@@", pivote:-1
atom->protocol label extends label block , c="@@", pivote:-1
atom->type label block , c="@@", pivote:-1
atom->type label param block , c="@@", pivote:-1
atom->type label inherits label block , c="@@", pivote:-1
atom->type label param inherits label param block , c="@@", pivote:-1
atom->function label param block , c="@@", pivote:-1
atom->label param => block , c="@@", pivote:-1
atom->while param block , c="@@", pivote:-1
atom->while param high_level , c="@@", pivote:-1
atom->if_high_level else_high_level , c="@@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@@", pivote:-1
atom->call , c="@@", pivote:-1
atom->label . label , c="+", pivote:-1
atom->label . call , c="+", pivote:-1
atom->call . call , c="+", pivote:-1
atom->call . label , c="+", pivote:-1
atom->label , c="+", pivote:-1
atom->( high_level ) , c="+", pivote:-1
atom->for param block , c="+", pivote:-1
atom->for param exp , c="+", pivote:-1
atom->for param high_level , c="+", pivote:-1
atom->protocol label block , c="+", pivote:-1
atom->protocol label extends label block , c="+", pivote:-1
atom->type label block , c="+", pivote:-1
atom->type label param block , c="+", pivote:-1
atom->type label inherits label block , c="+", pivote:-1
atom->type label param inherits label param block , c="+", pivote:-1
atom->function label param block , c="+", pivote:-1
atom->label param => block , c="+", pivote:-1
atom->while param block , c="+", pivote:-1
atom->while param high_level , c="+", pivote:-1
atom->if_high_level else_high_level , c="+", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="+", pivote:-1
atom->call , c="+", pivote:-1
atom->label . label , c="-", pivote:-1
atom->label . call , c="-", pivote:-1
atom->call . call , c="-", pivote:-1
atom->call . label , c="-", pivote:-1
atom->label , c="-", pivote:-1
atom->( high_level ) , c="-", pivote:-1
atom->for param block , c="-", pivote:-1
atom->for param exp , c="-", pivote:-1
atom->for param high_level , c="-", pivote:-1
atom->protocol label block , c="-", pivote:-1
atom->protocol label extends label block , c="-", pivote:-1
atom->type label block , c="-", pivote:-1
atom->type label param block , c="-", pivote:-1
atom->type label inherits label block , c="-", pivote:-1
atom->type label param inherits label param block , c="-", pivote:-1
atom->function label param block , c="-", pivote:-1
atom->label param => block , c="-", pivote:-1
atom->while param block , c="-", pivote:-1
atom->while param high_level , c="-", pivote:-1
atom->if_high_level else_high_level , c="-", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="-", pivote:-1
atom->call , c="-", pivote:-1
atom->label . label , c="*", pivote:-1
atom->label . call , c="*", pivote:-1
atom->call . call , c="*", pivote:-1
atom->call . label , c="*", pivote:-1
atom->label , c="*", pivote:-1
atom->( high_level ) , c="*", pivote:-1
atom->for param block , c="*", pivote:-1
atom->for param exp , c="*", pivote:-1
atom->for param high_level , c="*", pivote:-1
atom->protocol label block , c="*", pivote:-1
atom->protocol label extends label block , c="*", pivote:-1
atom->type label block , c="*", pivote:-1
atom->type label param block , c="*", pivote:-1
atom->type label inherits label block , c="*", pivote:-1
atom->type label param inherits label param block , c="*", pivote:-1
atom->function label param block , c="*", pivote:-1
atom->label param => block , c="*", pivote:-1
atom->while param block , c="*", pivote:-1
atom->while param high_level , c="*", pivote:-1
atom->if_high_level else_high_level , c="*", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="*", pivote:-1
atom->call , c="*", pivote:-1
atom->label . label , c="/", pivote:-1
atom->label . call , c="/", pivote:-1
atom->call . call , c="/", pivote:-1
atom->call . label , c="/", pivote:-1
atom->label , c="/", pivote:-1
atom->( high_level ) , c="/", pivote:-1
atom->for param block , c="/", pivote:-1
atom->for param exp , c="/", pivote:-1
atom->for param high_level , c="/", pivote:-1
atom->protocol label block , c="/", pivote:-1
atom->protocol label extends label block , c="/", pivote:-1
atom->type label block , c="/", pivote:-1
atom->type label param block , c="/", pivote:-1
atom->type label inherits label block , c="/", pivote:-1
atom->type label param inherits label param block , c="/", pivote:-1
atom->function label param block , c="/", pivote:-1
atom->label param => block , c="/", pivote:-1
atom->while param block , c="/", pivote:-1
atom->while param high_level , c="/", pivote:-1
atom->if_high_level else_high_level , c="/", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="/", pivote:-1
atom->call , c="/", pivote:-1
atom->label . label , c="**", pivote:-1
atom->label . call , c="**", pivote:-1
atom->call . call , c="**", pivote:-1
atom->call . label , c="**", pivote:-1
atom->label , c="**", pivote:-1
atom->( high_level ) , c="**", pivote:-1
atom->for param block , c="**", pivote:-1
atom->for param exp , c="**", pivote:-1
atom->for param high_level , c="**", pivote:-1
atom->protocol label block , c="**", pivote:-1
atom->protocol label extends label block , c="**", pivote:-1
atom->type label block , c="**", pivote:-1
atom->type label param block , c="**", pivote:-1
atom->type label inherits label block , c="**", pivote:-1
atom->type label param inherits label param block , c="**", pivote:-1
atom->function label param block , c="**", pivote:-1
atom->label param => block , c="**", pivote:-1
atom->while param block , c="**", pivote:-1
atom->while param high_level , c="**", pivote:-1
atom->if_high_level else_high_level , c="**", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="**", pivote:-1
atom->call , c="**", pivote:-1
atom->label . label , c="^", pivote:-1
atom->label . call , c="^", pivote:-1
atom->call . call , c="^", pivote:-1
atom->call . label , c="^", pivote:-1
atom->label , c="^", pivote:-1
atom->( high_level ) , c="^", pivote:-1
atom->for param block , c="^", pivote:-1
atom->for param exp , c="^", pivote:-1
atom->for param high_level , c="^", pivote:-1
atom->protocol label block , c="^", pivote:-1
atom->protocol label extends label block , c="^", pivote:-1
atom->type label block , c="^", pivote:-1
atom->type label param block , c="^", pivote:-1
atom->type label inherits label block , c="^", pivote:-1
atom->type label param inherits label param block , c="^", pivote:-1
atom->function label param block , c="^", pivote:-1
atom->label param => block , c="^", pivote:-1
atom->while param block , c="^", pivote:-1
atom->while param high_level , c="^", pivote:-1
atom->if_high_level else_high_level , c="^", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="^", pivote:-1
atom->call , c="^", pivote:-1
atom->label . label , c="%", pivote:-1
atom->label . call , c="%", pivote:-1
atom->call . call , c="%", pivote:-1
atom->call . label , c="%", pivote:-1
atom->label , c="%", pivote:-1
atom->( high_level ) , c="%", pivote:-1
atom->for param block , c="%", pivote:-1
atom->for param exp , c="%", pivote:-1
atom->for param high_level , c="%", pivote:-1
atom->protocol label block , c="%", pivote:-1
atom->protocol label extends label block , c="%", pivote:-1
atom->type label block , c="%", pivote:-1
atom->type label param block , c="%", pivote:-1
atom->type label inherits label block , c="%", pivote:-1
atom->type label param inherits label param block , c="%", pivote:-1
atom->function label param block , c="%", pivote:-1
atom->label param => block , c="%", pivote:-1
atom->while param block , c="%", pivote:-1
atom->while param high_level , c="%", pivote:-1
atom->if_high_level else_high_level , c="%", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="%", pivote:-1
atom->call , c="%", pivote:-1
label->int , c=".", pivote:-1
call->label param , c=".", pivote:-1
label->int , c=";", pivote:-1
label->int , c="(", pivote:-1
if_high_level->if param high_level , c="else", pivote:-1
if_high_level->if param high_level , c="elif", pivote:-1
call->label param , c=";", pivote:-1
label->int , c="==", pivote:-1
call->label param , c="==", pivote:-1
label->int , c=">=", pivote:-1
call->label param , c=">=", pivote:-1
label->int , c="<=", pivote:-1
call->label param , c="<=", pivote:-1
label->int , c="&", pivote:-1
call->label param , c="&", pivote:-1
label->int , c="|", pivote:-1
call->label param , c="|", pivote:-1
label->int , c="@", pivote:-1
call->label param , c="@", pivote:-1
label->int , c="@@", pivote:-1
call->label param , c="@@", pivote:-1
label->int , c="+", pivote:-1
call->label param , c="+", pivote:-1
label->int , c="-", pivote:-1
call->label param , c="-", pivote:-1
label->int , c="*", pivote:-1
call->label param , c="*", pivote:-1
label->int , c="/", pivote:-1
call->label param , c="/", pivote:-1
label->int , c="**", pivote:-1
call->label param , c="**", pivote:-1
label->int , c="^", pivote:-1
call->label param , c="^", pivote:-1
label->int , c="%", pivote:-1
call->label param , c="%", pivote:-1
bool->! bool , c="in", pivote:0
bool->bool == concatenation , c="in", pivote:-1
bool->bool >= concatenation , c="in", pivote:-1
bool->bool <= concatenation , c="in", pivote:-1
bool->bool & concatenation , c="in", pivote:-1
bool->bool | concatenation , c="in", pivote:-1
bool->concatenation , c="in", pivote:-1
bool->! bool , c="in", pivote:-1
concatenation->concatenation @ sum_minus , c="in", pivote:-1
concatenation->concatenation @@ sum_minus , c="in", pivote:-1
concatenation->sum_minus , c="in", pivote:-1
sum_minus->sum_minus + div_mult , c="in", pivote:-1
sum_minus->sum_minus - div_mult , c="in", pivote:-1
sum_minus->div_mult , c="in", pivote:-1
div_mult->div_mult * pow , c="in", pivote:-1
div_mult->div_mult / pow , c="in", pivote:-1
div_mult->pow , c="in", pivote:-1
pow->pow ** atom , c="in", pivote:-1
pow->pow ^ atom , c="in", pivote:-1
pow->pow % atom , c="in", pivote:-1
pow->atom , c="in", pivote:-1
atom->label . label , c="in", pivote:-1
atom->label . call , c="in", pivote:-1
atom->call . call , c="in", pivote:-1
atom->call . label , c="in", pivote:-1
atom->label , c="in", pivote:-1
atom->( high_level ) , c="in", pivote:-1
atom->for param block , c="in", pivote:-1
atom->for param exp , c="in", pivote:-1
atom->for param high_level , c="in", pivote:-1
atom->protocol label block , c="in", pivote:-1
atom->protocol label extends label block , c="in", pivote:-1
atom->type label block , c="in", pivote:-1
atom->type label param block , c="in", pivote:-1
atom->type label inherits label block , c="in", pivote:-1
atom->type label param inherits label param block , c="in", pivote:-1
atom->function label param block , c="in", pivote:-1
atom->label param => block , c="in", pivote:-1
atom->while param block , c="in", pivote:-1
atom->while param high_level , c="in", pivote:-1
atom->if_high_level else_high_level , c="in", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="in", pivote:-1
atom->call , c="in", pivote:-1
label->int , c="in", pivote:-1
call->label param , c="in", pivote:-1
bool->! bool , c="==", pivote:0
bool->! bool , c=">=", pivote:0
bool->! bool , c="<=", pivote:0
bool->! bool , c="&", pivote:0
bool->! bool , c="|", pivote:0
 }
 GOTO(I0,if):
I3= { 
if_exp->if param exp , c="else", pivote:0
param->( structure ) , c="int", pivote:-1
param->( structure ) , c="(", pivote:-1
param->( structure ) , c="for", pivote:-1
param->( structure ) , c="protocol", pivote:-1
param->( structure ) , c="type", pivote:-1
param->( structure ) , c="function", pivote:-1
param->( structure ) , c="while", pivote:-1
param->( structure ) , c="if", pivote:-1
param->( structure ) , c="!", pivote:-1
param->( structure ) , c="let", pivote:-1
param->( structure ) , c="new", pivote:-1
param->( ) , c="int", pivote:-1
param->( ) , c="(", pivote:-1
param->( ) , c="for", pivote:-1
param->( ) , c="protocol", pivote:-1
param->( ) , c="type", pivote:-1
param->( ) , c="function", pivote:-1
param->( ) , c="while", pivote:-1
param->( ) , c="if", pivote:-1
param->( ) , c="!", pivote:-1
param->( ) , c="let", pivote:-1
param->( ) , c="new", pivote:-1
if_exp->if param block , c="else", pivote:0
param->( structure ) , c="{", pivote:-1
param->( ) , c="{", pivote:-1
if_exp->if param exp , c="elif", pivote:0
if_exp->if param block , c="elif", pivote:0
if_high_level->if param high_level , c="else", pivote:0
if_high_level->if param high_level , c="elif", pivote:0
 }
 GOTO(I0,for):
I4= { 
atom->for param block , c=";", pivote:0
param->( structure ) , c="{", pivote:-1
param->( ) , c="{", pivote:-1
atom->for param exp , c=";", pivote:0
param->( structure ) , c="int", pivote:-1
param->( structure ) , c="(", pivote:-1
param->( structure ) , c="for", pivote:-1
param->( structure ) , c="protocol", pivote:-1
param->( structure ) , c="type", pivote:-1
param->( structure ) , c="function", pivote:-1
param->( structure ) , c="while", pivote:-1
param->( structure ) , c="if", pivote:-1
param->( structure ) , c="!", pivote:-1
param->( structure ) , c="let", pivote:-1
param->( structure ) , c="new", pivote:-1
param->( ) , c="int", pivote:-1
param->( ) , c="(", pivote:-1
param->( ) , c="for", pivote:-1
param->( ) , c="protocol", pivote:-1
param->( ) , c="type", pivote:-1
param->( ) , c="function", pivote:-1
param->( ) , c="while", pivote:-1
param->( ) , c="if", pivote:-1
param->( ) , c="!", pivote:-1
param->( ) , c="let", pivote:-1
param->( ) , c="new", pivote:-1
atom->for param high_level , c=";", pivote:0
atom->for param block , c="in", pivote:0
atom->for param exp , c="in", pivote:0
atom->for param high_level , c="in", pivote:0
atom->for param block , c="==", pivote:0
atom->for param exp , c="==", pivote:0
atom->for param high_level , c="==", pivote:0
atom->for param block , c=">=", pivote:0
atom->for param exp , c=">=", pivote:0
atom->for param high_level , c=">=", pivote:0
atom->for param block , c="<=", pivote:0
atom->for param exp , c="<=", pivote:0
atom->for param high_level , c="<=", pivote:0
atom->for param block , c="&", pivote:0
atom->for param exp , c="&", pivote:0
atom->for param high_level , c="&", pivote:0
atom->for param block , c="|", pivote:0
atom->for param exp , c="|", pivote:0
atom->for param high_level , c="|", pivote:0
atom->for param block , c="@", pivote:0
atom->for param exp , c="@", pivote:0
atom->for param high_level , c="@", pivote:0
atom->for param block , c="@@", pivote:0
atom->for param exp , c="@@", pivote:0
atom->for param high_level , c="@@", pivote:0
atom->for param block , c="+", pivote:0
atom->for param exp , c="+", pivote:0
atom->for param high_level , c="+", pivote:0
atom->for param block , c="-", pivote:0
atom->for param exp , c="-", pivote:0
atom->for param high_level , c="-", pivote:0
atom->for param block , c="*", pivote:0
atom->for param exp , c="*", pivote:0
atom->for param high_level , c="*", pivote:0
atom->for param block , c="/", pivote:0
atom->for param exp , c="/", pivote:0
atom->for param high_level , c="/", pivote:0
atom->for param block , c="**", pivote:0
atom->for param exp , c="**", pivote:0
atom->for param high_level , c="**", pivote:0
atom->for param block , c="^", pivote:0
atom->for param exp , c="^", pivote:0
atom->for param high_level , c="^", pivote:0
atom->for param block , c="%", pivote:0
atom->for param exp , c="%", pivote:0
atom->for param high_level , c="%", pivote:0
 }
 GOTO(I0,while):
I5= { 
exp->while param exp , c="$", pivote:0
param->( structure ) , c="int", pivote:-1
param->( structure ) , c="(", pivote:-1
param->( structure ) , c="for", pivote:-1
param->( structure ) , c="protocol", pivote:-1
param->( structure ) , c="type", pivote:-1
param->( structure ) , c="function", pivote:-1
param->( structure ) , c="while", pivote:-1
param->( structure ) , c="if", pivote:-1
param->( structure ) , c="!", pivote:-1
param->( structure ) , c="let", pivote:-1
param->( structure ) , c="new", pivote:-1
param->( ) , c="int", pivote:-1
param->( ) , c="(", pivote:-1
param->( ) , c="for", pivote:-1
param->( ) , c="protocol", pivote:-1
param->( ) , c="type", pivote:-1
param->( ) , c="function", pivote:-1
param->( ) , c="while", pivote:-1
param->( ) , c="if", pivote:-1
param->( ) , c="!", pivote:-1
param->( ) , c="let", pivote:-1
param->( ) , c="new", pivote:-1
atom->while param block , c=";", pivote:0
param->( structure ) , c="{", pivote:-1
param->( ) , c="{", pivote:-1
atom->while param high_level , c=";", pivote:0
atom->while param block , c="in", pivote:0
atom->while param high_level , c="in", pivote:0
atom->while param block , c="==", pivote:0
atom->while param high_level , c="==", pivote:0
atom->while param block , c=">=", pivote:0
atom->while param high_level , c=">=", pivote:0
atom->while param block , c="<=", pivote:0
atom->while param high_level , c="<=", pivote:0
atom->while param block , c="&", pivote:0
atom->while param high_level , c="&", pivote:0
atom->while param block , c="|", pivote:0
atom->while param high_level , c="|", pivote:0
atom->while param block , c="@", pivote:0
atom->while param high_level , c="@", pivote:0
atom->while param block , c="@@", pivote:0
atom->while param high_level , c="@@", pivote:0
atom->while param block , c="+", pivote:0
atom->while param high_level , c="+", pivote:0
atom->while param block , c="-", pivote:0
atom->while param high_level , c="-", pivote:0
atom->while param block , c="*", pivote:0
atom->while param high_level , c="*", pivote:0
atom->while param block , c="/", pivote:0
atom->while param high_level , c="/", pivote:0
atom->while param block , c="**", pivote:0
atom->while param high_level , c="**", pivote:0
atom->while param block , c="^", pivote:0
atom->while param high_level , c="^", pivote:0
atom->while param block , c="%", pivote:0
atom->while param high_level , c="%", pivote:0
 }
 GOTO(I0,function):
I6= { 
exp->function label param exp , c="$", pivote:0
label->int , c="(", pivote:-1
high_level->function label param high_level , c=";", pivote:0
high_level->function label param high_level , c="in", pivote:0
atom->function label param block , c=";", pivote:0
atom->function label param block , c="in", pivote:0
atom->function label param block , c="==", pivote:0
atom->function label param block , c=">=", pivote:0
atom->function label param block , c="<=", pivote:0
atom->function label param block , c="&", pivote:0
atom->function label param block , c="|", pivote:0
atom->function label param block , c="@", pivote:0
atom->function label param block , c="@@", pivote:0
atom->function label param block , c="+", pivote:0
atom->function label param block , c="-", pivote:0
atom->function label param block , c="*", pivote:0
atom->function label param block , c="/", pivote:0
atom->function label param block , c="**", pivote:0
atom->function label param block , c="^", pivote:0
atom->function label param block , c="%", pivote:0
 }
 GOTO(I0,type):
I7= { 
atom->type label block , c=";", pivote:0
label->int , c="{", pivote:-1
atom->type label param block , c=";", pivote:0
label->int , c="(", pivote:-1
atom->type label inherits label block , c=";", pivote:0
label->int , c="inherits", pivote:-1
atom->type label param inherits label param block , c=";", pivote:0
atom->type label block , c="in", pivote:0
atom->type label param block , c="in", pivote:0
atom->type label inherits label block , c="in", pivote:0
atom->type label param inherits label param block , c="in", pivote:0
atom->type label block , c="==", pivote:0
atom->type label param block , c="==", pivote:0
atom->type label inherits label block , c="==", pivote:0
atom->type label param inherits label param block , c="==", pivote:0
atom->type label block , c=">=", pivote:0
atom->type label param block , c=">=", pivote:0
atom->type label inherits label block , c=">=", pivote:0
atom->type label param inherits label param block , c=">=", pivote:0
atom->type label block , c="<=", pivote:0
atom->type label param block , c="<=", pivote:0
atom->type label inherits label block , c="<=", pivote:0
atom->type label param inherits label param block , c="<=", pivote:0
atom->type label block , c="&", pivote:0
atom->type label param block , c="&", pivote:0
atom->type label inherits label block , c="&", pivote:0
atom->type label param inherits label param block , c="&", pivote:0
atom->type label block , c="|", pivote:0
atom->type label param block , c="|", pivote:0
atom->type label inherits label block , c="|", pivote:0
atom->type label param inherits label param block , c="|", pivote:0
atom->type label block , c="@", pivote:0
atom->type label param block , c="@", pivote:0
atom->type label inherits label block , c="@", pivote:0
atom->type label param inherits label param block , c="@", pivote:0
atom->type label block , c="@@", pivote:0
atom->type label param block , c="@@", pivote:0
atom->type label inherits label block , c="@@", pivote:0
atom->type label param inherits label param block , c="@@", pivote:0
atom->type label block , c="+", pivote:0
atom->type label param block , c="+", pivote:0
atom->type label inherits label block , c="+", pivote:0
atom->type label param inherits label param block , c="+", pivote:0
atom->type label block , c="-", pivote:0
atom->type label param block , c="-", pivote:0
atom->type label inherits label block , c="-", pivote:0
atom->type label param inherits label param block , c="-", pivote:0
atom->type label block , c="*", pivote:0
atom->type label param block , c="*", pivote:0
atom->type label inherits label block , c="*", pivote:0
atom->type label param inherits label param block , c="*", pivote:0
atom->type label block , c="/", pivote:0
atom->type label param block , c="/", pivote:0
atom->type label inherits label block , c="/", pivote:0
atom->type label param inherits label param block , c="/", pivote:0
atom->type label block , c="**", pivote:0
atom->type label param block , c="**", pivote:0
atom->type label inherits label block , c="**", pivote:0
atom->type label param inherits label param block , c="**", pivote:0
atom->type label block , c="^", pivote:0
atom->type label param block , c="^", pivote:0
atom->type label inherits label block , c="^", pivote:0
atom->type label param inherits label param block , c="^", pivote:0
atom->type label block , c="%", pivote:0
atom->type label param block , c="%", pivote:0
atom->type label inherits label block , c="%", pivote:0
atom->type label param inherits label param block , c="%", pivote:0
 }
 GOTO(I0,protocol):
I8= { 
atom->protocol label block , c=";", pivote:0
label->int , c="{", pivote:-1
atom->protocol label extends label block , c=";", pivote:0
label->int , c="extends", pivote:-1
atom->protocol label block , c="in", pivote:0
atom->protocol label extends label block , c="in", pivote:0
atom->protocol label block , c="==", pivote:0
atom->protocol label extends label block , c="==", pivote:0
atom->protocol label block , c=">=", pivote:0
atom->protocol label extends label block , c=">=", pivote:0
atom->protocol label block , c="<=", pivote:0
atom->protocol label extends label block , c="<=", pivote:0
atom->protocol label block , c="&", pivote:0
atom->protocol label extends label block , c="&", pivote:0
atom->protocol label block , c="|", pivote:0
atom->protocol label extends label block , c="|", pivote:0
atom->protocol label block , c="@", pivote:0
atom->protocol label extends label block , c="@", pivote:0
atom->protocol label block , c="@@", pivote:0
atom->protocol label extends label block , c="@@", pivote:0
atom->protocol label block , c="+", pivote:0
atom->protocol label extends label block , c="+", pivote:0
atom->protocol label block , c="-", pivote:0
atom->protocol label extends label block , c="-", pivote:0
atom->protocol label block , c="*", pivote:0
atom->protocol label extends label block , c="*", pivote:0
atom->protocol label block , c="/", pivote:0
atom->protocol label extends label block , c="/", pivote:0
atom->protocol label block , c="**", pivote:0
atom->protocol label extends label block , c="**", pivote:0
atom->protocol label block , c="^", pivote:0
atom->protocol label extends label block , c="^", pivote:0
atom->protocol label block , c="%", pivote:0
atom->protocol label extends label block , c="%", pivote:0
 }
 GOTO(I0,let):
I9= { 
var_declaration->let label , c="=", pivote:0
label->int , c="=", pivote:-1
 }
 GOTO(I0,int):
I10= { 
label->int , c="(", pivote:0
label->int , c="=", pivote:0
label->int , c=":=", pivote:0
label->int , c="++", pivote:0
label->int , c="--", pivote:0
label->int , c=".", pivote:0
label->int , c=";", pivote:0
label->int , c="in", pivote:0
label->int , c="==", pivote:0
label->int , c=">=", pivote:0
label->int , c="<=", pivote:0
label->int , c="&", pivote:0
label->int , c="|", pivote:0
label->int , c="@", pivote:0
label->int , c="@@", pivote:0
label->int , c="+", pivote:0
label->int , c="-", pivote:0
label->int , c="*", pivote:0
label->int , c="/", pivote:0
label->int , c="**", pivote:0
label->int , c="^", pivote:0
label->int , c="%", pivote:0
 }
 GOTO(I0,():
I11= { 
param->( structure ) , c="in", pivote:0
structure->structure , high_level , c=")", pivote:-1
structure->high_level , c=")", pivote:-1
structure->high_level , high_level , c=")", pivote:-1
structure->structure , high_level , c=",", pivote:-1
structure->high_level , c=",", pivote:-1
structure->high_level , high_level , c=",", pivote:-1
high_level->bool , c=")", pivote:-1
high_level->label = high_level , c=")", pivote:-1
high_level->var_declaration = high_level , c=")", pivote:-1
high_level->label := high_level , c=")", pivote:-1
high_level->param in high_level , c=")", pivote:-1
high_level->high_level in high_level , c=")", pivote:-1
high_level->high_level in block , c=")", pivote:-1
high_level->function label param high_level , c=")", pivote:-1
high_level->label param => high_level , c=")", pivote:-1
high_level->new call , c=")", pivote:-1
high_level->label ++ , c=")", pivote:-1
high_level->label -- , c=")", pivote:-1
high_level->bool , c=",", pivote:-1
high_level->label = high_level , c=",", pivote:-1
high_level->var_declaration = high_level , c=",", pivote:-1
high_level->label := high_level , c=",", pivote:-1
high_level->param in high_level , c=",", pivote:-1
high_level->high_level in high_level , c=",", pivote:-1
high_level->high_level in block , c=",", pivote:-1
high_level->function label param high_level , c=",", pivote:-1
high_level->label param => high_level , c=",", pivote:-1
high_level->new call , c=",", pivote:-1
high_level->label ++ , c=",", pivote:-1
high_level->label -- , c=",", pivote:-1
bool->bool == concatenation , c=")", pivote:-1
bool->bool >= concatenation , c=")", pivote:-1
bool->bool <= concatenation , c=")", pivote:-1
bool->bool & concatenation , c=")", pivote:-1
bool->bool | concatenation , c=")", pivote:-1
bool->concatenation , c=")", pivote:-1
bool->! bool , c=")", pivote:-1
label->int , c="=", pivote:-1
var_declaration->let label , c="=", pivote:-1
label->int , c=":=", pivote:-1
param->( structure ) , c="in", pivote:-1
param->( ) , c="in", pivote:-1
high_level->bool , c="in", pivote:-1
high_level->label = high_level , c="in", pivote:-1
high_level->var_declaration = high_level , c="in", pivote:-1
high_level->label := high_level , c="in", pivote:-1
high_level->param in high_level , c="in", pivote:-1
high_level->high_level in high_level , c="in", pivote:-1
high_level->high_level in block , c="in", pivote:-1
high_level->function label param high_level , c="in", pivote:-1
high_level->label param => high_level , c="in", pivote:-1
high_level->new call , c="in", pivote:-1
high_level->label ++ , c="in", pivote:-1
high_level->label -- , c="in", pivote:-1
label->int , c="(", pivote:-1
label->int , c="++", pivote:-1
label->int , c="--", pivote:-1
bool->bool == concatenation , c=",", pivote:-1
bool->bool >= concatenation , c=",", pivote:-1
bool->bool <= concatenation , c=",", pivote:-1
bool->bool & concatenation , c=",", pivote:-1
bool->bool | concatenation , c=",", pivote:-1
bool->concatenation , c=",", pivote:-1
bool->! bool , c=",", pivote:-1
bool->bool == concatenation , c="==", pivote:-1
bool->bool >= concatenation , c="==", pivote:-1
bool->bool <= concatenation , c="==", pivote:-1
bool->bool & concatenation , c="==", pivote:-1
bool->bool | concatenation , c="==", pivote:-1
bool->concatenation , c="==", pivote:-1
bool->! bool , c="==", pivote:-1
bool->bool == concatenation , c=">=", pivote:-1
bool->bool >= concatenation , c=">=", pivote:-1
bool->bool <= concatenation , c=">=", pivote:-1
bool->bool & concatenation , c=">=", pivote:-1
bool->bool | concatenation , c=">=", pivote:-1
bool->concatenation , c=">=", pivote:-1
bool->! bool , c=">=", pivote:-1
bool->bool == concatenation , c="<=", pivote:-1
bool->bool >= concatenation , c="<=", pivote:-1
bool->bool <= concatenation , c="<=", pivote:-1
bool->bool & concatenation , c="<=", pivote:-1
bool->bool | concatenation , c="<=", pivote:-1
bool->concatenation , c="<=", pivote:-1
bool->! bool , c="<=", pivote:-1
bool->bool == concatenation , c="&", pivote:-1
bool->bool >= concatenation , c="&", pivote:-1
bool->bool <= concatenation , c="&", pivote:-1
bool->bool & concatenation , c="&", pivote:-1
bool->bool | concatenation , c="&", pivote:-1
bool->concatenation , c="&", pivote:-1
bool->! bool , c="&", pivote:-1
bool->bool == concatenation , c="|", pivote:-1
bool->bool >= concatenation , c="|", pivote:-1
bool->bool <= concatenation , c="|", pivote:-1
bool->bool & concatenation , c="|", pivote:-1
bool->bool | concatenation , c="|", pivote:-1
bool->concatenation , c="|", pivote:-1
bool->! bool , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c=")", pivote:-1
concatenation->concatenation @@ sum_minus , c=")", pivote:-1
concatenation->sum_minus , c=")", pivote:-1
bool->bool == concatenation , c="in", pivote:-1
bool->bool >= concatenation , c="in", pivote:-1
bool->bool <= concatenation , c="in", pivote:-1
bool->bool & concatenation , c="in", pivote:-1
bool->bool | concatenation , c="in", pivote:-1
bool->concatenation , c="in", pivote:-1
bool->! bool , c="in", pivote:-1
concatenation->concatenation @ sum_minus , c=",", pivote:-1
concatenation->concatenation @@ sum_minus , c=",", pivote:-1
concatenation->sum_minus , c=",", pivote:-1
concatenation->concatenation @ sum_minus , c="==", pivote:-1
concatenation->concatenation @@ sum_minus , c="==", pivote:-1
concatenation->sum_minus , c="==", pivote:-1
concatenation->concatenation @ sum_minus , c=">=", pivote:-1
concatenation->concatenation @@ sum_minus , c=">=", pivote:-1
concatenation->sum_minus , c=">=", pivote:-1
concatenation->concatenation @ sum_minus , c="<=", pivote:-1
concatenation->concatenation @@ sum_minus , c="<=", pivote:-1
concatenation->sum_minus , c="<=", pivote:-1
concatenation->concatenation @ sum_minus , c="&", pivote:-1
concatenation->concatenation @@ sum_minus , c="&", pivote:-1
concatenation->sum_minus , c="&", pivote:-1
concatenation->concatenation @ sum_minus , c="|", pivote:-1
concatenation->concatenation @@ sum_minus , c="|", pivote:-1
concatenation->sum_minus , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c="@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@", pivote:-1
concatenation->sum_minus , c="@", pivote:-1
concatenation->concatenation @ sum_minus , c="@@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@@", pivote:-1
concatenation->sum_minus , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c=")", pivote:-1
sum_minus->sum_minus - div_mult , c=")", pivote:-1
sum_minus->div_mult , c=")", pivote:-1
concatenation->concatenation @ sum_minus , c="in", pivote:-1
concatenation->concatenation @@ sum_minus , c="in", pivote:-1
concatenation->sum_minus , c="in", pivote:-1
sum_minus->sum_minus + div_mult , c=",", pivote:-1
sum_minus->sum_minus - div_mult , c=",", pivote:-1
sum_minus->div_mult , c=",", pivote:-1
sum_minus->sum_minus + div_mult , c="==", pivote:-1
sum_minus->sum_minus - div_mult , c="==", pivote:-1
sum_minus->div_mult , c="==", pivote:-1
sum_minus->sum_minus + div_mult , c=">=", pivote:-1
sum_minus->sum_minus - div_mult , c=">=", pivote:-1
sum_minus->div_mult , c=">=", pivote:-1
sum_minus->sum_minus + div_mult , c="<=", pivote:-1
sum_minus->sum_minus - div_mult , c="<=", pivote:-1
sum_minus->div_mult , c="<=", pivote:-1
sum_minus->sum_minus + div_mult , c="&", pivote:-1
sum_minus->sum_minus - div_mult , c="&", pivote:-1
sum_minus->div_mult , c="&", pivote:-1
sum_minus->sum_minus + div_mult , c="|", pivote:-1
sum_minus->sum_minus - div_mult , c="|", pivote:-1
sum_minus->div_mult , c="|", pivote:-1
sum_minus->sum_minus + div_mult , c="@", pivote:-1
sum_minus->sum_minus - div_mult , c="@", pivote:-1
sum_minus->div_mult , c="@", pivote:-1
sum_minus->sum_minus + div_mult , c="@@", pivote:-1
sum_minus->sum_minus - div_mult , c="@@", pivote:-1
sum_minus->div_mult , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c="+", pivote:-1
sum_minus->sum_minus - div_mult , c="+", pivote:-1
sum_minus->div_mult , c="+", pivote:-1
sum_minus->sum_minus + div_mult , c="-", pivote:-1
sum_minus->sum_minus - div_mult , c="-", pivote:-1
sum_minus->div_mult , c="-", pivote:-1
div_mult->div_mult * pow , c=")", pivote:-1
div_mult->div_mult / pow , c=")", pivote:-1
div_mult->pow , c=")", pivote:-1
sum_minus->sum_minus + div_mult , c="in", pivote:-1
sum_minus->sum_minus - div_mult , c="in", pivote:-1
sum_minus->div_mult , c="in", pivote:-1
div_mult->div_mult * pow , c=",", pivote:-1
div_mult->div_mult / pow , c=",", pivote:-1
div_mult->pow , c=",", pivote:-1
div_mult->div_mult * pow , c="==", pivote:-1
div_mult->div_mult / pow , c="==", pivote:-1
div_mult->pow , c="==", pivote:-1
div_mult->div_mult * pow , c=">=", pivote:-1
div_mult->div_mult / pow , c=">=", pivote:-1
div_mult->pow , c=">=", pivote:-1
div_mult->div_mult * pow , c="<=", pivote:-1
div_mult->div_mult / pow , c="<=", pivote:-1
div_mult->pow , c="<=", pivote:-1
div_mult->div_mult * pow , c="&", pivote:-1
div_mult->div_mult / pow , c="&", pivote:-1
div_mult->pow , c="&", pivote:-1
div_mult->div_mult * pow , c="|", pivote:-1
div_mult->div_mult / pow , c="|", pivote:-1
div_mult->pow , c="|", pivote:-1
div_mult->div_mult * pow , c="@", pivote:-1
div_mult->div_mult / pow , c="@", pivote:-1
div_mult->pow , c="@", pivote:-1
div_mult->div_mult * pow , c="@@", pivote:-1
div_mult->div_mult / pow , c="@@", pivote:-1
div_mult->pow , c="@@", pivote:-1
div_mult->div_mult * pow , c="+", pivote:-1
div_mult->div_mult / pow , c="+", pivote:-1
div_mult->pow , c="+", pivote:-1
div_mult->div_mult * pow , c="-", pivote:-1
div_mult->div_mult / pow , c="-", pivote:-1
div_mult->pow , c="-", pivote:-1
div_mult->div_mult * pow , c="*", pivote:-1
div_mult->div_mult / pow , c="*", pivote:-1
div_mult->pow , c="*", pivote:-1
div_mult->div_mult * pow , c="/", pivote:-1
div_mult->div_mult / pow , c="/", pivote:-1
div_mult->pow , c="/", pivote:-1
pow->pow ** atom , c=")", pivote:-1
pow->pow ^ atom , c=")", pivote:-1
pow->pow % atom , c=")", pivote:-1
pow->atom , c=")", pivote:-1
div_mult->div_mult * pow , c="in", pivote:-1
div_mult->div_mult / pow , c="in", pivote:-1
div_mult->pow , c="in", pivote:-1
pow->pow ** atom , c=",", pivote:-1
pow->pow ^ atom , c=",", pivote:-1
pow->pow % atom , c=",", pivote:-1
pow->atom , c=",", pivote:-1
pow->pow ** atom , c="==", pivote:-1
pow->pow ^ atom , c="==", pivote:-1
pow->pow % atom , c="==", pivote:-1
pow->atom , c="==", pivote:-1
pow->pow ** atom , c=">=", pivote:-1
pow->pow ^ atom , c=">=", pivote:-1
pow->pow % atom , c=">=", pivote:-1
pow->atom , c=">=", pivote:-1
pow->pow ** atom , c="<=", pivote:-1
pow->pow ^ atom , c="<=", pivote:-1
pow->pow % atom , c="<=", pivote:-1
pow->atom , c="<=", pivote:-1
pow->pow ** atom , c="&", pivote:-1
pow->pow ^ atom , c="&", pivote:-1
pow->pow % atom , c="&", pivote:-1
pow->atom , c="&", pivote:-1
pow->pow ** atom , c="|", pivote:-1
pow->pow ^ atom , c="|", pivote:-1
pow->pow % atom , c="|", pivote:-1
pow->atom , c="|", pivote:-1
pow->pow ** atom , c="@", pivote:-1
pow->pow ^ atom , c="@", pivote:-1
pow->pow % atom , c="@", pivote:-1
pow->atom , c="@", pivote:-1
pow->pow ** atom , c="@@", pivote:-1
pow->pow ^ atom , c="@@", pivote:-1
pow->pow % atom , c="@@", pivote:-1
pow->atom , c="@@", pivote:-1
pow->pow ** atom , c="+", pivote:-1
pow->pow ^ atom , c="+", pivote:-1
pow->pow % atom , c="+", pivote:-1
pow->atom , c="+", pivote:-1
pow->pow ** atom , c="-", pivote:-1
pow->pow ^ atom , c="-", pivote:-1
pow->pow % atom , c="-", pivote:-1
pow->atom , c="-", pivote:-1
pow->pow ** atom , c="*", pivote:-1
pow->pow ^ atom , c="*", pivote:-1
pow->pow % atom , c="*", pivote:-1
pow->atom , c="*", pivote:-1
pow->pow ** atom , c="/", pivote:-1
pow->pow ^ atom , c="/", pivote:-1
pow->pow % atom , c="/", pivote:-1
pow->atom , c="/", pivote:-1
pow->pow ** atom , c="**", pivote:-1
pow->pow ^ atom , c="**", pivote:-1
pow->pow % atom , c="**", pivote:-1
pow->atom , c="**", pivote:-1
pow->pow ** atom , c="^", pivote:-1
pow->pow ^ atom , c="^", pivote:-1
pow->pow % atom , c="^", pivote:-1
pow->atom , c="^", pivote:-1
pow->pow ** atom , c="%", pivote:-1
pow->pow ^ atom , c="%", pivote:-1
pow->pow % atom , c="%", pivote:-1
pow->atom , c="%", pivote:-1
atom->label . label , c=")", pivote:-1
atom->label . call , c=")", pivote:-1
atom->call . call , c=")", pivote:-1
atom->call . label , c=")", pivote:-1
atom->label , c=")", pivote:-1
atom->( high_level ) , c=")", pivote:-1
atom->for param block , c=")", pivote:-1
atom->for param exp , c=")", pivote:-1
atom->for param high_level , c=")", pivote:-1
atom->protocol label block , c=")", pivote:-1
atom->protocol label extends label block , c=")", pivote:-1
atom->type label block , c=")", pivote:-1
atom->type label param block , c=")", pivote:-1
atom->type label inherits label block , c=")", pivote:-1
atom->type label param inherits label param block , c=")", pivote:-1
atom->function label param block , c=")", pivote:-1
atom->label param => block , c=")", pivote:-1
atom->while param block , c=")", pivote:-1
atom->while param high_level , c=")", pivote:-1
atom->if_high_level else_high_level , c=")", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=")", pivote:-1
atom->call , c=")", pivote:-1
pow->pow ** atom , c="in", pivote:-1
pow->pow ^ atom , c="in", pivote:-1
pow->pow % atom , c="in", pivote:-1
pow->atom , c="in", pivote:-1
atom->label . label , c=",", pivote:-1
atom->label . call , c=",", pivote:-1
atom->call . call , c=",", pivote:-1
atom->call . label , c=",", pivote:-1
atom->label , c=",", pivote:-1
atom->( high_level ) , c=",", pivote:-1
atom->for param block , c=",", pivote:-1
atom->for param exp , c=",", pivote:-1
atom->for param high_level , c=",", pivote:-1
atom->protocol label block , c=",", pivote:-1
atom->protocol label extends label block , c=",", pivote:-1
atom->type label block , c=",", pivote:-1
atom->type label param block , c=",", pivote:-1
atom->type label inherits label block , c=",", pivote:-1
atom->type label param inherits label param block , c=",", pivote:-1
atom->function label param block , c=",", pivote:-1
atom->label param => block , c=",", pivote:-1
atom->while param block , c=",", pivote:-1
atom->while param high_level , c=",", pivote:-1
atom->if_high_level else_high_level , c=",", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=",", pivote:-1
atom->call , c=",", pivote:-1
atom->label . label , c="==", pivote:-1
atom->label . call , c="==", pivote:-1
atom->call . call , c="==", pivote:-1
atom->call . label , c="==", pivote:-1
atom->label , c="==", pivote:-1
atom->( high_level ) , c="==", pivote:-1
atom->for param block , c="==", pivote:-1
atom->for param exp , c="==", pivote:-1
atom->for param high_level , c="==", pivote:-1
atom->protocol label block , c="==", pivote:-1
atom->protocol label extends label block , c="==", pivote:-1
atom->type label block , c="==", pivote:-1
atom->type label param block , c="==", pivote:-1
atom->type label inherits label block , c="==", pivote:-1
atom->type label param inherits label param block , c="==", pivote:-1
atom->function label param block , c="==", pivote:-1
atom->label param => block , c="==", pivote:-1
atom->while param block , c="==", pivote:-1
atom->while param high_level , c="==", pivote:-1
atom->if_high_level else_high_level , c="==", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="==", pivote:-1
atom->call , c="==", pivote:-1
atom->label . label , c=">=", pivote:-1
atom->label . call , c=">=", pivote:-1
atom->call . call , c=">=", pivote:-1
atom->call . label , c=">=", pivote:-1
atom->label , c=">=", pivote:-1
atom->( high_level ) , c=">=", pivote:-1
atom->for param block , c=">=", pivote:-1
atom->for param exp , c=">=", pivote:-1
atom->for param high_level , c=">=", pivote:-1
atom->protocol label block , c=">=", pivote:-1
atom->protocol label extends label block , c=">=", pivote:-1
atom->type label block , c=">=", pivote:-1
atom->type label param block , c=">=", pivote:-1
atom->type label inherits label block , c=">=", pivote:-1
atom->type label param inherits label param block , c=">=", pivote:-1
atom->function label param block , c=">=", pivote:-1
atom->label param => block , c=">=", pivote:-1
atom->while param block , c=">=", pivote:-1
atom->while param high_level , c=">=", pivote:-1
atom->if_high_level else_high_level , c=">=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=">=", pivote:-1
atom->call , c=">=", pivote:-1
atom->label . label , c="<=", pivote:-1
atom->label . call , c="<=", pivote:-1
atom->call . call , c="<=", pivote:-1
atom->call . label , c="<=", pivote:-1
atom->label , c="<=", pivote:-1
atom->( high_level ) , c="<=", pivote:-1
atom->for param block , c="<=", pivote:-1
atom->for param exp , c="<=", pivote:-1
atom->for param high_level , c="<=", pivote:-1
atom->protocol label block , c="<=", pivote:-1
atom->protocol label extends label block , c="<=", pivote:-1
atom->type label block , c="<=", pivote:-1
atom->type label param block , c="<=", pivote:-1
atom->type label inherits label block , c="<=", pivote:-1
atom->type label param inherits label param block , c="<=", pivote:-1
atom->function label param block , c="<=", pivote:-1
atom->label param => block , c="<=", pivote:-1
atom->while param block , c="<=", pivote:-1
atom->while param high_level , c="<=", pivote:-1
atom->if_high_level else_high_level , c="<=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="<=", pivote:-1
atom->call , c="<=", pivote:-1
atom->label . label , c="&", pivote:-1
atom->label . call , c="&", pivote:-1
atom->call . call , c="&", pivote:-1
atom->call . label , c="&", pivote:-1
atom->label , c="&", pivote:-1
atom->( high_level ) , c="&", pivote:-1
atom->for param block , c="&", pivote:-1
atom->for param exp , c="&", pivote:-1
atom->for param high_level , c="&", pivote:-1
atom->protocol label block , c="&", pivote:-1
atom->protocol label extends label block , c="&", pivote:-1
atom->type label block , c="&", pivote:-1
atom->type label param block , c="&", pivote:-1
atom->type label inherits label block , c="&", pivote:-1
atom->type label param inherits label param block , c="&", pivote:-1
atom->function label param block , c="&", pivote:-1
atom->label param => block , c="&", pivote:-1
atom->while param block , c="&", pivote:-1
atom->while param high_level , c="&", pivote:-1
atom->if_high_level else_high_level , c="&", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="&", pivote:-1
atom->call , c="&", pivote:-1
atom->label . label , c="|", pivote:-1
atom->label . call , c="|", pivote:-1
atom->call . call , c="|", pivote:-1
atom->call . label , c="|", pivote:-1
atom->label , c="|", pivote:-1
atom->( high_level ) , c="|", pivote:-1
atom->for param block , c="|", pivote:-1
atom->for param exp , c="|", pivote:-1
atom->for param high_level , c="|", pivote:-1
atom->protocol label block , c="|", pivote:-1
atom->protocol label extends label block , c="|", pivote:-1
atom->type label block , c="|", pivote:-1
atom->type label param block , c="|", pivote:-1
atom->type label inherits label block , c="|", pivote:-1
atom->type label param inherits label param block , c="|", pivote:-1
atom->function label param block , c="|", pivote:-1
atom->label param => block , c="|", pivote:-1
atom->while param block , c="|", pivote:-1
atom->while param high_level , c="|", pivote:-1
atom->if_high_level else_high_level , c="|", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="|", pivote:-1
atom->call , c="|", pivote:-1
atom->label . label , c="@", pivote:-1
atom->label . call , c="@", pivote:-1
atom->call . call , c="@", pivote:-1
atom->call . label , c="@", pivote:-1
atom->label , c="@", pivote:-1
atom->( high_level ) , c="@", pivote:-1
atom->for param block , c="@", pivote:-1
atom->for param exp , c="@", pivote:-1
atom->for param high_level , c="@", pivote:-1
atom->protocol label block , c="@", pivote:-1
atom->protocol label extends label block , c="@", pivote:-1
atom->type label block , c="@", pivote:-1
atom->type label param block , c="@", pivote:-1
atom->type label inherits label block , c="@", pivote:-1
atom->type label param inherits label param block , c="@", pivote:-1
atom->function label param block , c="@", pivote:-1
atom->label param => block , c="@", pivote:-1
atom->while param block , c="@", pivote:-1
atom->while param high_level , c="@", pivote:-1
atom->if_high_level else_high_level , c="@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@", pivote:-1
atom->call , c="@", pivote:-1
atom->label . label , c="@@", pivote:-1
atom->label . call , c="@@", pivote:-1
atom->call . call , c="@@", pivote:-1
atom->call . label , c="@@", pivote:-1
atom->label , c="@@", pivote:-1
atom->( high_level ) , c="@@", pivote:-1
atom->for param block , c="@@", pivote:-1
atom->for param exp , c="@@", pivote:-1
atom->for param high_level , c="@@", pivote:-1
atom->protocol label block , c="@@", pivote:-1
atom->protocol label extends label block , c="@@", pivote:-1
atom->type label block , c="@@", pivote:-1
atom->type label param block , c="@@", pivote:-1
atom->type label inherits label block , c="@@", pivote:-1
atom->type label param inherits label param block , c="@@", pivote:-1
atom->function label param block , c="@@", pivote:-1
atom->label param => block , c="@@", pivote:-1
atom->while param block , c="@@", pivote:-1
atom->while param high_level , c="@@", pivote:-1
atom->if_high_level else_high_level , c="@@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@@", pivote:-1
atom->call , c="@@", pivote:-1
atom->label . label , c="+", pivote:-1
atom->label . call , c="+", pivote:-1
atom->call . call , c="+", pivote:-1
atom->call . label , c="+", pivote:-1
atom->label , c="+", pivote:-1
atom->( high_level ) , c="+", pivote:-1
atom->for param block , c="+", pivote:-1
atom->for param exp , c="+", pivote:-1
atom->for param high_level , c="+", pivote:-1
atom->protocol label block , c="+", pivote:-1
atom->protocol label extends label block , c="+", pivote:-1
atom->type label block , c="+", pivote:-1
atom->type label param block , c="+", pivote:-1
atom->type label inherits label block , c="+", pivote:-1
atom->type label param inherits label param block , c="+", pivote:-1
atom->function label param block , c="+", pivote:-1
atom->label param => block , c="+", pivote:-1
atom->while param block , c="+", pivote:-1
atom->while param high_level , c="+", pivote:-1
atom->if_high_level else_high_level , c="+", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="+", pivote:-1
atom->call , c="+", pivote:-1
atom->label . label , c="-", pivote:-1
atom->label . call , c="-", pivote:-1
atom->call . call , c="-", pivote:-1
atom->call . label , c="-", pivote:-1
atom->label , c="-", pivote:-1
atom->( high_level ) , c="-", pivote:-1
atom->for param block , c="-", pivote:-1
atom->for param exp , c="-", pivote:-1
atom->for param high_level , c="-", pivote:-1
atom->protocol label block , c="-", pivote:-1
atom->protocol label extends label block , c="-", pivote:-1
atom->type label block , c="-", pivote:-1
atom->type label param block , c="-", pivote:-1
atom->type label inherits label block , c="-", pivote:-1
atom->type label param inherits label param block , c="-", pivote:-1
atom->function label param block , c="-", pivote:-1
atom->label param => block , c="-", pivote:-1
atom->while param block , c="-", pivote:-1
atom->while param high_level , c="-", pivote:-1
atom->if_high_level else_high_level , c="-", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="-", pivote:-1
atom->call , c="-", pivote:-1
atom->label . label , c="*", pivote:-1
atom->label . call , c="*", pivote:-1
atom->call . call , c="*", pivote:-1
atom->call . label , c="*", pivote:-1
atom->label , c="*", pivote:-1
atom->( high_level ) , c="*", pivote:-1
atom->for param block , c="*", pivote:-1
atom->for param exp , c="*", pivote:-1
atom->for param high_level , c="*", pivote:-1
atom->protocol label block , c="*", pivote:-1
atom->protocol label extends label block , c="*", pivote:-1
atom->type label block , c="*", pivote:-1
atom->type label param block , c="*", pivote:-1
atom->type label inherits label block , c="*", pivote:-1
atom->type label param inherits label param block , c="*", pivote:-1
atom->function label param block , c="*", pivote:-1
atom->label param => block , c="*", pivote:-1
atom->while param block , c="*", pivote:-1
atom->while param high_level , c="*", pivote:-1
atom->if_high_level else_high_level , c="*", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="*", pivote:-1
atom->call , c="*", pivote:-1
atom->label . label , c="/", pivote:-1
atom->label . call , c="/", pivote:-1
atom->call . call , c="/", pivote:-1
atom->call . label , c="/", pivote:-1
atom->label , c="/", pivote:-1
atom->( high_level ) , c="/", pivote:-1
atom->for param block , c="/", pivote:-1
atom->for param exp , c="/", pivote:-1
atom->for param high_level , c="/", pivote:-1
atom->protocol label block , c="/", pivote:-1
atom->protocol label extends label block , c="/", pivote:-1
atom->type label block , c="/", pivote:-1
atom->type label param block , c="/", pivote:-1
atom->type label inherits label block , c="/", pivote:-1
atom->type label param inherits label param block , c="/", pivote:-1
atom->function label param block , c="/", pivote:-1
atom->label param => block , c="/", pivote:-1
atom->while param block , c="/", pivote:-1
atom->while param high_level , c="/", pivote:-1
atom->if_high_level else_high_level , c="/", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="/", pivote:-1
atom->call , c="/", pivote:-1
atom->label . label , c="**", pivote:-1
atom->label . call , c="**", pivote:-1
atom->call . call , c="**", pivote:-1
atom->call . label , c="**", pivote:-1
atom->label , c="**", pivote:-1
atom->( high_level ) , c="**", pivote:-1
atom->for param block , c="**", pivote:-1
atom->for param exp , c="**", pivote:-1
atom->for param high_level , c="**", pivote:-1
atom->protocol label block , c="**", pivote:-1
atom->protocol label extends label block , c="**", pivote:-1
atom->type label block , c="**", pivote:-1
atom->type label param block , c="**", pivote:-1
atom->type label inherits label block , c="**", pivote:-1
atom->type label param inherits label param block , c="**", pivote:-1
atom->function label param block , c="**", pivote:-1
atom->label param => block , c="**", pivote:-1
atom->while param block , c="**", pivote:-1
atom->while param high_level , c="**", pivote:-1
atom->if_high_level else_high_level , c="**", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="**", pivote:-1
atom->call , c="**", pivote:-1
atom->label . label , c="^", pivote:-1
atom->label . call , c="^", pivote:-1
atom->call . call , c="^", pivote:-1
atom->call . label , c="^", pivote:-1
atom->label , c="^", pivote:-1
atom->( high_level ) , c="^", pivote:-1
atom->for param block , c="^", pivote:-1
atom->for param exp , c="^", pivote:-1
atom->for param high_level , c="^", pivote:-1
atom->protocol label block , c="^", pivote:-1
atom->protocol label extends label block , c="^", pivote:-1
atom->type label block , c="^", pivote:-1
atom->type label param block , c="^", pivote:-1
atom->type label inherits label block , c="^", pivote:-1
atom->type label param inherits label param block , c="^", pivote:-1
atom->function label param block , c="^", pivote:-1
atom->label param => block , c="^", pivote:-1
atom->while param block , c="^", pivote:-1
atom->while param high_level , c="^", pivote:-1
atom->if_high_level else_high_level , c="^", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="^", pivote:-1
atom->call , c="^", pivote:-1
atom->label . label , c="%", pivote:-1
atom->label . call , c="%", pivote:-1
atom->call . call , c="%", pivote:-1
atom->call . label , c="%", pivote:-1
atom->label , c="%", pivote:-1
atom->( high_level ) , c="%", pivote:-1
atom->for param block , c="%", pivote:-1
atom->for param exp , c="%", pivote:-1
atom->for param high_level , c="%", pivote:-1
atom->protocol label block , c="%", pivote:-1
atom->protocol label extends label block , c="%", pivote:-1
atom->type label block , c="%", pivote:-1
atom->type label param block , c="%", pivote:-1
atom->type label inherits label block , c="%", pivote:-1
atom->type label param inherits label param block , c="%", pivote:-1
atom->function label param block , c="%", pivote:-1
atom->label param => block , c="%", pivote:-1
atom->while param block , c="%", pivote:-1
atom->while param high_level , c="%", pivote:-1
atom->if_high_level else_high_level , c="%", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="%", pivote:-1
atom->call , c="%", pivote:-1
label->int , c=".", pivote:-1
call->label param , c=".", pivote:-1
label->int , c=")", pivote:-1
if_high_level->if param high_level , c="else", pivote:-1
if_high_level->if param high_level , c="elif", pivote:-1
call->label param , c=")", pivote:-1
atom->label . label , c="in", pivote:-1
atom->label . call , c="in", pivote:-1
atom->call . call , c="in", pivote:-1
atom->call . label , c="in", pivote:-1
atom->label , c="in", pivote:-1
atom->( high_level ) , c="in", pivote:-1
atom->for param block , c="in", pivote:-1
atom->for param exp , c="in", pivote:-1
atom->for param high_level , c="in", pivote:-1
atom->protocol label block , c="in", pivote:-1
atom->protocol label extends label block , c="in", pivote:-1
atom->type label block , c="in", pivote:-1
atom->type label param block , c="in", pivote:-1
atom->type label inherits label block , c="in", pivote:-1
atom->type label param inherits label param block , c="in", pivote:-1
atom->function label param block , c="in", pivote:-1
atom->label param => block , c="in", pivote:-1
atom->while param block , c="in", pivote:-1
atom->while param high_level , c="in", pivote:-1
atom->if_high_level else_high_level , c="in", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="in", pivote:-1
atom->call , c="in", pivote:-1
label->int , c=",", pivote:-1
call->label param , c=",", pivote:-1
label->int , c="==", pivote:-1
call->label param , c="==", pivote:-1
label->int , c=">=", pivote:-1
call->label param , c=">=", pivote:-1
label->int , c="<=", pivote:-1
call->label param , c="<=", pivote:-1
label->int , c="&", pivote:-1
call->label param , c="&", pivote:-1
label->int , c="|", pivote:-1
call->label param , c="|", pivote:-1
label->int , c="@", pivote:-1
call->label param , c="@", pivote:-1
label->int , c="@@", pivote:-1
call->label param , c="@@", pivote:-1
label->int , c="+", pivote:-1
call->label param , c="+", pivote:-1
label->int , c="-", pivote:-1
call->label param , c="-", pivote:-1
label->int , c="*", pivote:-1
call->label param , c="*", pivote:-1
label->int , c="/", pivote:-1
call->label param , c="/", pivote:-1
label->int , c="**", pivote:-1
call->label param , c="**", pivote:-1
label->int , c="^", pivote:-1
call->label param , c="^", pivote:-1
label->int , c="%", pivote:-1
call->label param , c="%", pivote:-1
label->int , c="in", pivote:-1
call->label param , c="in", pivote:-1
param->( ) , c="in", pivote:0
atom->( high_level ) , c=";", pivote:0
atom->( high_level ) , c="in", pivote:0
atom->( high_level ) , c="==", pivote:0
atom->( high_level ) , c=">=", pivote:0
atom->( high_level ) , c="<=", pivote:0
atom->( high_level ) , c="&", pivote:0
atom->( high_level ) , c="|", pivote:0
atom->( high_level ) , c="@", pivote:0
atom->( high_level ) , c="@@", pivote:0
atom->( high_level ) , c="+", pivote:0
atom->( high_level ) , c="-", pivote:0
atom->( high_level ) , c="*", pivote:0
atom->( high_level ) , c="/", pivote:0
atom->( high_level ) , c="**", pivote:0
atom->( high_level ) , c="^", pivote:0
atom->( high_level ) , c="%", pivote:0
 }
 GOTO(I0,exp):
I12= { 
S->exp , c="$", pivote:0
 }
 GOTO(I0,sum_minus):
I13= { 
concatenation->sum_minus , c=";", pivote:0
concatenation->sum_minus , c="in", pivote:0
concatenation->sum_minus , c="==", pivote:0
concatenation->sum_minus , c=">=", pivote:0
concatenation->sum_minus , c="<=", pivote:0
concatenation->sum_minus , c="&", pivote:0
concatenation->sum_minus , c="|", pivote:0
concatenation->sum_minus , c="@", pivote:0
concatenation->sum_minus , c="@@", pivote:0
sum_minus->sum_minus + div_mult , c=";", pivote:0
sum_minus->sum_minus - div_mult , c=";", pivote:0
sum_minus->sum_minus + div_mult , c="in", pivote:0
sum_minus->sum_minus - div_mult , c="in", pivote:0
sum_minus->sum_minus + div_mult , c="==", pivote:0
sum_minus->sum_minus - div_mult , c="==", pivote:0
sum_minus->sum_minus + div_mult , c=">=", pivote:0
sum_minus->sum_minus - div_mult , c=">=", pivote:0
sum_minus->sum_minus + div_mult , c="<=", pivote:0
sum_minus->sum_minus - div_mult , c="<=", pivote:0
sum_minus->sum_minus + div_mult , c="&", pivote:0
sum_minus->sum_minus - div_mult , c="&", pivote:0
sum_minus->sum_minus + div_mult , c="|", pivote:0
sum_minus->sum_minus - div_mult , c="|", pivote:0
sum_minus->sum_minus + div_mult , c="@", pivote:0
sum_minus->sum_minus - div_mult , c="@", pivote:0
sum_minus->sum_minus + div_mult , c="@@", pivote:0
sum_minus->sum_minus - div_mult , c="@@", pivote:0
sum_minus->sum_minus + div_mult , c="+", pivote:0
sum_minus->sum_minus - div_mult , c="+", pivote:0
sum_minus->sum_minus + div_mult , c="-", pivote:0
sum_minus->sum_minus - div_mult , c="-", pivote:0
 }
 GOTO(I0,atom):
I14= { 
pow->atom , c=";", pivote:0
pow->atom , c="in", pivote:0
pow->atom , c="==", pivote:0
pow->atom , c=">=", pivote:0
pow->atom , c="<=", pivote:0
pow->atom , c="&", pivote:0
pow->atom , c="|", pivote:0
pow->atom , c="@", pivote:0
pow->atom , c="@@", pivote:0
pow->atom , c="+", pivote:0
pow->atom , c="-", pivote:0
pow->atom , c="*", pivote:0
pow->atom , c="/", pivote:0
pow->atom , c="**", pivote:0
pow->atom , c="^", pivote:0
pow->atom , c="%", pivote:0
 }
 GOTO(I0,div_mult):
I15= { 
sum_minus->div_mult , c=";", pivote:0
sum_minus->div_mult , c="in", pivote:0
sum_minus->div_mult , c="==", pivote:0
sum_minus->div_mult , c=">=", pivote:0
sum_minus->div_mult , c="<=", pivote:0
sum_minus->div_mult , c="&", pivote:0
sum_minus->div_mult , c="|", pivote:0
sum_minus->div_mult , c="@", pivote:0
sum_minus->div_mult , c="@@", pivote:0
sum_minus->div_mult , c="+", pivote:0
sum_minus->div_mult , c="-", pivote:0
div_mult->div_mult * pow , c=";", pivote:0
div_mult->div_mult / pow , c=";", pivote:0
div_mult->div_mult * pow , c="in", pivote:0
div_mult->div_mult / pow , c="in", pivote:0
div_mult->div_mult * pow , c="==", pivote:0
div_mult->div_mult / pow , c="==", pivote:0
div_mult->div_mult * pow , c=">=", pivote:0
div_mult->div_mult / pow , c=">=", pivote:0
div_mult->div_mult * pow , c="<=", pivote:0
div_mult->div_mult / pow , c="<=", pivote:0
div_mult->div_mult * pow , c="&", pivote:0
div_mult->div_mult / pow , c="&", pivote:0
div_mult->div_mult * pow , c="|", pivote:0
div_mult->div_mult / pow , c="|", pivote:0
div_mult->div_mult * pow , c="@", pivote:0
div_mult->div_mult / pow , c="@", pivote:0
div_mult->div_mult * pow , c="@@", pivote:0
div_mult->div_mult / pow , c="@@", pivote:0
div_mult->div_mult * pow , c="+", pivote:0
div_mult->div_mult / pow , c="+", pivote:0
div_mult->div_mult * pow , c="-", pivote:0
div_mult->div_mult / pow , c="-", pivote:0
div_mult->div_mult * pow , c="*", pivote:0
div_mult->div_mult / pow , c="*", pivote:0
div_mult->div_mult * pow , c="/", pivote:0
div_mult->div_mult / pow , c="/", pivote:0
 }
 GOTO(I0,var_declaration):
I16= { 
high_level->var_declaration = high_level , c=";", pivote:0
high_level->var_declaration = high_level , c="in", pivote:0
 }
 GOTO(I0,high_level):
I17= { 
exp->high_level ; , c="$", pivote:0
exp->high_level in exp , c="$", pivote:0
high_level->high_level in high_level , c=";", pivote:0
high_level->high_level in block , c=";", pivote:0
high_level->high_level in high_level , c="in", pivote:0
high_level->high_level in block , c="in", pivote:0
 }
 GOTO(I0,param):
I18= { 
exp->param in exp , c="$", pivote:0
high_level->param in high_level , c=";", pivote:0
high_level->param in high_level , c="in", pivote:0
 }
 GOTO(I0,label):
I19= { 
exp->label param => exp , c="$", pivote:0
param->( structure ) , c="=>", pivote:-1
param->( ) , c="=>", pivote:-1
high_level->label = high_level , c=";", pivote:0
high_level->label := high_level , c=";", pivote:0
high_level->label param => high_level , c=";", pivote:0
high_level->label ++ , c=";", pivote:0
high_level->label -- , c=";", pivote:0
high_level->label = high_level , c="in", pivote:0
high_level->label := high_level , c="in", pivote:0
high_level->label param => high_level , c="in", pivote:0
high_level->label ++ , c="in", pivote:0
high_level->label -- , c="in", pivote:0
atom->label . label , c=";", pivote:0
atom->label . call , c=";", pivote:0
atom->label , c=";", pivote:0
atom->label param => block , c=";", pivote:0
atom->label . label , c="in", pivote:0
atom->label . call , c="in", pivote:0
atom->label , c="in", pivote:0
atom->label param => block , c="in", pivote:0
atom->label . label , c="==", pivote:0
atom->label . call , c="==", pivote:0
atom->label , c="==", pivote:0
atom->label param => block , c="==", pivote:0
atom->label . label , c=">=", pivote:0
atom->label . call , c=">=", pivote:0
atom->label , c=">=", pivote:0
atom->label param => block , c=">=", pivote:0
atom->label . label , c="<=", pivote:0
atom->label . call , c="<=", pivote:0
atom->label , c="<=", pivote:0
atom->label param => block , c="<=", pivote:0
atom->label . label , c="&", pivote:0
atom->label . call , c="&", pivote:0
atom->label , c="&", pivote:0
atom->label param => block , c="&", pivote:0
atom->label . label , c="|", pivote:0
atom->label . call , c="|", pivote:0
atom->label , c="|", pivote:0
atom->label param => block , c="|", pivote:0
atom->label . label , c="@", pivote:0
atom->label . call , c="@", pivote:0
atom->label , c="@", pivote:0
atom->label param => block , c="@", pivote:0
atom->label . label , c="@@", pivote:0
atom->label . call , c="@@", pivote:0
atom->label , c="@@", pivote:0
atom->label param => block , c="@@", pivote:0
atom->label . label , c="+", pivote:0
atom->label . call , c="+", pivote:0
atom->label , c="+", pivote:0
atom->label param => block , c="+", pivote:0
atom->label . label , c="-", pivote:0
atom->label . call , c="-", pivote:0
atom->label , c="-", pivote:0
atom->label param => block , c="-", pivote:0
atom->label . label , c="*", pivote:0
atom->label . call , c="*", pivote:0
atom->label , c="*", pivote:0
atom->label param => block , c="*", pivote:0
atom->label . label , c="/", pivote:0
atom->label . call , c="/", pivote:0
atom->label , c="/", pivote:0
atom->label param => block , c="/", pivote:0
atom->label . label , c="**", pivote:0
atom->label . call , c="**", pivote:0
atom->label , c="**", pivote:0
atom->label param => block , c="**", pivote:0
atom->label . label , c="^", pivote:0
atom->label . call , c="^", pivote:0
atom->label , c="^", pivote:0
atom->label param => block , c="^", pivote:0
atom->label . label , c="%", pivote:0
atom->label . call , c="%", pivote:0
atom->label , c="%", pivote:0
atom->label param => block , c="%", pivote:0
call->label param , c=".", pivote:0
param->( structure ) , c=".", pivote:-1
param->( ) , c=".", pivote:-1
call->label param , c=";", pivote:0
param->( structure ) , c=";", pivote:-1
param->( ) , c=";", pivote:-1
call->label param , c="in", pivote:0
param->( structure ) , c="in", pivote:-1
param->( ) , c="in", pivote:-1
call->label param , c="==", pivote:0
param->( structure ) , c="==", pivote:-1
param->( ) , c="==", pivote:-1
call->label param , c=">=", pivote:0
param->( structure ) , c=">=", pivote:-1
param->( ) , c=">=", pivote:-1
call->label param , c="<=", pivote:0
param->( structure ) , c="<=", pivote:-1
param->( ) , c="<=", pivote:-1
call->label param , c="&", pivote:0
param->( structure ) , c="&", pivote:-1
param->( ) , c="&", pivote:-1
call->label param , c="|", pivote:0
param->( structure ) , c="|", pivote:-1
param->( ) , c="|", pivote:-1
call->label param , c="@", pivote:0
param->( structure ) , c="@", pivote:-1
param->( ) , c="@", pivote:-1
call->label param , c="@@", pivote:0
param->( structure ) , c="@@", pivote:-1
param->( ) , c="@@", pivote:-1
call->label param , c="+", pivote:0
param->( structure ) , c="+", pivote:-1
param->( ) , c="+", pivote:-1
call->label param , c="-", pivote:0
param->( structure ) , c="-", pivote:-1
param->( ) , c="-", pivote:-1
call->label param , c="*", pivote:0
param->( structure ) , c="*", pivote:-1
param->( ) , c="*", pivote:-1
call->label param , c="/", pivote:0
param->( structure ) , c="/", pivote:-1
param->( ) , c="/", pivote:-1
call->label param , c="**", pivote:0
param->( structure ) , c="**", pivote:-1
param->( ) , c="**", pivote:-1
call->label param , c="^", pivote:0
param->( structure ) , c="^", pivote:-1
param->( ) , c="^", pivote:-1
call->label param , c="%", pivote:0
param->( structure ) , c="%", pivote:-1
param->( ) , c="%", pivote:-1
 }
 GOTO(I0,if_high_level):
I20= { 
atom->if_high_level else_high_level , c=";", pivote:0
else_high_level->else high_level , c=";", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=";", pivote:0
elif_high_level->elif param high_level , c="else", pivote:-1
atom->if_high_level else_high_level , c="in", pivote:0
else_high_level->else high_level , c="in", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="in", pivote:0
atom->if_high_level else_high_level , c="==", pivote:0
else_high_level->else high_level , c="==", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="==", pivote:0
atom->if_high_level else_high_level , c=">=", pivote:0
else_high_level->else high_level , c=">=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=">=", pivote:0
atom->if_high_level else_high_level , c="<=", pivote:0
else_high_level->else high_level , c="<=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="<=", pivote:0
atom->if_high_level else_high_level , c="&", pivote:0
else_high_level->else high_level , c="&", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="&", pivote:0
atom->if_high_level else_high_level , c="|", pivote:0
else_high_level->else high_level , c="|", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="|", pivote:0
atom->if_high_level else_high_level , c="@", pivote:0
else_high_level->else high_level , c="@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@", pivote:0
atom->if_high_level else_high_level , c="@@", pivote:0
else_high_level->else high_level , c="@@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@@", pivote:0
atom->if_high_level else_high_level , c="+", pivote:0
else_high_level->else high_level , c="+", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="+", pivote:0
atom->if_high_level else_high_level , c="-", pivote:0
else_high_level->else high_level , c="-", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="-", pivote:0
atom->if_high_level else_high_level , c="*", pivote:0
else_high_level->else high_level , c="*", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="*", pivote:0
atom->if_high_level else_high_level , c="/", pivote:0
else_high_level->else high_level , c="/", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="/", pivote:0
atom->if_high_level else_high_level , c="**", pivote:0
else_high_level->else high_level , c="**", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="**", pivote:0
atom->if_high_level else_high_level , c="^", pivote:0
else_high_level->else high_level , c="^", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="^", pivote:0
atom->if_high_level else_high_level , c="%", pivote:0
else_high_level->else high_level , c="%", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="%", pivote:0
 }
 GOTO(I0,if_exp):
I21= { 
exp->if_exp else_exp , c="$", pivote:0
else_exp->else exp , c="$", pivote:-1
else_exp->else block , c="$", pivote:-1
exp->if_exp elif_exp else_exp , c="$", pivote:0
elif_exp->elif param exp , c="else", pivote:-1
elif_exp->elif param block , c="else", pivote:-1
 }
 GOTO(I0,concatenation):
I22= { 
bool->concatenation , c=";", pivote:0
bool->concatenation , c="in", pivote:0
bool->concatenation , c="==", pivote:0
bool->concatenation , c=">=", pivote:0
bool->concatenation , c="<=", pivote:0
bool->concatenation , c="&", pivote:0
bool->concatenation , c="|", pivote:0
concatenation->concatenation @ sum_minus , c=";", pivote:0
concatenation->concatenation @@ sum_minus , c=";", pivote:0
concatenation->concatenation @ sum_minus , c="in", pivote:0
concatenation->concatenation @@ sum_minus , c="in", pivote:0
concatenation->concatenation @ sum_minus , c="==", pivote:0
concatenation->concatenation @@ sum_minus , c="==", pivote:0
concatenation->concatenation @ sum_minus , c=">=", pivote:0
concatenation->concatenation @@ sum_minus , c=">=", pivote:0
concatenation->concatenation @ sum_minus , c="<=", pivote:0
concatenation->concatenation @@ sum_minus , c="<=", pivote:0
concatenation->concatenation @ sum_minus , c="&", pivote:0
concatenation->concatenation @@ sum_minus , c="&", pivote:0
concatenation->concatenation @ sum_minus , c="|", pivote:0
concatenation->concatenation @@ sum_minus , c="|", pivote:0
concatenation->concatenation @ sum_minus , c="@", pivote:0
concatenation->concatenation @@ sum_minus , c="@", pivote:0
concatenation->concatenation @ sum_minus , c="@@", pivote:0
concatenation->concatenation @@ sum_minus , c="@@", pivote:0
 }
 GOTO(I0,pow):
I23= { 
div_mult->pow , c=";", pivote:0
div_mult->pow , c="in", pivote:0
div_mult->pow , c="==", pivote:0
div_mult->pow , c=">=", pivote:0
div_mult->pow , c="<=", pivote:0
div_mult->pow , c="&", pivote:0
div_mult->pow , c="|", pivote:0
div_mult->pow , c="@", pivote:0
div_mult->pow , c="@@", pivote:0
div_mult->pow , c="+", pivote:0
div_mult->pow , c="-", pivote:0
div_mult->pow , c="*", pivote:0
div_mult->pow , c="/", pivote:0
pow->pow ** atom , c=";", pivote:0
pow->pow ^ atom , c=";", pivote:0
pow->pow % atom , c=";", pivote:0
pow->pow ** atom , c="in", pivote:0
pow->pow ^ atom , c="in", pivote:0
pow->pow % atom , c="in", pivote:0
pow->pow ** atom , c="==", pivote:0
pow->pow ^ atom , c="==", pivote:0
pow->pow % atom , c="==", pivote:0
pow->pow ** atom , c=">=", pivote:0
pow->pow ^ atom , c=">=", pivote:0
pow->pow % atom , c=">=", pivote:0
pow->pow ** atom , c="<=", pivote:0
pow->pow ^ atom , c="<=", pivote:0
pow->pow % atom , c="<=", pivote:0
pow->pow ** atom , c="&", pivote:0
pow->pow ^ atom , c="&", pivote:0
pow->pow % atom , c="&", pivote:0
pow->pow ** atom , c="|", pivote:0
pow->pow ^ atom , c="|", pivote:0
pow->pow % atom , c="|", pivote:0
pow->pow ** atom , c="@", pivote:0
pow->pow ^ atom , c="@", pivote:0
pow->pow % atom , c="@", pivote:0
pow->pow ** atom , c="@@", pivote:0
pow->pow ^ atom , c="@@", pivote:0
pow->pow % atom , c="@@", pivote:0
pow->pow ** atom , c="+", pivote:0
pow->pow ^ atom , c="+", pivote:0
pow->pow % atom , c="+", pivote:0
pow->pow ** atom , c="-", pivote:0
pow->pow ^ atom , c="-", pivote:0
pow->pow % atom , c="-", pivote:0
pow->pow ** atom , c="*", pivote:0
pow->pow ^ atom , c="*", pivote:0
pow->pow % atom , c="*", pivote:0
pow->pow ** atom , c="/", pivote:0
pow->pow ^ atom , c="/", pivote:0
pow->pow % atom , c="/", pivote:0
pow->pow ** atom , c="**", pivote:0
pow->pow ^ atom , c="**", pivote:0
pow->pow % atom , c="**", pivote:0
pow->pow ** atom , c="^", pivote:0
pow->pow ^ atom , c="^", pivote:0
pow->pow % atom , c="^", pivote:0
pow->pow ** atom , c="%", pivote:0
pow->pow ^ atom , c="%", pivote:0
pow->pow % atom , c="%", pivote:0
 }
 GOTO(I0,bool):
I24= { 
high_level->bool , c=";", pivote:0
high_level->bool , c="in", pivote:0
bool->bool == concatenation , c=";", pivote:0
bool->bool >= concatenation , c=";", pivote:0
bool->bool <= concatenation , c=";", pivote:0
bool->bool & concatenation , c=";", pivote:0
bool->bool | concatenation , c=";", pivote:0
bool->bool == concatenation , c="in", pivote:0
bool->bool >= concatenation , c="in", pivote:0
bool->bool <= concatenation , c="in", pivote:0
bool->bool & concatenation , c="in", pivote:0
bool->bool | concatenation , c="in", pivote:0
bool->bool == concatenation , c="==", pivote:0
bool->bool >= concatenation , c="==", pivote:0
bool->bool <= concatenation , c="==", pivote:0
bool->bool & concatenation , c="==", pivote:0
bool->bool | concatenation , c="==", pivote:0
bool->bool == concatenation , c=">=", pivote:0
bool->bool >= concatenation , c=">=", pivote:0
bool->bool <= concatenation , c=">=", pivote:0
bool->bool & concatenation , c=">=", pivote:0
bool->bool | concatenation , c=">=", pivote:0
bool->bool == concatenation , c="<=", pivote:0
bool->bool >= concatenation , c="<=", pivote:0
bool->bool <= concatenation , c="<=", pivote:0
bool->bool & concatenation , c="<=", pivote:0
bool->bool | concatenation , c="<=", pivote:0
bool->bool == concatenation , c="&", pivote:0
bool->bool >= concatenation , c="&", pivote:0
bool->bool <= concatenation , c="&", pivote:0
bool->bool & concatenation , c="&", pivote:0
bool->bool | concatenation , c="&", pivote:0
bool->bool == concatenation , c="|", pivote:0
bool->bool >= concatenation , c="|", pivote:0
bool->bool <= concatenation , c="|", pivote:0
bool->bool & concatenation , c="|", pivote:0
bool->bool | concatenation , c="|", pivote:0
 }
 GOTO(I0,call):
I25= { 
atom->call . call , c=";", pivote:0
atom->call . label , c=";", pivote:0
atom->call , c=";", pivote:0
atom->call . call , c="in", pivote:0
atom->call . label , c="in", pivote:0
atom->call , c="in", pivote:0
atom->call . call , c="==", pivote:0
atom->call . label , c="==", pivote:0
atom->call , c="==", pivote:0
atom->call . call , c=">=", pivote:0
atom->call . label , c=">=", pivote:0
atom->call , c=">=", pivote:0
atom->call . call , c="<=", pivote:0
atom->call . label , c="<=", pivote:0
atom->call , c="<=", pivote:0
atom->call . call , c="&", pivote:0
atom->call . label , c="&", pivote:0
atom->call , c="&", pivote:0
atom->call . call , c="|", pivote:0
atom->call . label , c="|", pivote:0
atom->call , c="|", pivote:0
atom->call . call , c="@", pivote:0
atom->call . label , c="@", pivote:0
atom->call , c="@", pivote:0
atom->call . call , c="@@", pivote:0
atom->call . label , c="@@", pivote:0
atom->call , c="@@", pivote:0
atom->call . call , c="+", pivote:0
atom->call . label , c="+", pivote:0
atom->call , c="+", pivote:0
atom->call . call , c="-", pivote:0
atom->call . label , c="-", pivote:0
atom->call , c="-", pivote:0
atom->call . call , c="*", pivote:0
atom->call . label , c="*", pivote:0
atom->call , c="*", pivote:0
atom->call . call , c="/", pivote:0
atom->call . label , c="/", pivote:0
atom->call , c="/", pivote:0
atom->call . call , c="**", pivote:0
atom->call . label , c="**", pivote:0
atom->call , c="**", pivote:0
atom->call . call , c="^", pivote:0
atom->call . label , c="^", pivote:0
atom->call , c="^", pivote:0
atom->call . call , c="%", pivote:0
atom->call . label , c="%", pivote:0
atom->call , c="%", pivote:0
 }
 GOTO(I1,int):
I26= { 
label->int , c="(", pivote:0
 }
 GOTO(I1,label):
I27= { 
call->label param , c=";", pivote:0
param->( structure ) , c=";", pivote:-1
param->( ) , c=";", pivote:-1
call->label param , c="in", pivote:0
param->( structure ) , c="in", pivote:-1
param->( ) , c="in", pivote:-1
 }
 GOTO(I1,call):
I28= { 
high_level->new call , c=";", pivote:1
high_level->new call , c="in", pivote:1
 }
 GOTO(I2,if):
I29= { 
if_high_level->if param high_level , c="else", pivote:0
param->( structure ) , c="int", pivote:-1
param->( structure ) , c="(", pivote:-1
param->( structure ) , c="for", pivote:-1
param->( structure ) , c="protocol", pivote:-1
param->( structure ) , c="type", pivote:-1
param->( structure ) , c="function", pivote:-1
param->( structure ) , c="while", pivote:-1
param->( structure ) , c="if", pivote:-1
param->( structure ) , c="!", pivote:-1
param->( structure ) , c="let", pivote:-1
param->( structure ) , c="new", pivote:-1
param->( ) , c="int", pivote:-1
param->( ) , c="(", pivote:-1
param->( ) , c="for", pivote:-1
param->( ) , c="protocol", pivote:-1
param->( ) , c="type", pivote:-1
param->( ) , c="function", pivote:-1
param->( ) , c="while", pivote:-1
param->( ) , c="if", pivote:-1
param->( ) , c="!", pivote:-1
param->( ) , c="let", pivote:-1
param->( ) , c="new", pivote:-1
if_high_level->if param high_level , c="elif", pivote:0
 }
 GOTO(I2,while):
I30= { 
atom->while param block , c=";", pivote:0
param->( structure ) , c="{", pivote:-1
param->( ) , c="{", pivote:-1
atom->while param high_level , c=";", pivote:0
param->( structure ) , c="int", pivote:-1
param->( structure ) , c="(", pivote:-1
param->( structure ) , c="for", pivote:-1
param->( structure ) , c="protocol", pivote:-1
param->( structure ) , c="type", pivote:-1
param->( structure ) , c="function", pivote:-1
param->( structure ) , c="while", pivote:-1
param->( structure ) , c="if", pivote:-1
param->( structure ) , c="!", pivote:-1
param->( structure ) , c="let", pivote:-1
param->( structure ) , c="new", pivote:-1
param->( ) , c="int", pivote:-1
param->( ) , c="(", pivote:-1
param->( ) , c="for", pivote:-1
param->( ) , c="protocol", pivote:-1
param->( ) , c="type", pivote:-1
param->( ) , c="function", pivote:-1
param->( ) , c="while", pivote:-1
param->( ) , c="if", pivote:-1
param->( ) , c="!", pivote:-1
param->( ) , c="let", pivote:-1
param->( ) , c="new", pivote:-1
atom->while param block , c="==", pivote:0
atom->while param high_level , c="==", pivote:0
atom->while param block , c=">=", pivote:0
atom->while param high_level , c=">=", pivote:0
atom->while param block , c="<=", pivote:0
atom->while param high_level , c="<=", pivote:0
atom->while param block , c="&", pivote:0
atom->while param high_level , c="&", pivote:0
atom->while param block , c="|", pivote:0
atom->while param high_level , c="|", pivote:0
atom->while param block , c="@", pivote:0
atom->while param high_level , c="@", pivote:0
atom->while param block , c="@@", pivote:0
atom->while param high_level , c="@@", pivote:0
atom->while param block , c="+", pivote:0
atom->while param high_level , c="+", pivote:0
atom->while param block , c="-", pivote:0
atom->while param high_level , c="-", pivote:0
atom->while param block , c="*", pivote:0
atom->while param high_level , c="*", pivote:0
atom->while param block , c="/", pivote:0
atom->while param high_level , c="/", pivote:0
atom->while param block , c="**", pivote:0
atom->while param high_level , c="**", pivote:0
atom->while param block , c="^", pivote:0
atom->while param high_level , c="^", pivote:0
atom->while param block , c="%", pivote:0
atom->while param high_level , c="%", pivote:0
atom->while param block , c="in", pivote:0
atom->while param high_level , c="in", pivote:0
 }
 GOTO(I2,function):
I31= { 
atom->function label param block , c=";", pivote:0
label->int , c="(", pivote:-1
atom->function label param block , c="==", pivote:0
atom->function label param block , c=">=", pivote:0
atom->function label param block , c="<=", pivote:0
atom->function label param block , c="&", pivote:0
atom->function label param block , c="|", pivote:0
atom->function label param block , c="@", pivote:0
atom->function label param block , c="@@", pivote:0
atom->function label param block , c="+", pivote:0
atom->function label param block , c="-", pivote:0
atom->function label param block , c="*", pivote:0
atom->function label param block , c="/", pivote:0
atom->function label param block , c="**", pivote:0
atom->function label param block , c="^", pivote:0
atom->function label param block , c="%", pivote:0
atom->function label param block , c="in", pivote:0
 }
 GOTO(I2,int):
I32= { 
label->int , c=".", pivote:0
label->int , c=";", pivote:0
label->int , c="(", pivote:0
label->int , c="==", pivote:0
label->int , c=">=", pivote:0
label->int , c="<=", pivote:0
label->int , c="&", pivote:0
label->int , c="|", pivote:0
label->int , c="@", pivote:0
label->int , c="@@", pivote:0
label->int , c="+", pivote:0
label->int , c="-", pivote:0
label->int , c="*", pivote:0
label->int , c="/", pivote:0
label->int , c="**", pivote:0
label->int , c="^", pivote:0
label->int , c="%", pivote:0
label->int , c="in", pivote:0
 }
 GOTO(I2,():
I33= { 
atom->( high_level ) , c=";", pivote:0
high_level->bool , c=")", pivote:-1
high_level->label = high_level , c=")", pivote:-1
high_level->var_declaration = high_level , c=")", pivote:-1
high_level->label := high_level , c=")", pivote:-1
high_level->param in high_level , c=")", pivote:-1
high_level->high_level in high_level , c=")", pivote:-1
high_level->high_level in block , c=")", pivote:-1
high_level->function label param high_level , c=")", pivote:-1
high_level->label param => high_level , c=")", pivote:-1
high_level->new call , c=")", pivote:-1
high_level->label ++ , c=")", pivote:-1
high_level->label -- , c=")", pivote:-1
bool->bool == concatenation , c=")", pivote:-1
bool->bool >= concatenation , c=")", pivote:-1
bool->bool <= concatenation , c=")", pivote:-1
bool->bool & concatenation , c=")", pivote:-1
bool->bool | concatenation , c=")", pivote:-1
bool->concatenation , c=")", pivote:-1
bool->! bool , c=")", pivote:-1
label->int , c="=", pivote:-1
var_declaration->let label , c="=", pivote:-1
label->int , c=":=", pivote:-1
param->( structure ) , c="in", pivote:-1
param->( ) , c="in", pivote:-1
high_level->bool , c="in", pivote:-1
high_level->label = high_level , c="in", pivote:-1
high_level->var_declaration = high_level , c="in", pivote:-1
high_level->label := high_level , c="in", pivote:-1
high_level->param in high_level , c="in", pivote:-1
high_level->high_level in high_level , c="in", pivote:-1
high_level->high_level in block , c="in", pivote:-1
high_level->function label param high_level , c="in", pivote:-1
high_level->label param => high_level , c="in", pivote:-1
high_level->new call , c="in", pivote:-1
high_level->label ++ , c="in", pivote:-1
high_level->label -- , c="in", pivote:-1
label->int , c="(", pivote:-1
label->int , c="++", pivote:-1
label->int , c="--", pivote:-1
bool->bool == concatenation , c="==", pivote:-1
bool->bool >= concatenation , c="==", pivote:-1
bool->bool <= concatenation , c="==", pivote:-1
bool->bool & concatenation , c="==", pivote:-1
bool->bool | concatenation , c="==", pivote:-1
bool->concatenation , c="==", pivote:-1
bool->! bool , c="==", pivote:-1
bool->bool == concatenation , c=">=", pivote:-1
bool->bool >= concatenation , c=">=", pivote:-1
bool->bool <= concatenation , c=">=", pivote:-1
bool->bool & concatenation , c=">=", pivote:-1
bool->bool | concatenation , c=">=", pivote:-1
bool->concatenation , c=">=", pivote:-1
bool->! bool , c=">=", pivote:-1
bool->bool == concatenation , c="<=", pivote:-1
bool->bool >= concatenation , c="<=", pivote:-1
bool->bool <= concatenation , c="<=", pivote:-1
bool->bool & concatenation , c="<=", pivote:-1
bool->bool | concatenation , c="<=", pivote:-1
bool->concatenation , c="<=", pivote:-1
bool->! bool , c="<=", pivote:-1
bool->bool == concatenation , c="&", pivote:-1
bool->bool >= concatenation , c="&", pivote:-1
bool->bool <= concatenation , c="&", pivote:-1
bool->bool & concatenation , c="&", pivote:-1
bool->bool | concatenation , c="&", pivote:-1
bool->concatenation , c="&", pivote:-1
bool->! bool , c="&", pivote:-1
bool->bool == concatenation , c="|", pivote:-1
bool->bool >= concatenation , c="|", pivote:-1
bool->bool <= concatenation , c="|", pivote:-1
bool->bool & concatenation , c="|", pivote:-1
bool->bool | concatenation , c="|", pivote:-1
bool->concatenation , c="|", pivote:-1
bool->! bool , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c=")", pivote:-1
concatenation->concatenation @@ sum_minus , c=")", pivote:-1
concatenation->sum_minus , c=")", pivote:-1
bool->bool == concatenation , c="in", pivote:-1
bool->bool >= concatenation , c="in", pivote:-1
bool->bool <= concatenation , c="in", pivote:-1
bool->bool & concatenation , c="in", pivote:-1
bool->bool | concatenation , c="in", pivote:-1
bool->concatenation , c="in", pivote:-1
bool->! bool , c="in", pivote:-1
concatenation->concatenation @ sum_minus , c="==", pivote:-1
concatenation->concatenation @@ sum_minus , c="==", pivote:-1
concatenation->sum_minus , c="==", pivote:-1
concatenation->concatenation @ sum_minus , c=">=", pivote:-1
concatenation->concatenation @@ sum_minus , c=">=", pivote:-1
concatenation->sum_minus , c=">=", pivote:-1
concatenation->concatenation @ sum_minus , c="<=", pivote:-1
concatenation->concatenation @@ sum_minus , c="<=", pivote:-1
concatenation->sum_minus , c="<=", pivote:-1
concatenation->concatenation @ sum_minus , c="&", pivote:-1
concatenation->concatenation @@ sum_minus , c="&", pivote:-1
concatenation->sum_minus , c="&", pivote:-1
concatenation->concatenation @ sum_minus , c="|", pivote:-1
concatenation->concatenation @@ sum_minus , c="|", pivote:-1
concatenation->sum_minus , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c="@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@", pivote:-1
concatenation->sum_minus , c="@", pivote:-1
concatenation->concatenation @ sum_minus , c="@@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@@", pivote:-1
concatenation->sum_minus , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c=")", pivote:-1
sum_minus->sum_minus - div_mult , c=")", pivote:-1
sum_minus->div_mult , c=")", pivote:-1
concatenation->concatenation @ sum_minus , c="in", pivote:-1
concatenation->concatenation @@ sum_minus , c="in", pivote:-1
concatenation->sum_minus , c="in", pivote:-1
sum_minus->sum_minus + div_mult , c="==", pivote:-1
sum_minus->sum_minus - div_mult , c="==", pivote:-1
sum_minus->div_mult , c="==", pivote:-1
sum_minus->sum_minus + div_mult , c=">=", pivote:-1
sum_minus->sum_minus - div_mult , c=">=", pivote:-1
sum_minus->div_mult , c=">=", pivote:-1
sum_minus->sum_minus + div_mult , c="<=", pivote:-1
sum_minus->sum_minus - div_mult , c="<=", pivote:-1
sum_minus->div_mult , c="<=", pivote:-1
sum_minus->sum_minus + div_mult , c="&", pivote:-1
sum_minus->sum_minus - div_mult , c="&", pivote:-1
sum_minus->div_mult , c="&", pivote:-1
sum_minus->sum_minus + div_mult , c="|", pivote:-1
sum_minus->sum_minus - div_mult , c="|", pivote:-1
sum_minus->div_mult , c="|", pivote:-1
sum_minus->sum_minus + div_mult , c="@", pivote:-1
sum_minus->sum_minus - div_mult , c="@", pivote:-1
sum_minus->div_mult , c="@", pivote:-1
sum_minus->sum_minus + div_mult , c="@@", pivote:-1
sum_minus->sum_minus - div_mult , c="@@", pivote:-1
sum_minus->div_mult , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c="+", pivote:-1
sum_minus->sum_minus - div_mult , c="+", pivote:-1
sum_minus->div_mult , c="+", pivote:-1
sum_minus->sum_minus + div_mult , c="-", pivote:-1
sum_minus->sum_minus - div_mult , c="-", pivote:-1
sum_minus->div_mult , c="-", pivote:-1
div_mult->div_mult * pow , c=")", pivote:-1
div_mult->div_mult / pow , c=")", pivote:-1
div_mult->pow , c=")", pivote:-1
sum_minus->sum_minus + div_mult , c="in", pivote:-1
sum_minus->sum_minus - div_mult , c="in", pivote:-1
sum_minus->div_mult , c="in", pivote:-1
div_mult->div_mult * pow , c="==", pivote:-1
div_mult->div_mult / pow , c="==", pivote:-1
div_mult->pow , c="==", pivote:-1
div_mult->div_mult * pow , c=">=", pivote:-1
div_mult->div_mult / pow , c=">=", pivote:-1
div_mult->pow , c=">=", pivote:-1
div_mult->div_mult * pow , c="<=", pivote:-1
div_mult->div_mult / pow , c="<=", pivote:-1
div_mult->pow , c="<=", pivote:-1
div_mult->div_mult * pow , c="&", pivote:-1
div_mult->div_mult / pow , c="&", pivote:-1
div_mult->pow , c="&", pivote:-1
div_mult->div_mult * pow , c="|", pivote:-1
div_mult->div_mult / pow , c="|", pivote:-1
div_mult->pow , c="|", pivote:-1
div_mult->div_mult * pow , c="@", pivote:-1
div_mult->div_mult / pow , c="@", pivote:-1
div_mult->pow , c="@", pivote:-1
div_mult->div_mult * pow , c="@@", pivote:-1
div_mult->div_mult / pow , c="@@", pivote:-1
div_mult->pow , c="@@", pivote:-1
div_mult->div_mult * pow , c="+", pivote:-1
div_mult->div_mult / pow , c="+", pivote:-1
div_mult->pow , c="+", pivote:-1
div_mult->div_mult * pow , c="-", pivote:-1
div_mult->div_mult / pow , c="-", pivote:-1
div_mult->pow , c="-", pivote:-1
div_mult->div_mult * pow , c="*", pivote:-1
div_mult->div_mult / pow , c="*", pivote:-1
div_mult->pow , c="*", pivote:-1
div_mult->div_mult * pow , c="/", pivote:-1
div_mult->div_mult / pow , c="/", pivote:-1
div_mult->pow , c="/", pivote:-1
pow->pow ** atom , c=")", pivote:-1
pow->pow ^ atom , c=")", pivote:-1
pow->pow % atom , c=")", pivote:-1
pow->atom , c=")", pivote:-1
div_mult->div_mult * pow , c="in", pivote:-1
div_mult->div_mult / pow , c="in", pivote:-1
div_mult->pow , c="in", pivote:-1
pow->pow ** atom , c="==", pivote:-1
pow->pow ^ atom , c="==", pivote:-1
pow->pow % atom , c="==", pivote:-1
pow->atom , c="==", pivote:-1
pow->pow ** atom , c=">=", pivote:-1
pow->pow ^ atom , c=">=", pivote:-1
pow->pow % atom , c=">=", pivote:-1
pow->atom , c=">=", pivote:-1
pow->pow ** atom , c="<=", pivote:-1
pow->pow ^ atom , c="<=", pivote:-1
pow->pow % atom , c="<=", pivote:-1
pow->atom , c="<=", pivote:-1
pow->pow ** atom , c="&", pivote:-1
pow->pow ^ atom , c="&", pivote:-1
pow->pow % atom , c="&", pivote:-1
pow->atom , c="&", pivote:-1
pow->pow ** atom , c="|", pivote:-1
pow->pow ^ atom , c="|", pivote:-1
pow->pow % atom , c="|", pivote:-1
pow->atom , c="|", pivote:-1
pow->pow ** atom , c="@", pivote:-1
pow->pow ^ atom , c="@", pivote:-1
pow->pow % atom , c="@", pivote:-1
pow->atom , c="@", pivote:-1
pow->pow ** atom , c="@@", pivote:-1
pow->pow ^ atom , c="@@", pivote:-1
pow->pow % atom , c="@@", pivote:-1
pow->atom , c="@@", pivote:-1
pow->pow ** atom , c="+", pivote:-1
pow->pow ^ atom , c="+", pivote:-1
pow->pow % atom , c="+", pivote:-1
pow->atom , c="+", pivote:-1
pow->pow ** atom , c="-", pivote:-1
pow->pow ^ atom , c="-", pivote:-1
pow->pow % atom , c="-", pivote:-1
pow->atom , c="-", pivote:-1
pow->pow ** atom , c="*", pivote:-1
pow->pow ^ atom , c="*", pivote:-1
pow->pow % atom , c="*", pivote:-1
pow->atom , c="*", pivote:-1
pow->pow ** atom , c="/", pivote:-1
pow->pow ^ atom , c="/", pivote:-1
pow->pow % atom , c="/", pivote:-1
pow->atom , c="/", pivote:-1
pow->pow ** atom , c="**", pivote:-1
pow->pow ^ atom , c="**", pivote:-1
pow->pow % atom , c="**", pivote:-1
pow->atom , c="**", pivote:-1
pow->pow ** atom , c="^", pivote:-1
pow->pow ^ atom , c="^", pivote:-1
pow->pow % atom , c="^", pivote:-1
pow->atom , c="^", pivote:-1
pow->pow ** atom , c="%", pivote:-1
pow->pow ^ atom , c="%", pivote:-1
pow->pow % atom , c="%", pivote:-1
pow->atom , c="%", pivote:-1
atom->label . label , c=")", pivote:-1
atom->label . call , c=")", pivote:-1
atom->call . call , c=")", pivote:-1
atom->call . label , c=")", pivote:-1
atom->label , c=")", pivote:-1
atom->( high_level ) , c=")", pivote:-1
atom->for param block , c=")", pivote:-1
atom->for param exp , c=")", pivote:-1
atom->for param high_level , c=")", pivote:-1
atom->protocol label block , c=")", pivote:-1
atom->protocol label extends label block , c=")", pivote:-1
atom->type label block , c=")", pivote:-1
atom->type label param block , c=")", pivote:-1
atom->type label inherits label block , c=")", pivote:-1
atom->type label param inherits label param block , c=")", pivote:-1
atom->function label param block , c=")", pivote:-1
atom->label param => block , c=")", pivote:-1
atom->while param block , c=")", pivote:-1
atom->while param high_level , c=")", pivote:-1
atom->if_high_level else_high_level , c=")", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=")", pivote:-1
atom->call , c=")", pivote:-1
pow->pow ** atom , c="in", pivote:-1
pow->pow ^ atom , c="in", pivote:-1
pow->pow % atom , c="in", pivote:-1
pow->atom , c="in", pivote:-1
atom->label . label , c="==", pivote:-1
atom->label . call , c="==", pivote:-1
atom->call . call , c="==", pivote:-1
atom->call . label , c="==", pivote:-1
atom->label , c="==", pivote:-1
atom->( high_level ) , c="==", pivote:-1
atom->for param block , c="==", pivote:-1
atom->for param exp , c="==", pivote:-1
atom->for param high_level , c="==", pivote:-1
atom->protocol label block , c="==", pivote:-1
atom->protocol label extends label block , c="==", pivote:-1
atom->type label block , c="==", pivote:-1
atom->type label param block , c="==", pivote:-1
atom->type label inherits label block , c="==", pivote:-1
atom->type label param inherits label param block , c="==", pivote:-1
atom->function label param block , c="==", pivote:-1
atom->label param => block , c="==", pivote:-1
atom->while param block , c="==", pivote:-1
atom->while param high_level , c="==", pivote:-1
atom->if_high_level else_high_level , c="==", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="==", pivote:-1
atom->call , c="==", pivote:-1
atom->label . label , c=">=", pivote:-1
atom->label . call , c=">=", pivote:-1
atom->call . call , c=">=", pivote:-1
atom->call . label , c=">=", pivote:-1
atom->label , c=">=", pivote:-1
atom->( high_level ) , c=">=", pivote:-1
atom->for param block , c=">=", pivote:-1
atom->for param exp , c=">=", pivote:-1
atom->for param high_level , c=">=", pivote:-1
atom->protocol label block , c=">=", pivote:-1
atom->protocol label extends label block , c=">=", pivote:-1
atom->type label block , c=">=", pivote:-1
atom->type label param block , c=">=", pivote:-1
atom->type label inherits label block , c=">=", pivote:-1
atom->type label param inherits label param block , c=">=", pivote:-1
atom->function label param block , c=">=", pivote:-1
atom->label param => block , c=">=", pivote:-1
atom->while param block , c=">=", pivote:-1
atom->while param high_level , c=">=", pivote:-1
atom->if_high_level else_high_level , c=">=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=">=", pivote:-1
atom->call , c=">=", pivote:-1
atom->label . label , c="<=", pivote:-1
atom->label . call , c="<=", pivote:-1
atom->call . call , c="<=", pivote:-1
atom->call . label , c="<=", pivote:-1
atom->label , c="<=", pivote:-1
atom->( high_level ) , c="<=", pivote:-1
atom->for param block , c="<=", pivote:-1
atom->for param exp , c="<=", pivote:-1
atom->for param high_level , c="<=", pivote:-1
atom->protocol label block , c="<=", pivote:-1
atom->protocol label extends label block , c="<=", pivote:-1
atom->type label block , c="<=", pivote:-1
atom->type label param block , c="<=", pivote:-1
atom->type label inherits label block , c="<=", pivote:-1
atom->type label param inherits label param block , c="<=", pivote:-1
atom->function label param block , c="<=", pivote:-1
atom->label param => block , c="<=", pivote:-1
atom->while param block , c="<=", pivote:-1
atom->while param high_level , c="<=", pivote:-1
atom->if_high_level else_high_level , c="<=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="<=", pivote:-1
atom->call , c="<=", pivote:-1
atom->label . label , c="&", pivote:-1
atom->label . call , c="&", pivote:-1
atom->call . call , c="&", pivote:-1
atom->call . label , c="&", pivote:-1
atom->label , c="&", pivote:-1
atom->( high_level ) , c="&", pivote:-1
atom->for param block , c="&", pivote:-1
atom->for param exp , c="&", pivote:-1
atom->for param high_level , c="&", pivote:-1
atom->protocol label block , c="&", pivote:-1
atom->protocol label extends label block , c="&", pivote:-1
atom->type label block , c="&", pivote:-1
atom->type label param block , c="&", pivote:-1
atom->type label inherits label block , c="&", pivote:-1
atom->type label param inherits label param block , c="&", pivote:-1
atom->function label param block , c="&", pivote:-1
atom->label param => block , c="&", pivote:-1
atom->while param block , c="&", pivote:-1
atom->while param high_level , c="&", pivote:-1
atom->if_high_level else_high_level , c="&", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="&", pivote:-1
atom->call , c="&", pivote:-1
atom->label . label , c="|", pivote:-1
atom->label . call , c="|", pivote:-1
atom->call . call , c="|", pivote:-1
atom->call . label , c="|", pivote:-1
atom->label , c="|", pivote:-1
atom->( high_level ) , c="|", pivote:-1
atom->for param block , c="|", pivote:-1
atom->for param exp , c="|", pivote:-1
atom->for param high_level , c="|", pivote:-1
atom->protocol label block , c="|", pivote:-1
atom->protocol label extends label block , c="|", pivote:-1
atom->type label block , c="|", pivote:-1
atom->type label param block , c="|", pivote:-1
atom->type label inherits label block , c="|", pivote:-1
atom->type label param inherits label param block , c="|", pivote:-1
atom->function label param block , c="|", pivote:-1
atom->label param => block , c="|", pivote:-1
atom->while param block , c="|", pivote:-1
atom->while param high_level , c="|", pivote:-1
atom->if_high_level else_high_level , c="|", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="|", pivote:-1
atom->call , c="|", pivote:-1
atom->label . label , c="@", pivote:-1
atom->label . call , c="@", pivote:-1
atom->call . call , c="@", pivote:-1
atom->call . label , c="@", pivote:-1
atom->label , c="@", pivote:-1
atom->( high_level ) , c="@", pivote:-1
atom->for param block , c="@", pivote:-1
atom->for param exp , c="@", pivote:-1
atom->for param high_level , c="@", pivote:-1
atom->protocol label block , c="@", pivote:-1
atom->protocol label extends label block , c="@", pivote:-1
atom->type label block , c="@", pivote:-1
atom->type label param block , c="@", pivote:-1
atom->type label inherits label block , c="@", pivote:-1
atom->type label param inherits label param block , c="@", pivote:-1
atom->function label param block , c="@", pivote:-1
atom->label param => block , c="@", pivote:-1
atom->while param block , c="@", pivote:-1
atom->while param high_level , c="@", pivote:-1
atom->if_high_level else_high_level , c="@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@", pivote:-1
atom->call , c="@", pivote:-1
atom->label . label , c="@@", pivote:-1
atom->label . call , c="@@", pivote:-1
atom->call . call , c="@@", pivote:-1
atom->call . label , c="@@", pivote:-1
atom->label , c="@@", pivote:-1
atom->( high_level ) , c="@@", pivote:-1
atom->for param block , c="@@", pivote:-1
atom->for param exp , c="@@", pivote:-1
atom->for param high_level , c="@@", pivote:-1
atom->protocol label block , c="@@", pivote:-1
atom->protocol label extends label block , c="@@", pivote:-1
atom->type label block , c="@@", pivote:-1
atom->type label param block , c="@@", pivote:-1
atom->type label inherits label block , c="@@", pivote:-1
atom->type label param inherits label param block , c="@@", pivote:-1
atom->function label param block , c="@@", pivote:-1
atom->label param => block , c="@@", pivote:-1
atom->while param block , c="@@", pivote:-1
atom->while param high_level , c="@@", pivote:-1
atom->if_high_level else_high_level , c="@@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@@", pivote:-1
atom->call , c="@@", pivote:-1
atom->label . label , c="+", pivote:-1
atom->label . call , c="+", pivote:-1
atom->call . call , c="+", pivote:-1
atom->call . label , c="+", pivote:-1
atom->label , c="+", pivote:-1
atom->( high_level ) , c="+", pivote:-1
atom->for param block , c="+", pivote:-1
atom->for param exp , c="+", pivote:-1
atom->for param high_level , c="+", pivote:-1
atom->protocol label block , c="+", pivote:-1
atom->protocol label extends label block , c="+", pivote:-1
atom->type label block , c="+", pivote:-1
atom->type label param block , c="+", pivote:-1
atom->type label inherits label block , c="+", pivote:-1
atom->type label param inherits label param block , c="+", pivote:-1
atom->function label param block , c="+", pivote:-1
atom->label param => block , c="+", pivote:-1
atom->while param block , c="+", pivote:-1
atom->while param high_level , c="+", pivote:-1
atom->if_high_level else_high_level , c="+", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="+", pivote:-1
atom->call , c="+", pivote:-1
atom->label . label , c="-", pivote:-1
atom->label . call , c="-", pivote:-1
atom->call . call , c="-", pivote:-1
atom->call . label , c="-", pivote:-1
atom->label , c="-", pivote:-1
atom->( high_level ) , c="-", pivote:-1
atom->for param block , c="-", pivote:-1
atom->for param exp , c="-", pivote:-1
atom->for param high_level , c="-", pivote:-1
atom->protocol label block , c="-", pivote:-1
atom->protocol label extends label block , c="-", pivote:-1
atom->type label block , c="-", pivote:-1
atom->type label param block , c="-", pivote:-1
atom->type label inherits label block , c="-", pivote:-1
atom->type label param inherits label param block , c="-", pivote:-1
atom->function label param block , c="-", pivote:-1
atom->label param => block , c="-", pivote:-1
atom->while param block , c="-", pivote:-1
atom->while param high_level , c="-", pivote:-1
atom->if_high_level else_high_level , c="-", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="-", pivote:-1
atom->call , c="-", pivote:-1
atom->label . label , c="*", pivote:-1
atom->label . call , c="*", pivote:-1
atom->call . call , c="*", pivote:-1
atom->call . label , c="*", pivote:-1
atom->label , c="*", pivote:-1
atom->( high_level ) , c="*", pivote:-1
atom->for param block , c="*", pivote:-1
atom->for param exp , c="*", pivote:-1
atom->for param high_level , c="*", pivote:-1
atom->protocol label block , c="*", pivote:-1
atom->protocol label extends label block , c="*", pivote:-1
atom->type label block , c="*", pivote:-1
atom->type label param block , c="*", pivote:-1
atom->type label inherits label block , c="*", pivote:-1
atom->type label param inherits label param block , c="*", pivote:-1
atom->function label param block , c="*", pivote:-1
atom->label param => block , c="*", pivote:-1
atom->while param block , c="*", pivote:-1
atom->while param high_level , c="*", pivote:-1
atom->if_high_level else_high_level , c="*", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="*", pivote:-1
atom->call , c="*", pivote:-1
atom->label . label , c="/", pivote:-1
atom->label . call , c="/", pivote:-1
atom->call . call , c="/", pivote:-1
atom->call . label , c="/", pivote:-1
atom->label , c="/", pivote:-1
atom->( high_level ) , c="/", pivote:-1
atom->for param block , c="/", pivote:-1
atom->for param exp , c="/", pivote:-1
atom->for param high_level , c="/", pivote:-1
atom->protocol label block , c="/", pivote:-1
atom->protocol label extends label block , c="/", pivote:-1
atom->type label block , c="/", pivote:-1
atom->type label param block , c="/", pivote:-1
atom->type label inherits label block , c="/", pivote:-1
atom->type label param inherits label param block , c="/", pivote:-1
atom->function label param block , c="/", pivote:-1
atom->label param => block , c="/", pivote:-1
atom->while param block , c="/", pivote:-1
atom->while param high_level , c="/", pivote:-1
atom->if_high_level else_high_level , c="/", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="/", pivote:-1
atom->call , c="/", pivote:-1
atom->label . label , c="**", pivote:-1
atom->label . call , c="**", pivote:-1
atom->call . call , c="**", pivote:-1
atom->call . label , c="**", pivote:-1
atom->label , c="**", pivote:-1
atom->( high_level ) , c="**", pivote:-1
atom->for param block , c="**", pivote:-1
atom->for param exp , c="**", pivote:-1
atom->for param high_level , c="**", pivote:-1
atom->protocol label block , c="**", pivote:-1
atom->protocol label extends label block , c="**", pivote:-1
atom->type label block , c="**", pivote:-1
atom->type label param block , c="**", pivote:-1
atom->type label inherits label block , c="**", pivote:-1
atom->type label param inherits label param block , c="**", pivote:-1
atom->function label param block , c="**", pivote:-1
atom->label param => block , c="**", pivote:-1
atom->while param block , c="**", pivote:-1
atom->while param high_level , c="**", pivote:-1
atom->if_high_level else_high_level , c="**", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="**", pivote:-1
atom->call , c="**", pivote:-1
atom->label . label , c="^", pivote:-1
atom->label . call , c="^", pivote:-1
atom->call . call , c="^", pivote:-1
atom->call . label , c="^", pivote:-1
atom->label , c="^", pivote:-1
atom->( high_level ) , c="^", pivote:-1
atom->for param block , c="^", pivote:-1
atom->for param exp , c="^", pivote:-1
atom->for param high_level , c="^", pivote:-1
atom->protocol label block , c="^", pivote:-1
atom->protocol label extends label block , c="^", pivote:-1
atom->type label block , c="^", pivote:-1
atom->type label param block , c="^", pivote:-1
atom->type label inherits label block , c="^", pivote:-1
atom->type label param inherits label param block , c="^", pivote:-1
atom->function label param block , c="^", pivote:-1
atom->label param => block , c="^", pivote:-1
atom->while param block , c="^", pivote:-1
atom->while param high_level , c="^", pivote:-1
atom->if_high_level else_high_level , c="^", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="^", pivote:-1
atom->call , c="^", pivote:-1
atom->label . label , c="%", pivote:-1
atom->label . call , c="%", pivote:-1
atom->call . call , c="%", pivote:-1
atom->call . label , c="%", pivote:-1
atom->label , c="%", pivote:-1
atom->( high_level ) , c="%", pivote:-1
atom->for param block , c="%", pivote:-1
atom->for param exp , c="%", pivote:-1
atom->for param high_level , c="%", pivote:-1
atom->protocol label block , c="%", pivote:-1
atom->protocol label extends label block , c="%", pivote:-1
atom->type label block , c="%", pivote:-1
atom->type label param block , c="%", pivote:-1
atom->type label inherits label block , c="%", pivote:-1
atom->type label param inherits label param block , c="%", pivote:-1
atom->function label param block , c="%", pivote:-1
atom->label param => block , c="%", pivote:-1
atom->while param block , c="%", pivote:-1
atom->while param high_level , c="%", pivote:-1
atom->if_high_level else_high_level , c="%", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="%", pivote:-1
atom->call , c="%", pivote:-1
label->int , c=".", pivote:-1
call->label param , c=".", pivote:-1
label->int , c=")", pivote:-1
if_high_level->if param high_level , c="else", pivote:-1
if_high_level->if param high_level , c="elif", pivote:-1
call->label param , c=")", pivote:-1
atom->label . label , c="in", pivote:-1
atom->label . call , c="in", pivote:-1
atom->call . call , c="in", pivote:-1
atom->call . label , c="in", pivote:-1
atom->label , c="in", pivote:-1
atom->( high_level ) , c="in", pivote:-1
atom->for param block , c="in", pivote:-1
atom->for param exp , c="in", pivote:-1
atom->for param high_level , c="in", pivote:-1
atom->protocol label block , c="in", pivote:-1
atom->protocol label extends label block , c="in", pivote:-1
atom->type label block , c="in", pivote:-1
atom->type label param block , c="in", pivote:-1
atom->type label inherits label block , c="in", pivote:-1
atom->type label param inherits label param block , c="in", pivote:-1
atom->function label param block , c="in", pivote:-1
atom->label param => block , c="in", pivote:-1
atom->while param block , c="in", pivote:-1
atom->while param high_level , c="in", pivote:-1
atom->if_high_level else_high_level , c="in", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="in", pivote:-1
atom->call , c="in", pivote:-1
label->int , c="==", pivote:-1
call->label param , c="==", pivote:-1
label->int , c=">=", pivote:-1
call->label param , c=">=", pivote:-1
label->int , c="<=", pivote:-1
call->label param , c="<=", pivote:-1
label->int , c="&", pivote:-1
call->label param , c="&", pivote:-1
label->int , c="|", pivote:-1
call->label param , c="|", pivote:-1
label->int , c="@", pivote:-1
call->label param , c="@", pivote:-1
label->int , c="@@", pivote:-1
call->label param , c="@@", pivote:-1
label->int , c="+", pivote:-1
call->label param , c="+", pivote:-1
label->int , c="-", pivote:-1
call->label param , c="-", pivote:-1
label->int , c="*", pivote:-1
call->label param , c="*", pivote:-1
label->int , c="/", pivote:-1
call->label param , c="/", pivote:-1
label->int , c="**", pivote:-1
call->label param , c="**", pivote:-1
label->int , c="^", pivote:-1
call->label param , c="^", pivote:-1
label->int , c="%", pivote:-1
call->label param , c="%", pivote:-1
label->int , c="in", pivote:-1
call->label param , c="in", pivote:-1
atom->( high_level ) , c="==", pivote:0
atom->( high_level ) , c=">=", pivote:0
atom->( high_level ) , c="<=", pivote:0
atom->( high_level ) , c="&", pivote:0
atom->( high_level ) , c="|", pivote:0
atom->( high_level ) , c="@", pivote:0
atom->( high_level ) , c="@@", pivote:0
atom->( high_level ) , c="+", pivote:0
atom->( high_level ) , c="-", pivote:0
atom->( high_level ) , c="*", pivote:0
atom->( high_level ) , c="/", pivote:0
atom->( high_level ) , c="**", pivote:0
atom->( high_level ) , c="^", pivote:0
atom->( high_level ) , c="%", pivote:0
atom->( high_level ) , c="in", pivote:0
 }
 GOTO(I2,label):
I34= { 
atom->label . label , c=";", pivote:0
atom->label . call , c=";", pivote:0
atom->label , c=";", pivote:0
atom->label param => block , c=";", pivote:0
param->( structure ) , c="=>", pivote:-1
param->( ) , c="=>", pivote:-1
atom->label . label , c="==", pivote:0
atom->label . call , c="==", pivote:0
atom->label , c="==", pivote:0
atom->label param => block , c="==", pivote:0
atom->label . label , c=">=", pivote:0
atom->label . call , c=">=", pivote:0
atom->label , c=">=", pivote:0
atom->label param => block , c=">=", pivote:0
atom->label . label , c="<=", pivote:0
atom->label . call , c="<=", pivote:0
atom->label , c="<=", pivote:0
atom->label param => block , c="<=", pivote:0
atom->label . label , c="&", pivote:0
atom->label . call , c="&", pivote:0
atom->label , c="&", pivote:0
atom->label param => block , c="&", pivote:0
atom->label . label , c="|", pivote:0
atom->label . call , c="|", pivote:0
atom->label , c="|", pivote:0
atom->label param => block , c="|", pivote:0
atom->label . label , c="@", pivote:0
atom->label . call , c="@", pivote:0
atom->label , c="@", pivote:0
atom->label param => block , c="@", pivote:0
atom->label . label , c="@@", pivote:0
atom->label . call , c="@@", pivote:0
atom->label , c="@@", pivote:0
atom->label param => block , c="@@", pivote:0
atom->label . label , c="+", pivote:0
atom->label . call , c="+", pivote:0
atom->label , c="+", pivote:0
atom->label param => block , c="+", pivote:0
atom->label . label , c="-", pivote:0
atom->label . call , c="-", pivote:0
atom->label , c="-", pivote:0
atom->label param => block , c="-", pivote:0
atom->label . label , c="*", pivote:0
atom->label . call , c="*", pivote:0
atom->label , c="*", pivote:0
atom->label param => block , c="*", pivote:0
atom->label . label , c="/", pivote:0
atom->label . call , c="/", pivote:0
atom->label , c="/", pivote:0
atom->label param => block , c="/", pivote:0
atom->label . label , c="**", pivote:0
atom->label . call , c="**", pivote:0
atom->label , c="**", pivote:0
atom->label param => block , c="**", pivote:0
atom->label . label , c="^", pivote:0
atom->label . call , c="^", pivote:0
atom->label , c="^", pivote:0
atom->label param => block , c="^", pivote:0
atom->label . label , c="%", pivote:0
atom->label . call , c="%", pivote:0
atom->label , c="%", pivote:0
atom->label param => block , c="%", pivote:0
call->label param , c=".", pivote:0
param->( structure ) , c=".", pivote:-1
param->( ) , c=".", pivote:-1
call->label param , c=";", pivote:0
param->( structure ) , c=";", pivote:-1
param->( ) , c=";", pivote:-1
call->label param , c="==", pivote:0
param->( structure ) , c="==", pivote:-1
param->( ) , c="==", pivote:-1
call->label param , c=">=", pivote:0
param->( structure ) , c=">=", pivote:-1
param->( ) , c=">=", pivote:-1
call->label param , c="<=", pivote:0
param->( structure ) , c="<=", pivote:-1
param->( ) , c="<=", pivote:-1
call->label param , c="&", pivote:0
param->( structure ) , c="&", pivote:-1
param->( ) , c="&", pivote:-1
call->label param , c="|", pivote:0
param->( structure ) , c="|", pivote:-1
param->( ) , c="|", pivote:-1
call->label param , c="@", pivote:0
param->( structure ) , c="@", pivote:-1
param->( ) , c="@", pivote:-1
call->label param , c="@@", pivote:0
param->( structure ) , c="@@", pivote:-1
param->( ) , c="@@", pivote:-1
call->label param , c="+", pivote:0
param->( structure ) , c="+", pivote:-1
param->( ) , c="+", pivote:-1
call->label param , c="-", pivote:0
param->( structure ) , c="-", pivote:-1
param->( ) , c="-", pivote:-1
call->label param , c="*", pivote:0
param->( structure ) , c="*", pivote:-1
param->( ) , c="*", pivote:-1
call->label param , c="/", pivote:0
param->( structure ) , c="/", pivote:-1
param->( ) , c="/", pivote:-1
call->label param , c="**", pivote:0
param->( structure ) , c="**", pivote:-1
param->( ) , c="**", pivote:-1
call->label param , c="^", pivote:0
param->( structure ) , c="^", pivote:-1
param->( ) , c="^", pivote:-1
call->label param , c="%", pivote:0
param->( structure ) , c="%", pivote:-1
param->( ) , c="%", pivote:-1
atom->label . label , c="in", pivote:0
atom->label . call , c="in", pivote:0
atom->label , c="in", pivote:0
atom->label param => block , c="in", pivote:0
call->label param , c="in", pivote:0
param->( structure ) , c="in", pivote:-1
param->( ) , c="in", pivote:-1
 }
 GOTO(I2,bool):
I35= { 
bool->! bool , c=";", pivote:1
bool->bool == concatenation , c=";", pivote:0
bool->bool >= concatenation , c=";", pivote:0
bool->bool <= concatenation , c=";", pivote:0
bool->bool & concatenation , c=";", pivote:0
bool->bool | concatenation , c=";", pivote:0
bool->bool == concatenation , c="==", pivote:0
bool->bool >= concatenation , c="==", pivote:0
bool->bool <= concatenation , c="==", pivote:0
bool->bool & concatenation , c="==", pivote:0
bool->bool | concatenation , c="==", pivote:0
bool->bool == concatenation , c=">=", pivote:0
bool->bool >= concatenation , c=">=", pivote:0
bool->bool <= concatenation , c=">=", pivote:0
bool->bool & concatenation , c=">=", pivote:0
bool->bool | concatenation , c=">=", pivote:0
bool->bool == concatenation , c="<=", pivote:0
bool->bool >= concatenation , c="<=", pivote:0
bool->bool <= concatenation , c="<=", pivote:0
bool->bool & concatenation , c="<=", pivote:0
bool->bool | concatenation , c="<=", pivote:0
bool->bool == concatenation , c="&", pivote:0
bool->bool >= concatenation , c="&", pivote:0
bool->bool <= concatenation , c="&", pivote:0
bool->bool & concatenation , c="&", pivote:0
bool->bool | concatenation , c="&", pivote:0
bool->bool == concatenation , c="|", pivote:0
bool->bool >= concatenation , c="|", pivote:0
bool->bool <= concatenation , c="|", pivote:0
bool->bool & concatenation , c="|", pivote:0
bool->bool | concatenation , c="|", pivote:0
bool->! bool , c="in", pivote:1
bool->bool == concatenation , c="in", pivote:0
bool->bool >= concatenation , c="in", pivote:0
bool->bool <= concatenation , c="in", pivote:0
bool->bool & concatenation , c="in", pivote:0
bool->bool | concatenation , c="in", pivote:0
bool->! bool , c="==", pivote:1
bool->! bool , c=">=", pivote:1
bool->! bool , c="<=", pivote:1
bool->! bool , c="&", pivote:1
bool->! bool , c="|", pivote:1
 }
 GOTO(I3,():
I36= { 
param->( structure ) , c="int", pivote:0
structure->structure , high_level , c=")", pivote:-1
structure->high_level , c=")", pivote:-1
structure->high_level , high_level , c=")", pivote:-1
structure->structure , high_level , c=",", pivote:-1
structure->high_level , c=",", pivote:-1
structure->high_level , high_level , c=",", pivote:-1
high_level->bool , c=")", pivote:-1
high_level->label = high_level , c=")", pivote:-1
high_level->var_declaration = high_level , c=")", pivote:-1
high_level->label := high_level , c=")", pivote:-1
high_level->param in high_level , c=")", pivote:-1
high_level->high_level in high_level , c=")", pivote:-1
high_level->high_level in block , c=")", pivote:-1
high_level->function label param high_level , c=")", pivote:-1
high_level->label param => high_level , c=")", pivote:-1
high_level->new call , c=")", pivote:-1
high_level->label ++ , c=")", pivote:-1
high_level->label -- , c=")", pivote:-1
high_level->bool , c=",", pivote:-1
high_level->label = high_level , c=",", pivote:-1
high_level->var_declaration = high_level , c=",", pivote:-1
high_level->label := high_level , c=",", pivote:-1
high_level->param in high_level , c=",", pivote:-1
high_level->high_level in high_level , c=",", pivote:-1
high_level->high_level in block , c=",", pivote:-1
high_level->function label param high_level , c=",", pivote:-1
high_level->label param => high_level , c=",", pivote:-1
high_level->new call , c=",", pivote:-1
high_level->label ++ , c=",", pivote:-1
high_level->label -- , c=",", pivote:-1
bool->bool == concatenation , c=")", pivote:-1
bool->bool >= concatenation , c=")", pivote:-1
bool->bool <= concatenation , c=")", pivote:-1
bool->bool & concatenation , c=")", pivote:-1
bool->bool | concatenation , c=")", pivote:-1
bool->concatenation , c=")", pivote:-1
bool->! bool , c=")", pivote:-1
label->int , c="=", pivote:-1
var_declaration->let label , c="=", pivote:-1
label->int , c=":=", pivote:-1
param->( structure ) , c="in", pivote:-1
param->( ) , c="in", pivote:-1
high_level->bool , c="in", pivote:-1
high_level->label = high_level , c="in", pivote:-1
high_level->var_declaration = high_level , c="in", pivote:-1
high_level->label := high_level , c="in", pivote:-1
high_level->param in high_level , c="in", pivote:-1
high_level->high_level in high_level , c="in", pivote:-1
high_level->high_level in block , c="in", pivote:-1
high_level->function label param high_level , c="in", pivote:-1
high_level->label param => high_level , c="in", pivote:-1
high_level->new call , c="in", pivote:-1
high_level->label ++ , c="in", pivote:-1
high_level->label -- , c="in", pivote:-1
label->int , c="(", pivote:-1
label->int , c="++", pivote:-1
label->int , c="--", pivote:-1
bool->bool == concatenation , c=",", pivote:-1
bool->bool >= concatenation , c=",", pivote:-1
bool->bool <= concatenation , c=",", pivote:-1
bool->bool & concatenation , c=",", pivote:-1
bool->bool | concatenation , c=",", pivote:-1
bool->concatenation , c=",", pivote:-1
bool->! bool , c=",", pivote:-1
bool->bool == concatenation , c="==", pivote:-1
bool->bool >= concatenation , c="==", pivote:-1
bool->bool <= concatenation , c="==", pivote:-1
bool->bool & concatenation , c="==", pivote:-1
bool->bool | concatenation , c="==", pivote:-1
bool->concatenation , c="==", pivote:-1
bool->! bool , c="==", pivote:-1
bool->bool == concatenation , c=">=", pivote:-1
bool->bool >= concatenation , c=">=", pivote:-1
bool->bool <= concatenation , c=">=", pivote:-1
bool->bool & concatenation , c=">=", pivote:-1
bool->bool | concatenation , c=">=", pivote:-1
bool->concatenation , c=">=", pivote:-1
bool->! bool , c=">=", pivote:-1
bool->bool == concatenation , c="<=", pivote:-1
bool->bool >= concatenation , c="<=", pivote:-1
bool->bool <= concatenation , c="<=", pivote:-1
bool->bool & concatenation , c="<=", pivote:-1
bool->bool | concatenation , c="<=", pivote:-1
bool->concatenation , c="<=", pivote:-1
bool->! bool , c="<=", pivote:-1
bool->bool == concatenation , c="&", pivote:-1
bool->bool >= concatenation , c="&", pivote:-1
bool->bool <= concatenation , c="&", pivote:-1
bool->bool & concatenation , c="&", pivote:-1
bool->bool | concatenation , c="&", pivote:-1
bool->concatenation , c="&", pivote:-1
bool->! bool , c="&", pivote:-1
bool->bool == concatenation , c="|", pivote:-1
bool->bool >= concatenation , c="|", pivote:-1
bool->bool <= concatenation , c="|", pivote:-1
bool->bool & concatenation , c="|", pivote:-1
bool->bool | concatenation , c="|", pivote:-1
bool->concatenation , c="|", pivote:-1
bool->! bool , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c=")", pivote:-1
concatenation->concatenation @@ sum_minus , c=")", pivote:-1
concatenation->sum_minus , c=")", pivote:-1
bool->bool == concatenation , c="in", pivote:-1
bool->bool >= concatenation , c="in", pivote:-1
bool->bool <= concatenation , c="in", pivote:-1
bool->bool & concatenation , c="in", pivote:-1
bool->bool | concatenation , c="in", pivote:-1
bool->concatenation , c="in", pivote:-1
bool->! bool , c="in", pivote:-1
concatenation->concatenation @ sum_minus , c=",", pivote:-1
concatenation->concatenation @@ sum_minus , c=",", pivote:-1
concatenation->sum_minus , c=",", pivote:-1
concatenation->concatenation @ sum_minus , c="==", pivote:-1
concatenation->concatenation @@ sum_minus , c="==", pivote:-1
concatenation->sum_minus , c="==", pivote:-1
concatenation->concatenation @ sum_minus , c=">=", pivote:-1
concatenation->concatenation @@ sum_minus , c=">=", pivote:-1
concatenation->sum_minus , c=">=", pivote:-1
concatenation->concatenation @ sum_minus , c="<=", pivote:-1
concatenation->concatenation @@ sum_minus , c="<=", pivote:-1
concatenation->sum_minus , c="<=", pivote:-1
concatenation->concatenation @ sum_minus , c="&", pivote:-1
concatenation->concatenation @@ sum_minus , c="&", pivote:-1
concatenation->sum_minus , c="&", pivote:-1
concatenation->concatenation @ sum_minus , c="|", pivote:-1
concatenation->concatenation @@ sum_minus , c="|", pivote:-1
concatenation->sum_minus , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c="@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@", pivote:-1
concatenation->sum_minus , c="@", pivote:-1
concatenation->concatenation @ sum_minus , c="@@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@@", pivote:-1
concatenation->sum_minus , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c=")", pivote:-1
sum_minus->sum_minus - div_mult , c=")", pivote:-1
sum_minus->div_mult , c=")", pivote:-1
concatenation->concatenation @ sum_minus , c="in", pivote:-1
concatenation->concatenation @@ sum_minus , c="in", pivote:-1
concatenation->sum_minus , c="in", pivote:-1
sum_minus->sum_minus + div_mult , c=",", pivote:-1
sum_minus->sum_minus - div_mult , c=",", pivote:-1
sum_minus->div_mult , c=",", pivote:-1
sum_minus->sum_minus + div_mult , c="==", pivote:-1
sum_minus->sum_minus - div_mult , c="==", pivote:-1
sum_minus->div_mult , c="==", pivote:-1
sum_minus->sum_minus + div_mult , c=">=", pivote:-1
sum_minus->sum_minus - div_mult , c=">=", pivote:-1
sum_minus->div_mult , c=">=", pivote:-1
sum_minus->sum_minus + div_mult , c="<=", pivote:-1
sum_minus->sum_minus - div_mult , c="<=", pivote:-1
sum_minus->div_mult , c="<=", pivote:-1
sum_minus->sum_minus + div_mult , c="&", pivote:-1
sum_minus->sum_minus - div_mult , c="&", pivote:-1
sum_minus->div_mult , c="&", pivote:-1
sum_minus->sum_minus + div_mult , c="|", pivote:-1
sum_minus->sum_minus - div_mult , c="|", pivote:-1
sum_minus->div_mult , c="|", pivote:-1
sum_minus->sum_minus + div_mult , c="@", pivote:-1
sum_minus->sum_minus - div_mult , c="@", pivote:-1
sum_minus->div_mult , c="@", pivote:-1
sum_minus->sum_minus + div_mult , c="@@", pivote:-1
sum_minus->sum_minus - div_mult , c="@@", pivote:-1
sum_minus->div_mult , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c="+", pivote:-1
sum_minus->sum_minus - div_mult , c="+", pivote:-1
sum_minus->div_mult , c="+", pivote:-1
sum_minus->sum_minus + div_mult , c="-", pivote:-1
sum_minus->sum_minus - div_mult , c="-", pivote:-1
sum_minus->div_mult , c="-", pivote:-1
div_mult->div_mult * pow , c=")", pivote:-1
div_mult->div_mult / pow , c=")", pivote:-1
div_mult->pow , c=")", pivote:-1
sum_minus->sum_minus + div_mult , c="in", pivote:-1
sum_minus->sum_minus - div_mult , c="in", pivote:-1
sum_minus->div_mult , c="in", pivote:-1
div_mult->div_mult * pow , c=",", pivote:-1
div_mult->div_mult / pow , c=",", pivote:-1
div_mult->pow , c=",", pivote:-1
div_mult->div_mult * pow , c="==", pivote:-1
div_mult->div_mult / pow , c="==", pivote:-1
div_mult->pow , c="==", pivote:-1
div_mult->div_mult * pow , c=">=", pivote:-1
div_mult->div_mult / pow , c=">=", pivote:-1
div_mult->pow , c=">=", pivote:-1
div_mult->div_mult * pow , c="<=", pivote:-1
div_mult->div_mult / pow , c="<=", pivote:-1
div_mult->pow , c="<=", pivote:-1
div_mult->div_mult * pow , c="&", pivote:-1
div_mult->div_mult / pow , c="&", pivote:-1
div_mult->pow , c="&", pivote:-1
div_mult->div_mult * pow , c="|", pivote:-1
div_mult->div_mult / pow , c="|", pivote:-1
div_mult->pow , c="|", pivote:-1
div_mult->div_mult * pow , c="@", pivote:-1
div_mult->div_mult / pow , c="@", pivote:-1
div_mult->pow , c="@", pivote:-1
div_mult->div_mult * pow , c="@@", pivote:-1
div_mult->div_mult / pow , c="@@", pivote:-1
div_mult->pow , c="@@", pivote:-1
div_mult->div_mult * pow , c="+", pivote:-1
div_mult->div_mult / pow , c="+", pivote:-1
div_mult->pow , c="+", pivote:-1
div_mult->div_mult * pow , c="-", pivote:-1
div_mult->div_mult / pow , c="-", pivote:-1
div_mult->pow , c="-", pivote:-1
div_mult->div_mult * pow , c="*", pivote:-1
div_mult->div_mult / pow , c="*", pivote:-1
div_mult->pow , c="*", pivote:-1
div_mult->div_mult * pow , c="/", pivote:-1
div_mult->div_mult / pow , c="/", pivote:-1
div_mult->pow , c="/", pivote:-1
pow->pow ** atom , c=")", pivote:-1
pow->pow ^ atom , c=")", pivote:-1
pow->pow % atom , c=")", pivote:-1
pow->atom , c=")", pivote:-1
div_mult->div_mult * pow , c="in", pivote:-1
div_mult->div_mult / pow , c="in", pivote:-1
div_mult->pow , c="in", pivote:-1
pow->pow ** atom , c=",", pivote:-1
pow->pow ^ atom , c=",", pivote:-1
pow->pow % atom , c=",", pivote:-1
pow->atom , c=",", pivote:-1
pow->pow ** atom , c="==", pivote:-1
pow->pow ^ atom , c="==", pivote:-1
pow->pow % atom , c="==", pivote:-1
pow->atom , c="==", pivote:-1
pow->pow ** atom , c=">=", pivote:-1
pow->pow ^ atom , c=">=", pivote:-1
pow->pow % atom , c=">=", pivote:-1
pow->atom , c=">=", pivote:-1
pow->pow ** atom , c="<=", pivote:-1
pow->pow ^ atom , c="<=", pivote:-1
pow->pow % atom , c="<=", pivote:-1
pow->atom , c="<=", pivote:-1
pow->pow ** atom , c="&", pivote:-1
pow->pow ^ atom , c="&", pivote:-1
pow->pow % atom , c="&", pivote:-1
pow->atom , c="&", pivote:-1
pow->pow ** atom , c="|", pivote:-1
pow->pow ^ atom , c="|", pivote:-1
pow->pow % atom , c="|", pivote:-1
pow->atom , c="|", pivote:-1
pow->pow ** atom , c="@", pivote:-1
pow->pow ^ atom , c="@", pivote:-1
pow->pow % atom , c="@", pivote:-1
pow->atom , c="@", pivote:-1
pow->pow ** atom , c="@@", pivote:-1
pow->pow ^ atom , c="@@", pivote:-1
pow->pow % atom , c="@@", pivote:-1
pow->atom , c="@@", pivote:-1
pow->pow ** atom , c="+", pivote:-1
pow->pow ^ atom , c="+", pivote:-1
pow->pow % atom , c="+", pivote:-1
pow->atom , c="+", pivote:-1
pow->pow ** atom , c="-", pivote:-1
pow->pow ^ atom , c="-", pivote:-1
pow->pow % atom , c="-", pivote:-1
pow->atom , c="-", pivote:-1
pow->pow ** atom , c="*", pivote:-1
pow->pow ^ atom , c="*", pivote:-1
pow->pow % atom , c="*", pivote:-1
pow->atom , c="*", pivote:-1
pow->pow ** atom , c="/", pivote:-1
pow->pow ^ atom , c="/", pivote:-1
pow->pow % atom , c="/", pivote:-1
pow->atom , c="/", pivote:-1
pow->pow ** atom , c="**", pivote:-1
pow->pow ^ atom , c="**", pivote:-1
pow->pow % atom , c="**", pivote:-1
pow->atom , c="**", pivote:-1
pow->pow ** atom , c="^", pivote:-1
pow->pow ^ atom , c="^", pivote:-1
pow->pow % atom , c="^", pivote:-1
pow->atom , c="^", pivote:-1
pow->pow ** atom , c="%", pivote:-1
pow->pow ^ atom , c="%", pivote:-1
pow->pow % atom , c="%", pivote:-1
pow->atom , c="%", pivote:-1
atom->label . label , c=")", pivote:-1
atom->label . call , c=")", pivote:-1
atom->call . call , c=")", pivote:-1
atom->call . label , c=")", pivote:-1
atom->label , c=")", pivote:-1
atom->( high_level ) , c=")", pivote:-1
atom->for param block , c=")", pivote:-1
atom->for param exp , c=")", pivote:-1
atom->for param high_level , c=")", pivote:-1
atom->protocol label block , c=")", pivote:-1
atom->protocol label extends label block , c=")", pivote:-1
atom->type label block , c=")", pivote:-1
atom->type label param block , c=")", pivote:-1
atom->type label inherits label block , c=")", pivote:-1
atom->type label param inherits label param block , c=")", pivote:-1
atom->function label param block , c=")", pivote:-1
atom->label param => block , c=")", pivote:-1
atom->while param block , c=")", pivote:-1
atom->while param high_level , c=")", pivote:-1
atom->if_high_level else_high_level , c=")", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=")", pivote:-1
atom->call , c=")", pivote:-1
pow->pow ** atom , c="in", pivote:-1
pow->pow ^ atom , c="in", pivote:-1
pow->pow % atom , c="in", pivote:-1
pow->atom , c="in", pivote:-1
atom->label . label , c=",", pivote:-1
atom->label . call , c=",", pivote:-1
atom->call . call , c=",", pivote:-1
atom->call . label , c=",", pivote:-1
atom->label , c=",", pivote:-1
atom->( high_level ) , c=",", pivote:-1
atom->for param block , c=",", pivote:-1
atom->for param exp , c=",", pivote:-1
atom->for param high_level , c=",", pivote:-1
atom->protocol label block , c=",", pivote:-1
atom->protocol label extends label block , c=",", pivote:-1
atom->type label block , c=",", pivote:-1
atom->type label param block , c=",", pivote:-1
atom->type label inherits label block , c=",", pivote:-1
atom->type label param inherits label param block , c=",", pivote:-1
atom->function label param block , c=",", pivote:-1
atom->label param => block , c=",", pivote:-1
atom->while param block , c=",", pivote:-1
atom->while param high_level , c=",", pivote:-1
atom->if_high_level else_high_level , c=",", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=",", pivote:-1
atom->call , c=",", pivote:-1
atom->label . label , c="==", pivote:-1
atom->label . call , c="==", pivote:-1
atom->call . call , c="==", pivote:-1
atom->call . label , c="==", pivote:-1
atom->label , c="==", pivote:-1
atom->( high_level ) , c="==", pivote:-1
atom->for param block , c="==", pivote:-1
atom->for param exp , c="==", pivote:-1
atom->for param high_level , c="==", pivote:-1
atom->protocol label block , c="==", pivote:-1
atom->protocol label extends label block , c="==", pivote:-1
atom->type label block , c="==", pivote:-1
atom->type label param block , c="==", pivote:-1
atom->type label inherits label block , c="==", pivote:-1
atom->type label param inherits label param block , c="==", pivote:-1
atom->function label param block , c="==", pivote:-1
atom->label param => block , c="==", pivote:-1
atom->while param block , c="==", pivote:-1
atom->while param high_level , c="==", pivote:-1
atom->if_high_level else_high_level , c="==", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="==", pivote:-1
atom->call , c="==", pivote:-1
atom->label . label , c=">=", pivote:-1
atom->label . call , c=">=", pivote:-1
atom->call . call , c=">=", pivote:-1
atom->call . label , c=">=", pivote:-1
atom->label , c=">=", pivote:-1
atom->( high_level ) , c=">=", pivote:-1
atom->for param block , c=">=", pivote:-1
atom->for param exp , c=">=", pivote:-1
atom->for param high_level , c=">=", pivote:-1
atom->protocol label block , c=">=", pivote:-1
atom->protocol label extends label block , c=">=", pivote:-1
atom->type label block , c=">=", pivote:-1
atom->type label param block , c=">=", pivote:-1
atom->type label inherits label block , c=">=", pivote:-1
atom->type label param inherits label param block , c=">=", pivote:-1
atom->function label param block , c=">=", pivote:-1
atom->label param => block , c=">=", pivote:-1
atom->while param block , c=">=", pivote:-1
atom->while param high_level , c=">=", pivote:-1
atom->if_high_level else_high_level , c=">=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=">=", pivote:-1
atom->call , c=">=", pivote:-1
atom->label . label , c="<=", pivote:-1
atom->label . call , c="<=", pivote:-1
atom->call . call , c="<=", pivote:-1
atom->call . label , c="<=", pivote:-1
atom->label , c="<=", pivote:-1
atom->( high_level ) , c="<=", pivote:-1
atom->for param block , c="<=", pivote:-1
atom->for param exp , c="<=", pivote:-1
atom->for param high_level , c="<=", pivote:-1
atom->protocol label block , c="<=", pivote:-1
atom->protocol label extends label block , c="<=", pivote:-1
atom->type label block , c="<=", pivote:-1
atom->type label param block , c="<=", pivote:-1
atom->type label inherits label block , c="<=", pivote:-1
atom->type label param inherits label param block , c="<=", pivote:-1
atom->function label param block , c="<=", pivote:-1
atom->label param => block , c="<=", pivote:-1
atom->while param block , c="<=", pivote:-1
atom->while param high_level , c="<=", pivote:-1
atom->if_high_level else_high_level , c="<=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="<=", pivote:-1
atom->call , c="<=", pivote:-1
atom->label . label , c="&", pivote:-1
atom->label . call , c="&", pivote:-1
atom->call . call , c="&", pivote:-1
atom->call . label , c="&", pivote:-1
atom->label , c="&", pivote:-1
atom->( high_level ) , c="&", pivote:-1
atom->for param block , c="&", pivote:-1
atom->for param exp , c="&", pivote:-1
atom->for param high_level , c="&", pivote:-1
atom->protocol label block , c="&", pivote:-1
atom->protocol label extends label block , c="&", pivote:-1
atom->type label block , c="&", pivote:-1
atom->type label param block , c="&", pivote:-1
atom->type label inherits label block , c="&", pivote:-1
atom->type label param inherits label param block , c="&", pivote:-1
atom->function label param block , c="&", pivote:-1
atom->label param => block , c="&", pivote:-1
atom->while param block , c="&", pivote:-1
atom->while param high_level , c="&", pivote:-1
atom->if_high_level else_high_level , c="&", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="&", pivote:-1
atom->call , c="&", pivote:-1
atom->label . label , c="|", pivote:-1
atom->label . call , c="|", pivote:-1
atom->call . call , c="|", pivote:-1
atom->call . label , c="|", pivote:-1
atom->label , c="|", pivote:-1
atom->( high_level ) , c="|", pivote:-1
atom->for param block , c="|", pivote:-1
atom->for param exp , c="|", pivote:-1
atom->for param high_level , c="|", pivote:-1
atom->protocol label block , c="|", pivote:-1
atom->protocol label extends label block , c="|", pivote:-1
atom->type label block , c="|", pivote:-1
atom->type label param block , c="|", pivote:-1
atom->type label inherits label block , c="|", pivote:-1
atom->type label param inherits label param block , c="|", pivote:-1
atom->function label param block , c="|", pivote:-1
atom->label param => block , c="|", pivote:-1
atom->while param block , c="|", pivote:-1
atom->while param high_level , c="|", pivote:-1
atom->if_high_level else_high_level , c="|", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="|", pivote:-1
atom->call , c="|", pivote:-1
atom->label . label , c="@", pivote:-1
atom->label . call , c="@", pivote:-1
atom->call . call , c="@", pivote:-1
atom->call . label , c="@", pivote:-1
atom->label , c="@", pivote:-1
atom->( high_level ) , c="@", pivote:-1
atom->for param block , c="@", pivote:-1
atom->for param exp , c="@", pivote:-1
atom->for param high_level , c="@", pivote:-1
atom->protocol label block , c="@", pivote:-1
atom->protocol label extends label block , c="@", pivote:-1
atom->type label block , c="@", pivote:-1
atom->type label param block , c="@", pivote:-1
atom->type label inherits label block , c="@", pivote:-1
atom->type label param inherits label param block , c="@", pivote:-1
atom->function label param block , c="@", pivote:-1
atom->label param => block , c="@", pivote:-1
atom->while param block , c="@", pivote:-1
atom->while param high_level , c="@", pivote:-1
atom->if_high_level else_high_level , c="@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@", pivote:-1
atom->call , c="@", pivote:-1
atom->label . label , c="@@", pivote:-1
atom->label . call , c="@@", pivote:-1
atom->call . call , c="@@", pivote:-1
atom->call . label , c="@@", pivote:-1
atom->label , c="@@", pivote:-1
atom->( high_level ) , c="@@", pivote:-1
atom->for param block , c="@@", pivote:-1
atom->for param exp , c="@@", pivote:-1
atom->for param high_level , c="@@", pivote:-1
atom->protocol label block , c="@@", pivote:-1
atom->protocol label extends label block , c="@@", pivote:-1
atom->type label block , c="@@", pivote:-1
atom->type label param block , c="@@", pivote:-1
atom->type label inherits label block , c="@@", pivote:-1
atom->type label param inherits label param block , c="@@", pivote:-1
atom->function label param block , c="@@", pivote:-1
atom->label param => block , c="@@", pivote:-1
atom->while param block , c="@@", pivote:-1
atom->while param high_level , c="@@", pivote:-1
atom->if_high_level else_high_level , c="@@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@@", pivote:-1
atom->call , c="@@", pivote:-1
atom->label . label , c="+", pivote:-1
atom->label . call , c="+", pivote:-1
atom->call . call , c="+", pivote:-1
atom->call . label , c="+", pivote:-1
atom->label , c="+", pivote:-1
atom->( high_level ) , c="+", pivote:-1
atom->for param block , c="+", pivote:-1
atom->for param exp , c="+", pivote:-1
atom->for param high_level , c="+", pivote:-1
atom->protocol label block , c="+", pivote:-1
atom->protocol label extends label block , c="+", pivote:-1
atom->type label block , c="+", pivote:-1
atom->type label param block , c="+", pivote:-1
atom->type label inherits label block , c="+", pivote:-1
atom->type label param inherits label param block , c="+", pivote:-1
atom->function label param block , c="+", pivote:-1
atom->label param => block , c="+", pivote:-1
atom->while param block , c="+", pivote:-1
atom->while param high_level , c="+", pivote:-1
atom->if_high_level else_high_level , c="+", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="+", pivote:-1
atom->call , c="+", pivote:-1
atom->label . label , c="-", pivote:-1
atom->label . call , c="-", pivote:-1
atom->call . call , c="-", pivote:-1
atom->call . label , c="-", pivote:-1
atom->label , c="-", pivote:-1
atom->( high_level ) , c="-", pivote:-1
atom->for param block , c="-", pivote:-1
atom->for param exp , c="-", pivote:-1
atom->for param high_level , c="-", pivote:-1
atom->protocol label block , c="-", pivote:-1
atom->protocol label extends label block , c="-", pivote:-1
atom->type label block , c="-", pivote:-1
atom->type label param block , c="-", pivote:-1
atom->type label inherits label block , c="-", pivote:-1
atom->type label param inherits label param block , c="-", pivote:-1
atom->function label param block , c="-", pivote:-1
atom->label param => block , c="-", pivote:-1
atom->while param block , c="-", pivote:-1
atom->while param high_level , c="-", pivote:-1
atom->if_high_level else_high_level , c="-", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="-", pivote:-1
atom->call , c="-", pivote:-1
atom->label . label , c="*", pivote:-1
atom->label . call , c="*", pivote:-1
atom->call . call , c="*", pivote:-1
atom->call . label , c="*", pivote:-1
atom->label , c="*", pivote:-1
atom->( high_level ) , c="*", pivote:-1
atom->for param block , c="*", pivote:-1
atom->for param exp , c="*", pivote:-1
atom->for param high_level , c="*", pivote:-1
atom->protocol label block , c="*", pivote:-1
atom->protocol label extends label block , c="*", pivote:-1
atom->type label block , c="*", pivote:-1
atom->type label param block , c="*", pivote:-1
atom->type label inherits label block , c="*", pivote:-1
atom->type label param inherits label param block , c="*", pivote:-1
atom->function label param block , c="*", pivote:-1
atom->label param => block , c="*", pivote:-1
atom->while param block , c="*", pivote:-1
atom->while param high_level , c="*", pivote:-1
atom->if_high_level else_high_level , c="*", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="*", pivote:-1
atom->call , c="*", pivote:-1
atom->label . label , c="/", pivote:-1
atom->label . call , c="/", pivote:-1
atom->call . call , c="/", pivote:-1
atom->call . label , c="/", pivote:-1
atom->label , c="/", pivote:-1
atom->( high_level ) , c="/", pivote:-1
atom->for param block , c="/", pivote:-1
atom->for param exp , c="/", pivote:-1
atom->for param high_level , c="/", pivote:-1
atom->protocol label block , c="/", pivote:-1
atom->protocol label extends label block , c="/", pivote:-1
atom->type label block , c="/", pivote:-1
atom->type label param block , c="/", pivote:-1
atom->type label inherits label block , c="/", pivote:-1
atom->type label param inherits label param block , c="/", pivote:-1
atom->function label param block , c="/", pivote:-1
atom->label param => block , c="/", pivote:-1
atom->while param block , c="/", pivote:-1
atom->while param high_level , c="/", pivote:-1
atom->if_high_level else_high_level , c="/", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="/", pivote:-1
atom->call , c="/", pivote:-1
atom->label . label , c="**", pivote:-1
atom->label . call , c="**", pivote:-1
atom->call . call , c="**", pivote:-1
atom->call . label , c="**", pivote:-1
atom->label , c="**", pivote:-1
atom->( high_level ) , c="**", pivote:-1
atom->for param block , c="**", pivote:-1
atom->for param exp , c="**", pivote:-1
atom->for param high_level , c="**", pivote:-1
atom->protocol label block , c="**", pivote:-1
atom->protocol label extends label block , c="**", pivote:-1
atom->type label block , c="**", pivote:-1
atom->type label param block , c="**", pivote:-1
atom->type label inherits label block , c="**", pivote:-1
atom->type label param inherits label param block , c="**", pivote:-1
atom->function label param block , c="**", pivote:-1
atom->label param => block , c="**", pivote:-1
atom->while param block , c="**", pivote:-1
atom->while param high_level , c="**", pivote:-1
atom->if_high_level else_high_level , c="**", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="**", pivote:-1
atom->call , c="**", pivote:-1
atom->label . label , c="^", pivote:-1
atom->label . call , c="^", pivote:-1
atom->call . call , c="^", pivote:-1
atom->call . label , c="^", pivote:-1
atom->label , c="^", pivote:-1
atom->( high_level ) , c="^", pivote:-1
atom->for param block , c="^", pivote:-1
atom->for param exp , c="^", pivote:-1
atom->for param high_level , c="^", pivote:-1
atom->protocol label block , c="^", pivote:-1
atom->protocol label extends label block , c="^", pivote:-1
atom->type label block , c="^", pivote:-1
atom->type label param block , c="^", pivote:-1
atom->type label inherits label block , c="^", pivote:-1
atom->type label param inherits label param block , c="^", pivote:-1
atom->function label param block , c="^", pivote:-1
atom->label param => block , c="^", pivote:-1
atom->while param block , c="^", pivote:-1
atom->while param high_level , c="^", pivote:-1
atom->if_high_level else_high_level , c="^", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="^", pivote:-1
atom->call , c="^", pivote:-1
atom->label . label , c="%", pivote:-1
atom->label . call , c="%", pivote:-1
atom->call . call , c="%", pivote:-1
atom->call . label , c="%", pivote:-1
atom->label , c="%", pivote:-1
atom->( high_level ) , c="%", pivote:-1
atom->for param block , c="%", pivote:-1
atom->for param exp , c="%", pivote:-1
atom->for param high_level , c="%", pivote:-1
atom->protocol label block , c="%", pivote:-1
atom->protocol label extends label block , c="%", pivote:-1
atom->type label block , c="%", pivote:-1
atom->type label param block , c="%", pivote:-1
atom->type label inherits label block , c="%", pivote:-1
atom->type label param inherits label param block , c="%", pivote:-1
atom->function label param block , c="%", pivote:-1
atom->label param => block , c="%", pivote:-1
atom->while param block , c="%", pivote:-1
atom->while param high_level , c="%", pivote:-1
atom->if_high_level else_high_level , c="%", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="%", pivote:-1
atom->call , c="%", pivote:-1
label->int , c=".", pivote:-1
call->label param , c=".", pivote:-1
label->int , c=")", pivote:-1
if_high_level->if param high_level , c="else", pivote:-1
if_high_level->if param high_level , c="elif", pivote:-1
call->label param , c=")", pivote:-1
atom->label . label , c="in", pivote:-1
atom->label . call , c="in", pivote:-1
atom->call . call , c="in", pivote:-1
atom->call . label , c="in", pivote:-1
atom->label , c="in", pivote:-1
atom->( high_level ) , c="in", pivote:-1
atom->for param block , c="in", pivote:-1
atom->for param exp , c="in", pivote:-1
atom->for param high_level , c="in", pivote:-1
atom->protocol label block , c="in", pivote:-1
atom->protocol label extends label block , c="in", pivote:-1
atom->type label block , c="in", pivote:-1
atom->type label param block , c="in", pivote:-1
atom->type label inherits label block , c="in", pivote:-1
atom->type label param inherits label param block , c="in", pivote:-1
atom->function label param block , c="in", pivote:-1
atom->label param => block , c="in", pivote:-1
atom->while param block , c="in", pivote:-1
atom->while param high_level , c="in", pivote:-1
atom->if_high_level else_high_level , c="in", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="in", pivote:-1
atom->call , c="in", pivote:-1
label->int , c=",", pivote:-1
call->label param , c=",", pivote:-1
label->int , c="==", pivote:-1
call->label param , c="==", pivote:-1
label->int , c=">=", pivote:-1
call->label param , c=">=", pivote:-1
label->int , c="<=", pivote:-1
call->label param , c="<=", pivote:-1
label->int , c="&", pivote:-1
call->label param , c="&", pivote:-1
label->int , c="|", pivote:-1
call->label param , c="|", pivote:-1
label->int , c="@", pivote:-1
call->label param , c="@", pivote:-1
label->int , c="@@", pivote:-1
call->label param , c="@@", pivote:-1
label->int , c="+", pivote:-1
call->label param , c="+", pivote:-1
label->int , c="-", pivote:-1
call->label param , c="-", pivote:-1
label->int , c="*", pivote:-1
call->label param , c="*", pivote:-1
label->int , c="/", pivote:-1
call->label param , c="/", pivote:-1
label->int , c="**", pivote:-1
call->label param , c="**", pivote:-1
label->int , c="^", pivote:-1
call->label param , c="^", pivote:-1
label->int , c="%", pivote:-1
call->label param , c="%", pivote:-1
label->int , c="in", pivote:-1
call->label param , c="in", pivote:-1
param->( structure ) , c="(", pivote:0
param->( structure ) , c="for", pivote:0
param->( structure ) , c="protocol", pivote:0
param->( structure ) , c="type", pivote:0
param->( structure ) , c="function", pivote:0
param->( structure ) , c="while", pivote:0
param->( structure ) , c="if", pivote:0
param->( structure ) , c="!", pivote:0
param->( structure ) , c="let", pivote:0
param->( structure ) , c="new", pivote:0
param->( ) , c="int", pivote:0
param->( ) , c="(", pivote:0
param->( ) , c="for", pivote:0
param->( ) , c="protocol", pivote:0
param->( ) , c="type", pivote:0
param->( ) , c="function", pivote:0
param->( ) , c="while", pivote:0
param->( ) , c="if", pivote:0
param->( ) , c="!", pivote:0
param->( ) , c="let", pivote:0
param->( ) , c="new", pivote:0
param->( structure ) , c="{", pivote:0
param->( ) , c="{", pivote:0
 }
 GOTO(I3,param):
I37= { 
if_exp->if param exp , c="else", pivote:1
exp->high_level ; , c="else", pivote:-1
exp->high_level in exp , c="else", pivote:-1
exp->param in exp , c="else", pivote:-1
exp->function label param exp , c="else", pivote:-1
exp->label param => exp , c="else", pivote:-1
exp->while param exp , c="else", pivote:-1
exp->if_exp else_exp , c="else", pivote:-1
exp->if_exp elif_exp else_exp , c="else", pivote:-1
high_level->bool , c=";", pivote:-1
high_level->label = high_level , c=";", pivote:-1
high_level->var_declaration = high_level , c=";", pivote:-1
high_level->label := high_level , c=";", pivote:-1
high_level->param in high_level , c=";", pivote:-1
high_level->high_level in high_level , c=";", pivote:-1
high_level->high_level in block , c=";", pivote:-1
high_level->function label param high_level , c=";", pivote:-1
high_level->label param => high_level , c=";", pivote:-1
high_level->new call , c=";", pivote:-1
high_level->label ++ , c=";", pivote:-1
high_level->label -- , c=";", pivote:-1
high_level->bool , c="in", pivote:-1
high_level->label = high_level , c="in", pivote:-1
high_level->var_declaration = high_level , c="in", pivote:-1
high_level->label := high_level , c="in", pivote:-1
high_level->param in high_level , c="in", pivote:-1
high_level->high_level in high_level , c="in", pivote:-1
high_level->high_level in block , c="in", pivote:-1
high_level->function label param high_level , c="in", pivote:-1
high_level->label param => high_level , c="in", pivote:-1
high_level->new call , c="in", pivote:-1
high_level->label ++ , c="in", pivote:-1
high_level->label -- , c="in", pivote:-1
param->( structure ) , c="in", pivote:-1
param->( ) , c="in", pivote:-1
label->int , c="(", pivote:-1
if_exp->if param exp , c="else", pivote:-1
if_exp->if param block , c="else", pivote:-1
if_exp->if param exp , c="elif", pivote:-1
if_exp->if param block , c="elif", pivote:-1
bool->bool == concatenation , c=";", pivote:-1
bool->bool >= concatenation , c=";", pivote:-1
bool->bool <= concatenation , c=";", pivote:-1
bool->bool & concatenation , c=";", pivote:-1
bool->bool | concatenation , c=";", pivote:-1
bool->concatenation , c=";", pivote:-1
bool->! bool , c=";", pivote:-1
label->int , c="=", pivote:-1
var_declaration->let label , c="=", pivote:-1
label->int , c=":=", pivote:-1
label->int , c="++", pivote:-1
label->int , c="--", pivote:-1
bool->bool == concatenation , c="in", pivote:-1
bool->bool >= concatenation , c="in", pivote:-1
bool->bool <= concatenation , c="in", pivote:-1
bool->bool & concatenation , c="in", pivote:-1
bool->bool | concatenation , c="in", pivote:-1
bool->concatenation , c="in", pivote:-1
bool->! bool , c="in", pivote:-1
bool->bool == concatenation , c="==", pivote:-1
bool->bool >= concatenation , c="==", pivote:-1
bool->bool <= concatenation , c="==", pivote:-1
bool->bool & concatenation , c="==", pivote:-1
bool->bool | concatenation , c="==", pivote:-1
bool->concatenation , c="==", pivote:-1
bool->! bool , c="==", pivote:-1
bool->bool == concatenation , c=">=", pivote:-1
bool->bool >= concatenation , c=">=", pivote:-1
bool->bool <= concatenation , c=">=", pivote:-1
bool->bool & concatenation , c=">=", pivote:-1
bool->bool | concatenation , c=">=", pivote:-1
bool->concatenation , c=">=", pivote:-1
bool->! bool , c=">=", pivote:-1
bool->bool == concatenation , c="<=", pivote:-1
bool->bool >= concatenation , c="<=", pivote:-1
bool->bool <= concatenation , c="<=", pivote:-1
bool->bool & concatenation , c="<=", pivote:-1
bool->bool | concatenation , c="<=", pivote:-1
bool->concatenation , c="<=", pivote:-1
bool->! bool , c="<=", pivote:-1
bool->bool == concatenation , c="&", pivote:-1
bool->bool >= concatenation , c="&", pivote:-1
bool->bool <= concatenation , c="&", pivote:-1
bool->bool & concatenation , c="&", pivote:-1
bool->bool | concatenation , c="&", pivote:-1
bool->concatenation , c="&", pivote:-1
bool->! bool , c="&", pivote:-1
bool->bool == concatenation , c="|", pivote:-1
bool->bool >= concatenation , c="|", pivote:-1
bool->bool <= concatenation , c="|", pivote:-1
bool->bool & concatenation , c="|", pivote:-1
bool->bool | concatenation , c="|", pivote:-1
bool->concatenation , c="|", pivote:-1
bool->! bool , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c=";", pivote:-1
concatenation->concatenation @@ sum_minus , c=";", pivote:-1
concatenation->sum_minus , c=";", pivote:-1
concatenation->concatenation @ sum_minus , c="in", pivote:-1
concatenation->concatenation @@ sum_minus , c="in", pivote:-1
concatenation->sum_minus , c="in", pivote:-1
concatenation->concatenation @ sum_minus , c="==", pivote:-1
concatenation->concatenation @@ sum_minus , c="==", pivote:-1
concatenation->sum_minus , c="==", pivote:-1
concatenation->concatenation @ sum_minus , c=">=", pivote:-1
concatenation->concatenation @@ sum_minus , c=">=", pivote:-1
concatenation->sum_minus , c=">=", pivote:-1
concatenation->concatenation @ sum_minus , c="<=", pivote:-1
concatenation->concatenation @@ sum_minus , c="<=", pivote:-1
concatenation->sum_minus , c="<=", pivote:-1
concatenation->concatenation @ sum_minus , c="&", pivote:-1
concatenation->concatenation @@ sum_minus , c="&", pivote:-1
concatenation->sum_minus , c="&", pivote:-1
concatenation->concatenation @ sum_minus , c="|", pivote:-1
concatenation->concatenation @@ sum_minus , c="|", pivote:-1
concatenation->sum_minus , c="|", pivote:-1
concatenation->concatenation @ sum_minus , c="@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@", pivote:-1
concatenation->sum_minus , c="@", pivote:-1
concatenation->concatenation @ sum_minus , c="@@", pivote:-1
concatenation->concatenation @@ sum_minus , c="@@", pivote:-1
concatenation->sum_minus , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c=";", pivote:-1
sum_minus->sum_minus - div_mult , c=";", pivote:-1
sum_minus->div_mult , c=";", pivote:-1
sum_minus->sum_minus + div_mult , c="in", pivote:-1
sum_minus->sum_minus - div_mult , c="in", pivote:-1
sum_minus->div_mult , c="in", pivote:-1
sum_minus->sum_minus + div_mult , c="==", pivote:-1
sum_minus->sum_minus - div_mult , c="==", pivote:-1
sum_minus->div_mult , c="==", pivote:-1
sum_minus->sum_minus + div_mult , c=">=", pivote:-1
sum_minus->sum_minus - div_mult , c=">=", pivote:-1
sum_minus->div_mult , c=">=", pivote:-1
sum_minus->sum_minus + div_mult , c="<=", pivote:-1
sum_minus->sum_minus - div_mult , c="<=", pivote:-1
sum_minus->div_mult , c="<=", pivote:-1
sum_minus->sum_minus + div_mult , c="&", pivote:-1
sum_minus->sum_minus - div_mult , c="&", pivote:-1
sum_minus->div_mult , c="&", pivote:-1
sum_minus->sum_minus + div_mult , c="|", pivote:-1
sum_minus->sum_minus - div_mult , c="|", pivote:-1
sum_minus->div_mult , c="|", pivote:-1
sum_minus->sum_minus + div_mult , c="@", pivote:-1
sum_minus->sum_minus - div_mult , c="@", pivote:-1
sum_minus->div_mult , c="@", pivote:-1
sum_minus->sum_minus + div_mult , c="@@", pivote:-1
sum_minus->sum_minus - div_mult , c="@@", pivote:-1
sum_minus->div_mult , c="@@", pivote:-1
sum_minus->sum_minus + div_mult , c="+", pivote:-1
sum_minus->sum_minus - div_mult , c="+", pivote:-1
sum_minus->div_mult , c="+", pivote:-1
sum_minus->sum_minus + div_mult , c="-", pivote:-1
sum_minus->sum_minus - div_mult , c="-", pivote:-1
sum_minus->div_mult , c="-", pivote:-1
div_mult->div_mult * pow , c=";", pivote:-1
div_mult->div_mult / pow , c=";", pivote:-1
div_mult->pow , c=";", pivote:-1
div_mult->div_mult * pow , c="in", pivote:-1
div_mult->div_mult / pow , c="in", pivote:-1
div_mult->pow , c="in", pivote:-1
div_mult->div_mult * pow , c="==", pivote:-1
div_mult->div_mult / pow , c="==", pivote:-1
div_mult->pow , c="==", pivote:-1
div_mult->div_mult * pow , c=">=", pivote:-1
div_mult->div_mult / pow , c=">=", pivote:-1
div_mult->pow , c=">=", pivote:-1
div_mult->div_mult * pow , c="<=", pivote:-1
div_mult->div_mult / pow , c="<=", pivote:-1
div_mult->pow , c="<=", pivote:-1
div_mult->div_mult * pow , c="&", pivote:-1
div_mult->div_mult / pow , c="&", pivote:-1
div_mult->pow , c="&", pivote:-1
div_mult->div_mult * pow , c="|", pivote:-1
div_mult->div_mult / pow , c="|", pivote:-1
div_mult->pow , c="|", pivote:-1
div_mult->div_mult * pow , c="@", pivote:-1
div_mult->div_mult / pow , c="@", pivote:-1
div_mult->pow , c="@", pivote:-1
div_mult->div_mult * pow , c="@@", pivote:-1
div_mult->div_mult / pow , c="@@", pivote:-1
div_mult->pow , c="@@", pivote:-1
div_mult->div_mult * pow , c="+", pivote:-1
div_mult->div_mult / pow , c="+", pivote:-1
div_mult->pow , c="+", pivote:-1
div_mult->div_mult * pow , c="-", pivote:-1
div_mult->div_mult / pow , c="-", pivote:-1
div_mult->pow , c="-", pivote:-1
div_mult->div_mult * pow , c="*", pivote:-1
div_mult->div_mult / pow , c="*", pivote:-1
div_mult->pow , c="*", pivote:-1
div_mult->div_mult * pow , c="/", pivote:-1
div_mult->div_mult / pow , c="/", pivote:-1
div_mult->pow , c="/", pivote:-1
pow->pow ** atom , c=";", pivote:-1
pow->pow ^ atom , c=";", pivote:-1
pow->pow % atom , c=";", pivote:-1
pow->atom , c=";", pivote:-1
pow->pow ** atom , c="in", pivote:-1
pow->pow ^ atom , c="in", pivote:-1
pow->pow % atom , c="in", pivote:-1
pow->atom , c="in", pivote:-1
pow->pow ** atom , c="==", pivote:-1
pow->pow ^ atom , c="==", pivote:-1
pow->pow % atom , c="==", pivote:-1
pow->atom , c="==", pivote:-1
pow->pow ** atom , c=">=", pivote:-1
pow->pow ^ atom , c=">=", pivote:-1
pow->pow % atom , c=">=", pivote:-1
pow->atom , c=">=", pivote:-1
pow->pow ** atom , c="<=", pivote:-1
pow->pow ^ atom , c="<=", pivote:-1
pow->pow % atom , c="<=", pivote:-1
pow->atom , c="<=", pivote:-1
pow->pow ** atom , c="&", pivote:-1
pow->pow ^ atom , c="&", pivote:-1
pow->pow % atom , c="&", pivote:-1
pow->atom , c="&", pivote:-1
pow->pow ** atom , c="|", pivote:-1
pow->pow ^ atom , c="|", pivote:-1
pow->pow % atom , c="|", pivote:-1
pow->atom , c="|", pivote:-1
pow->pow ** atom , c="@", pivote:-1
pow->pow ^ atom , c="@", pivote:-1
pow->pow % atom , c="@", pivote:-1
pow->atom , c="@", pivote:-1
pow->pow ** atom , c="@@", pivote:-1
pow->pow ^ atom , c="@@", pivote:-1
pow->pow % atom , c="@@", pivote:-1
pow->atom , c="@@", pivote:-1
pow->pow ** atom , c="+", pivote:-1
pow->pow ^ atom , c="+", pivote:-1
pow->pow % atom , c="+", pivote:-1
pow->atom , c="+", pivote:-1
pow->pow ** atom , c="-", pivote:-1
pow->pow ^ atom , c="-", pivote:-1
pow->pow % atom , c="-", pivote:-1
pow->atom , c="-", pivote:-1
pow->pow ** atom , c="*", pivote:-1
pow->pow ^ atom , c="*", pivote:-1
pow->pow % atom , c="*", pivote:-1
pow->atom , c="*", pivote:-1
pow->pow ** atom , c="/", pivote:-1
pow->pow ^ atom , c="/", pivote:-1
pow->pow % atom , c="/", pivote:-1
pow->atom , c="/", pivote:-1
pow->pow ** atom , c="**", pivote:-1
pow->pow ^ atom , c="**", pivote:-1
pow->pow % atom , c="**", pivote:-1
pow->atom , c="**", pivote:-1
pow->pow ** atom , c="^", pivote:-1
pow->pow ^ atom , c="^", pivote:-1
pow->pow % atom , c="^", pivote:-1
pow->atom , c="^", pivote:-1
pow->pow ** atom , c="%", pivote:-1
pow->pow ^ atom , c="%", pivote:-1
pow->pow % atom , c="%", pivote:-1
pow->atom , c="%", pivote:-1
atom->label . label , c=";", pivote:-1
atom->label . call , c=";", pivote:-1
atom->call . call , c=";", pivote:-1
atom->call . label , c=";", pivote:-1
atom->label , c=";", pivote:-1
atom->( high_level ) , c=";", pivote:-1
atom->for param block , c=";", pivote:-1
atom->for param exp , c=";", pivote:-1
atom->for param high_level , c=";", pivote:-1
atom->protocol label block , c=";", pivote:-1
atom->protocol label extends label block , c=";", pivote:-1
atom->type label block , c=";", pivote:-1
atom->type label param block , c=";", pivote:-1
atom->type label inherits label block , c=";", pivote:-1
atom->type label param inherits label param block , c=";", pivote:-1
atom->function label param block , c=";", pivote:-1
atom->label param => block , c=";", pivote:-1
atom->while param block , c=";", pivote:-1
atom->while param high_level , c=";", pivote:-1
atom->if_high_level else_high_level , c=";", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=";", pivote:-1
atom->call , c=";", pivote:-1
atom->label . label , c="in", pivote:-1
atom->label . call , c="in", pivote:-1
atom->call . call , c="in", pivote:-1
atom->call . label , c="in", pivote:-1
atom->label , c="in", pivote:-1
atom->( high_level ) , c="in", pivote:-1
atom->for param block , c="in", pivote:-1
atom->for param exp , c="in", pivote:-1
atom->for param high_level , c="in", pivote:-1
atom->protocol label block , c="in", pivote:-1
atom->protocol label extends label block , c="in", pivote:-1
atom->type label block , c="in", pivote:-1
atom->type label param block , c="in", pivote:-1
atom->type label inherits label block , c="in", pivote:-1
atom->type label param inherits label param block , c="in", pivote:-1
atom->function label param block , c="in", pivote:-1
atom->label param => block , c="in", pivote:-1
atom->while param block , c="in", pivote:-1
atom->while param high_level , c="in", pivote:-1
atom->if_high_level else_high_level , c="in", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="in", pivote:-1
atom->call , c="in", pivote:-1
atom->label . label , c="==", pivote:-1
atom->label . call , c="==", pivote:-1
atom->call . call , c="==", pivote:-1
atom->call . label , c="==", pivote:-1
atom->label , c="==", pivote:-1
atom->( high_level ) , c="==", pivote:-1
atom->for param block , c="==", pivote:-1
atom->for param exp , c="==", pivote:-1
atom->for param high_level , c="==", pivote:-1
atom->protocol label block , c="==", pivote:-1
atom->protocol label extends label block , c="==", pivote:-1
atom->type label block , c="==", pivote:-1
atom->type label param block , c="==", pivote:-1
atom->type label inherits label block , c="==", pivote:-1
atom->type label param inherits label param block , c="==", pivote:-1
atom->function label param block , c="==", pivote:-1
atom->label param => block , c="==", pivote:-1
atom->while param block , c="==", pivote:-1
atom->while param high_level , c="==", pivote:-1
atom->if_high_level else_high_level , c="==", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="==", pivote:-1
atom->call , c="==", pivote:-1
atom->label . label , c=">=", pivote:-1
atom->label . call , c=">=", pivote:-1
atom->call . call , c=">=", pivote:-1
atom->call . label , c=">=", pivote:-1
atom->label , c=">=", pivote:-1
atom->( high_level ) , c=">=", pivote:-1
atom->for param block , c=">=", pivote:-1
atom->for param exp , c=">=", pivote:-1
atom->for param high_level , c=">=", pivote:-1
atom->protocol label block , c=">=", pivote:-1
atom->protocol label extends label block , c=">=", pivote:-1
atom->type label block , c=">=", pivote:-1
atom->type label param block , c=">=", pivote:-1
atom->type label inherits label block , c=">=", pivote:-1
atom->type label param inherits label param block , c=">=", pivote:-1
atom->function label param block , c=">=", pivote:-1
atom->label param => block , c=">=", pivote:-1
atom->while param block , c=">=", pivote:-1
atom->while param high_level , c=">=", pivote:-1
atom->if_high_level else_high_level , c=">=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c=">=", pivote:-1
atom->call , c=">=", pivote:-1
atom->label . label , c="<=", pivote:-1
atom->label . call , c="<=", pivote:-1
atom->call . call , c="<=", pivote:-1
atom->call . label , c="<=", pivote:-1
atom->label , c="<=", pivote:-1
atom->( high_level ) , c="<=", pivote:-1
atom->for param block , c="<=", pivote:-1
atom->for param exp , c="<=", pivote:-1
atom->for param high_level , c="<=", pivote:-1
atom->protocol label block , c="<=", pivote:-1
atom->protocol label extends label block , c="<=", pivote:-1
atom->type label block , c="<=", pivote:-1
atom->type label param block , c="<=", pivote:-1
atom->type label inherits label block , c="<=", pivote:-1
atom->type label param inherits label param block , c="<=", pivote:-1
atom->function label param block , c="<=", pivote:-1
atom->label param => block , c="<=", pivote:-1
atom->while param block , c="<=", pivote:-1
atom->while param high_level , c="<=", pivote:-1
atom->if_high_level else_high_level , c="<=", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="<=", pivote:-1
atom->call , c="<=", pivote:-1
atom->label . label , c="&", pivote:-1
atom->label . call , c="&", pivote:-1
atom->call . call , c="&", pivote:-1
atom->call . label , c="&", pivote:-1
atom->label , c="&", pivote:-1
atom->( high_level ) , c="&", pivote:-1
atom->for param block , c="&", pivote:-1
atom->for param exp , c="&", pivote:-1
atom->for param high_level , c="&", pivote:-1
atom->protocol label block , c="&", pivote:-1
atom->protocol label extends label block , c="&", pivote:-1
atom->type label block , c="&", pivote:-1
atom->type label param block , c="&", pivote:-1
atom->type label inherits label block , c="&", pivote:-1
atom->type label param inherits label param block , c="&", pivote:-1
atom->function label param block , c="&", pivote:-1
atom->label param => block , c="&", pivote:-1
atom->while param block , c="&", pivote:-1
atom->while param high_level , c="&", pivote:-1
atom->if_high_level else_high_level , c="&", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="&", pivote:-1
atom->call , c="&", pivote:-1
atom->label . label , c="|", pivote:-1
atom->label . call , c="|", pivote:-1
atom->call . call , c="|", pivote:-1
atom->call . label , c="|", pivote:-1
atom->label , c="|", pivote:-1
atom->( high_level ) , c="|", pivote:-1
atom->for param block , c="|", pivote:-1
atom->for param exp , c="|", pivote:-1
atom->for param high_level , c="|", pivote:-1
atom->protocol label block , c="|", pivote:-1
atom->protocol label extends label block , c="|", pivote:-1
atom->type label block , c="|", pivote:-1
atom->type label param block , c="|", pivote:-1
atom->type label inherits label block , c="|", pivote:-1
atom->type label param inherits label param block , c="|", pivote:-1
atom->function label param block , c="|", pivote:-1
atom->label param => block , c="|", pivote:-1
atom->while param block , c="|", pivote:-1
atom->while param high_level , c="|", pivote:-1
atom->if_high_level else_high_level , c="|", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="|", pivote:-1
atom->call , c="|", pivote:-1
atom->label . label , c="@", pivote:-1
atom->label . call , c="@", pivote:-1
atom->call . call , c="@", pivote:-1
atom->call . label , c="@", pivote:-1
atom->label , c="@", pivote:-1
atom->( high_level ) , c="@", pivote:-1
atom->for param block , c="@", pivote:-1
atom->for param exp , c="@", pivote:-1
atom->for param high_level , c="@", pivote:-1
atom->protocol label block , c="@", pivote:-1
atom->protocol label extends label block , c="@", pivote:-1
atom->type label block , c="@", pivote:-1
atom->type label param block , c="@", pivote:-1
atom->type label inherits label block , c="@", pivote:-1
atom->type label param inherits label param block , c="@", pivote:-1
atom->function label param block , c="@", pivote:-1
atom->label param => block , c="@", pivote:-1
atom->while param block , c="@", pivote:-1
atom->while param high_level , c="@", pivote:-1
atom->if_high_level else_high_level , c="@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@", pivote:-1
atom->call , c="@", pivote:-1
atom->label . label , c="@@", pivote:-1
atom->label . call , c="@@", pivote:-1
atom->call . call , c="@@", pivote:-1
atom->call . label , c="@@", pivote:-1
atom->label , c="@@", pivote:-1
atom->( high_level ) , c="@@", pivote:-1
atom->for param block , c="@@", pivote:-1
atom->for param exp , c="@@", pivote:-1
atom->for param high_level , c="@@", pivote:-1
atom->protocol label block , c="@@", pivote:-1
atom->protocol label extends label block , c="@@", pivote:-1
atom->type label block , c="@@", pivote:-1
atom->type label param block , c="@@", pivote:-1
atom->type label inherits label block , c="@@", pivote:-1
atom->type label param inherits label param block , c="@@", pivote:-1
atom->function label param block , c="@@", pivote:-1
atom->label param => block , c="@@", pivote:-1
atom->while param block , c="@@", pivote:-1
atom->while param high_level , c="@@", pivote:-1
atom->if_high_level else_high_level , c="@@", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="@@", pivote:-1
atom->call , c="@@", pivote:-1
atom->label . label , c="+", pivote:-1
atom->label . call , c="+", pivote:-1
atom->call . call , c="+", pivote:-1
atom->call . label , c="+", pivote:-1
atom->label , c="+", pivote:-1
atom->( high_level ) , c="+", pivote:-1
atom->for param block , c="+", pivote:-1
atom->for param exp , c="+", pivote:-1
atom->for param high_level , c="+", pivote:-1
atom->protocol label block , c="+", pivote:-1
atom->protocol label extends label block , c="+", pivote:-1
atom->type label block , c="+", pivote:-1
atom->type label param block , c="+", pivote:-1
atom->type label inherits label block , c="+", pivote:-1
atom->type label param inherits label param block , c="+", pivote:-1
atom->function label param block , c="+", pivote:-1
atom->label param => block , c="+", pivote:-1
atom->while param block , c="+", pivote:-1
atom->while param high_level , c="+", pivote:-1
atom->if_high_level else_high_level , c="+", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="+", pivote:-1
atom->call , c="+", pivote:-1
atom->label . label , c="-", pivote:-1
atom->label . call , c="-", pivote:-1
atom->call . call , c="-", pivote:-1
atom->call . label , c="-", pivote:-1
atom->label , c="-", pivote:-1
atom->( high_level ) , c="-", pivote:-1
atom->for param block , c="-", pivote:-1
atom->for param exp , c="-", pivote:-1
atom->for param high_level , c="-", pivote:-1
atom->protocol label block , c="-", pivote:-1
atom->protocol label extends label block , c="-", pivote:-1
atom->type label block , c="-", pivote:-1
atom->type label param block , c="-", pivote:-1
atom->type label inherits label block , c="-", pivote:-1
atom->type label param inherits label param block , c="-", pivote:-1
atom->function label param block , c="-", pivote:-1
atom->label param => block , c="-", pivote:-1
atom->while param block , c="-", pivote:-1
atom->while param high_level , c="-", pivote:-1
atom->if_high_level else_high_level , c="-", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="-", pivote:-1
atom->call , c="-", pivote:-1
atom->label . label , c="*", pivote:-1
atom->label . call , c="*", pivote:-1
atom->call . call , c="*", pivote:-1
atom->call . label , c="*", pivote:-1
atom->label , c="*", pivote:-1
atom->( high_level ) , c="*", pivote:-1
atom->for param block , c="*", pivote:-1
atom->for param exp , c="*", pivote:-1
atom->for param high_level , c="*", pivote:-1
atom->protocol label block , c="*", pivote:-1
atom->protocol label extends label block , c="*", pivote:-1
atom->type label block , c="*", pivote:-1
atom->type label param block , c="*", pivote:-1
atom->type label inherits label block , c="*", pivote:-1
atom->type label param inherits label param block , c="*", pivote:-1
atom->function label param block , c="*", pivote:-1
atom->label param => block , c="*", pivote:-1
atom->while param block , c="*", pivote:-1
atom->while param high_level , c="*", pivote:-1
atom->if_high_level else_high_level , c="*", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="*", pivote:-1
atom->call , c="*", pivote:-1
atom->label . label , c="/", pivote:-1
atom->label . call , c="/", pivote:-1
atom->call . call , c="/", pivote:-1
atom->call . label , c="/", pivote:-1
atom->label , c="/", pivote:-1
atom->( high_level ) , c="/", pivote:-1
atom->for param block , c="/", pivote:-1
atom->for param exp , c="/", pivote:-1
atom->for param high_level , c="/", pivote:-1
atom->protocol label block , c="/", pivote:-1
atom->protocol label extends label block , c="/", pivote:-1
atom->type label block , c="/", pivote:-1
atom->type label param block , c="/", pivote:-1
atom->type label inherits label block , c="/", pivote:-1
atom->type label param inherits label param block , c="/", pivote:-1
atom->function label param block , c="/", pivote:-1
atom->label param => block , c="/", pivote:-1
atom->while param block , c="/", pivote:-1
atom->while param high_level , c="/", pivote:-1
atom->if_high_level else_high_level , c="/", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="/", pivote:-1
atom->call , c="/", pivote:-1
atom->label . label , c="**", pivote:-1
atom->label . call , c="**", pivote:-1
atom->call . call , c="**", pivote:-1
atom->call . label , c="**", pivote:-1
atom->label , c="**", pivote:-1
atom->( high_level ) , c="**", pivote:-1
atom->for param block , c="**", pivote:-1
atom->for param exp , c="**", pivote:-1
atom->for param high_level , c="**", pivote:-1
atom->protocol label block , c="**", pivote:-1
atom->protocol label extends label block , c="**", pivote:-1
atom->type label block , c="**", pivote:-1
atom->type label param block , c="**", pivote:-1
atom->type label inherits label block , c="**", pivote:-1
atom->type label param inherits label param block , c="**", pivote:-1
atom->function label param block , c="**", pivote:-1
atom->label param => block , c="**", pivote:-1
atom->while param block , c="**", pivote:-1
atom->while param high_level , c="**", pivote:-1
atom->if_high_level else_high_level , c="**", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="**", pivote:-1
atom->call , c="**", pivote:-1
atom->label . label , c="^", pivote:-1
atom->label . call , c="^", pivote:-1
atom->call . call , c="^", pivote:-1
atom->call . label , c="^", pivote:-1
atom->label , c="^", pivote:-1
atom->( high_level ) , c="^", pivote:-1
atom->for param block , c="^", pivote:-1
atom->for param exp , c="^", pivote:-1
atom->for param high_level , c="^", pivote:-1
atom->protocol label block , c="^", pivote:-1
atom->protocol label extends label block , c="^", pivote:-1
atom->type label block , c="^", pivote:-1
atom->type label param block , c="^", pivote:-1
atom->type label inherits label block , c="^", pivote:-1
atom->type label param inherits label param block , c="^", pivote:-1
atom->function label param block , c="^", pivote:-1
atom->label param => block , c="^", pivote:-1
atom->while param block , c="^", pivote:-1
atom->while param high_level , c="^", pivote:-1
atom->if_high_level else_high_level , c="^", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="^", pivote:-1
atom->call , c="^", pivote:-1
atom->label . label , c="%", pivote:-1
atom->label . call , c="%", pivote:-1
atom->call . call , c="%", pivote:-1
atom->call . label , c="%", pivote:-1
atom->label , c="%", pivote:-1
atom->( high_level ) , c="%", pivote:-1
atom->for param block , c="%", pivote:-1
atom->for param exp , c="%", pivote:-1
atom->for param high_level , c="%", pivote:-1
atom->protocol label block , c="%", pivote:-1
atom->protocol label extends label block , c="%", pivote:-1
atom->type label block , c="%", pivote:-1
atom->type label param block , c="%", pivote:-1
atom->type label inherits label block , c="%", pivote:-1
atom->type label param inherits label param block , c="%", pivote:-1
atom->function label param block , c="%", pivote:-1
atom->label param => block , c="%", pivote:-1
atom->while param block , c="%", pivote:-1
atom->while param high_level , c="%", pivote:-1
atom->if_high_level else_high_level , c="%", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="%", pivote:-1
atom->call , c="%", pivote:-1
label->int , c=".", pivote:-1
call->label param , c=".", pivote:-1
label->int , c=";", pivote:-1
if_high_level->if param high_level , c="else", pivote:-1
if_high_level->if param high_level , c="elif", pivote:-1
call->label param , c=";", pivote:-1
label->int , c="in", pivote:-1
call->label param , c="in", pivote:-1
label->int , c="==", pivote:-1
call->label param , c="==", pivote:-1
label->int , c=">=", pivote:-1
call->label param , c=">=", pivote:-1
label->int , c="<=", pivote:-1
call->label param , c="<=", pivote:-1
label->int , c="&", pivote:-1
call->label param , c="&", pivote:-1
label->int , c="|", pivote:-1
call->label param , c="|", pivote:-1
label->int , c="@", pivote:-1
call->label param , c="@", pivote:-1
label->int , c="@@", pivote:-1
call->label param , c="@@", pivote:-1
label->int , c="+", pivote:-1
call->label param , c="+", pivote:-1
label->int , c="-", pivote:-1
call->label param , c="-", pivote:-1
label->int , c="*", pivote:-1
call->label param , c="*", pivote:-1
label->int , c="/", pivote:-1
call->label param , c="/", pivote:-1
label->int , c="**", pivote:-1
call->label param , c="**", pivote:-1
label->int , c="^", pivote:-1
call->label param , c="^", pivote:-1
label->int , c="%", pivote:-1
call->label param , c="%", pivote:-1
if_exp->if param block , c="else", pivote:1
block->{ exp , c="else", pivote:-1
block->block block , c="else", pivote:-1
block->block exp , c="else", pivote:-1
block->block } , c="else", pivote:-1
block->{ } , c="else", pivote:-1
block->{ exp , c="{", pivote:-1
block->block block , c="{", pivote:-1
block->block exp , c="{", pivote:-1
block->block } , c="{", pivote:-1
block->{ } , c="{", pivote:-1
block->{ exp , c="int", pivote:-1
block->{ exp , c="(", pivote:-1
block->{ exp , c="for", pivote:-1
block->{ exp , c="protocol", pivote:-1
block->{ exp , c="type", pivote:-1
block->{ exp , c="function", pivote:-1
block->{ exp , c="while", pivote:-1
block->{ exp , c="if", pivote:-1
block->{ exp , c="!", pivote:-1
block->{ exp , c="let", pivote:-1
block->{ exp , c="new", pivote:-1
block->block block , c="int", pivote:-1
block->block block , c="(", pivote:-1
block->block block , c="for", pivote:-1
block->block block , c="protocol", pivote:-1
block->block block , c="type", pivote:-1
block->block block , c="function", pivote:-1
block->block block , c="while", pivote:-1
block->block block , c="if", pivote:-1
block->block block , c="!", pivote:-1
block->block block , c="let", pivote:-1
block->block block , c="new", pivote:-1
block->block exp , c="int", pivote:-1
block->block exp , c="(", pivote:-1
block->block exp , c="for", pivote:-1
block->block exp , c="protocol", pivote:-1
block->block exp , c="type", pivote:-1
block->block exp , c="function", pivote:-1
block->block exp , c="while", pivote:-1
block->block exp , c="if", pivote:-1
block->block exp , c="!", pivote:-1
block->block exp , c="let", pivote:-1
block->block exp , c="new", pivote:-1
block->block } , c="int", pivote:-1
block->block } , c="(", pivote:-1
block->block } , c="for", pivote:-1
block->block } , c="protocol", pivote:-1
block->block } , c="type", pivote:-1
block->block } , c="function", pivote:-1
block->block } , c="while", pivote:-1
block->block } , c="if", pivote:-1
block->block } , c="!", pivote:-1
block->block } , c="let", pivote:-1
block->block } , c="new", pivote:-1
block->{ } , c="int", pivote:-1
block->{ } , c="(", pivote:-1
block->{ } , c="for", pivote:-1
block->{ } , c="protocol", pivote:-1
block->{ } , c="type", pivote:-1
block->{ } , c="function", pivote:-1
block->{ } , c="while", pivote:-1
block->{ } , c="if", pivote:-1
block->{ } , c="!", pivote:-1
block->{ } , c="let", pivote:-1
block->{ } , c="new", pivote:-1
block->{ exp , c="}", pivote:-1
block->block block , c="}", pivote:-1
block->block exp , c="}", pivote:-1
block->block } , c="}", pivote:-1
block->{ } , c="}", pivote:-1
if_exp->if param exp , c="elif", pivote:1
exp->high_level ; , c="elif", pivote:-1
exp->high_level in exp , c="elif", pivote:-1
exp->param in exp , c="elif", pivote:-1
exp->function label param exp , c="elif", pivote:-1
exp->label param => exp , c="elif", pivote:-1
exp->while param exp , c="elif", pivote:-1
exp->if_exp else_exp , c="elif", pivote:-1
exp->if_exp elif_exp else_exp , c="elif", pivote:-1
if_exp->if param block , c="elif", pivote:1
block->{ exp , c="elif", pivote:-1
block->block block , c="elif", pivote:-1
block->block exp , c="elif", pivote:-1
block->block } , c="elif", pivote:-1
block->{ } , c="elif", pivote:-1
if_high_level->if param high_level , c="else", pivote:1
high_level->bool , c="else", pivote:-1
high_level->label = high_level , c="else", pivote:-1
high_level->var_declaration = high_level , c="else", pivote:-1
high_level->label := high_level , c="else", pivote:-1
high_level->param in high_level , c="else", pivote:-1
high_level->high_level in high_level , c="else", pivote:-1
high_level->high_level in block , c="else", pivote:-1
high_level->function label param high_level , c="else", pivote:-1
high_level->label param => high_level , c="else", pivote:-1
high_level->new call , c="else", pivote:-1
high_level->label ++ , c="else", pivote:-1
high_level->label -- , c="else", pivote:-1
bool->bool == concatenation , c="else", pivote:-1
bool->bool >= concatenation , c="else", pivote:-1
bool->bool <= concatenation , c="else", pivote:-1
bool->bool & concatenation , c="else", pivote:-1
bool->bool | concatenation , c="else", pivote:-1
bool->concatenation , c="else", pivote:-1
bool->! bool , c="else", pivote:-1
concatenation->concatenation @ sum_minus , c="else", pivote:-1
concatenation->concatenation @@ sum_minus , c="else", pivote:-1
concatenation->sum_minus , c="else", pivote:-1
sum_minus->sum_minus + div_mult , c="else", pivote:-1
sum_minus->sum_minus - div_mult , c="else", pivote:-1
sum_minus->div_mult , c="else", pivote:-1
div_mult->div_mult * pow , c="else", pivote:-1
div_mult->div_mult / pow , c="else", pivote:-1
div_mult->pow , c="else", pivote:-1
pow->pow ** atom , c="else", pivote:-1
pow->pow ^ atom , c="else", pivote:-1
pow->pow % atom , c="else", pivote:-1
pow->atom , c="else", pivote:-1
atom->label . label , c="else", pivote:-1
atom->label . call , c="else", pivote:-1
atom->call . call , c="else", pivote:-1
atom->call . label , c="else", pivote:-1
atom->label , c="else", pivote:-1
atom->( high_level ) , c="else", pivote:-1
atom->for param block , c="else", pivote:-1
atom->for param exp , c="else", pivote:-1
atom->for param high_level , c="else", pivote:-1
atom->protocol label block , c="else", pivote:-1
atom->protocol label extends label block , c="else", pivote:-1
atom->type label block , c="else", pivote:-1
atom->type label param block , c="else", pivote:-1
atom->type label inherits label block , c="else", pivote:-1
atom->type label param inherits label param block , c="else", pivote:-1
atom->function label param block , c="else", pivote:-1
atom->label param => block , c="else", pivote:-1
atom->while param block , c="else", pivote:-1
atom->while param high_level , c="else", pivote:-1
atom->if_high_level else_high_level , c="else", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="else", pivote:-1
atom->call , c="else", pivote:-1
label->int , c="else", pivote:-1
call->label param , c="else", pivote:-1
if_high_level->if param high_level , c="elif", pivote:1
high_level->bool , c="elif", pivote:-1
high_level->label = high_level , c="elif", pivote:-1
high_level->var_declaration = high_level , c="elif", pivote:-1
high_level->label := high_level , c="elif", pivote:-1
high_level->param in high_level , c="elif", pivote:-1
high_level->high_level in high_level , c="elif", pivote:-1
high_level->high_level in block , c="elif", pivote:-1
high_level->function label param high_level , c="elif", pivote:-1
high_level->label param => high_level , c="elif", pivote:-1
high_level->new call , c="elif", pivote:-1
high_level->label ++ , c="elif", pivote:-1
high_level->label -- , c="elif", pivote:-1
bool->bool == concatenation , c="elif", pivote:-1
bool->bool >= concatenation , c="elif", pivote:-1
bool->bool <= concatenation , c="elif", pivote:-1
bool->bool & concatenation , c="elif", pivote:-1
bool->bool | concatenation , c="elif", pivote:-1
bool->concatenation , c="elif", pivote:-1
bool->! bool , c="elif", pivote:-1
concatenation->concatenation @ sum_minus , c="elif", pivote:-1
concatenation->concatenation @@ sum_minus , c="elif", pivote:-1
concatenation->sum_minus , c="elif", pivote:-1
sum_minus->sum_minus + div_mult , c="elif", pivote:-1
sum_minus->sum_minus - div_mult , c="elif", pivote:-1
sum_minus->div_mult , c="elif", pivote:-1
div_mult->div_mult * pow , c="elif", pivote:-1
div_mult->div_mult / pow , c="elif", pivote:-1
div_mult->pow , c="elif", pivote:-1
pow->pow ** atom , c="elif", pivote:-1
pow->pow ^ atom , c="elif", pivote:-1
pow->pow % atom , c="elif", pivote:-1
pow->atom , c="elif", pivote:-1
atom->label . label , c="elif", pivote:-1
atom->label . call , c="elif", pivote:-1
atom->call . call , c="elif", pivote:-1
atom->call . label , c="elif", pivote:-1
atom->label , c="elif", pivote:-1
atom->( high_level ) , c="elif", pivote:-1
atom->for param block , c="elif", pivote:-1
atom->for param exp , c="elif", pivote:-1
atom->for param high_level , c="elif", pivote:-1
atom->protocol label block , c="elif", pivote:-1
atom->protocol label extends label block , c="elif", pivote:-1
atom->type label block , c="elif", pivote:-1
atom->type label param block , c="elif", pivote:-1
atom->type label inherits label block , c="elif", pivote:-1
atom->type label param inherits label param block , c="elif", pivote:-1
atom->function label param block , c="elif", pivote:-1
atom->label param => block , c="elif", pivote:-1
atom->while param block , c="elif", pivote:-1
atom->while param high_level , c="elif", pivote:-1
atom->if_high_level else_high_level , c="elif", pivote:-1
atom->if_high_level elif_high_level else_high_level , c="elif", pivote:-1
atom->call , c="elif", pivote:-1
label->int , c="elif", pivote:-1
call->label param , c="elif", pivote:-1
 }