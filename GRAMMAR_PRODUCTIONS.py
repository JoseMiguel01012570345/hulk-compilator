
function_caLL = [
    ["F",[ ["c","P"] , ["c","N" ] , ["c","T"] ] ],
    ["P",[["(","p",")"]]],
    ["T",[["F"]],],
    ["N",[["(",")"]]],
]

strings = [
    ["T", [ ["T","@","T"] ,["F","@","T"], ["T","@@","T"] , ["F","@@","T"]] ],
    ["E", [["T","@","E"] ,["F","@","E"],["T","@@","E"] , ["F","@@","E"] ] ],
    
    ["T", [ ["b","@","T"] ,["b","@","T"], ["b","@@","T"] , ["b","@@","T"]] ],
    ["E", [["b","@","E"] ,["b","@","E"],["b","@@","E"] , ["b","@@","E"] ] ],
    ["E", [["b","@","b"] ,["T","@","b"],["T","@@","b"] ] ]
]

expression_block = [
    ["O",[["E","E"], ["T","$2","O"] ,["O","E"],["O","B"],["O","$2","b"],["b","$2","E"],["M","E"],["E","M"],["O","M"],["M","O"]]],
    ['O',[["E","$2","M"],['M','$2','O']]],
    ["O",[["O","$2","E"],["E","$2","b"] , ["E","$2","O"],["O","$2"] , ["O",";"],["E","$2","E"],["b","$2","b"],[ 'O', '$2', 'M']]],
    ["b",[["{","O","}"],["{","E","}"],["{","B","}"],["{","}"],["b","$2"],["{","b","}"],["{","T","}"]]],
    ["B",[["b",";"]]],
    ["T",[["T","$2"]]],
    ["E",[["E","$2"],["B"]]],
    ["E",[["$2",";","$3"],["E",";"]]],
    ["O",[["M","$2"],["M","$2","M"],["M",";"],["M","M"]]],
    ["b",[["{","M","}"],]],
    
    ["E" , [["T",";"]]],
    ["T",  [["T" ,".","E"] , ["F" ,".","E"], ["T" ,".","T"] , ["F" ,".","T"] ]],
    ["E",  [["T" ,".","E"] ]],
    ["T",  [["b" ,".","E"] , ["b" ,".","E"], ["b" ,".","T"] , ["b" ,".","T"] ]],
    ["E",  [["b" ,".","E"] ]],
    ["T",  [["b" ,".","b"] , ["b" ,".","b"], ["b" ,".","b"] , ["b" ,".","b"] ]],
    ["E",  [["b" ,".","b"] ]],
    ["T",  [["T" ,".","b"] , ["T" ,".","b"], ["T" ,".","b"] , ["T" ,".","b"] ]],
    ["E",  [["T" ,".","b"] ]]
]

literals = [

<<<<<<< HEAD
    ["T" , [ ["let","T"] , ["T",":","T"]]],
    ["E" , [ ["let","E"] , ["T",":","E"]]],
    ["p" , [ ["T", ",","$2" ,"T" ] , ["T",",","$2","p"],['M',',','$2','M'] ,
            ['M',',','$2','T'] , ['T',',','$2','M'] ,['M',',','$2','p'],['p',',','$2','T']]],
    ["p" , [ ["E", ",","$2" ,"E" ] , ["E",",","$2","p"],['E',',','$2','M'] , ['M',',','$2','E'],
            ['E',',','$2','T'] , ['T',',','$2','E'],['p',',','$2','E']]],
    ["p" , [ ["b", ",","$2" ,"E" ] , ["b",",","$2","p"],['b',',','$2','M'] , ['M',',','$2','b'],
            ['E',',','$2','b'] , ['T',',','$2','b'],['b',',','$2','T'],['p',',','$2','b']]],
    ["T" , [ ["T",":=","T"] ]],
    ["T" , [ ["T",":=","b"] ]],
    ["E" , [ ["T",":=","E"] ]],
    ["T" , [ ["T","=","T"]  ]],
    ["T" , [ ["T","=","b"]  ]],
    ["E" , [  ["T","=","E"] ]],
    ["T" , [ ["T","as","T"] , ["F","as","T"] , ["T","as","E"] ]],
    ["E" , [ ["T","as","E"] ]],
    ["E", [["T",";","$2"]]],
    ["T", [["(","T",")"]]],
=======
#     [ "",[ [] , [] ] ]

# ]

# booleans = [
    
#     [ "",[ [] , [] ] ]
# ]

# IN = [
    
#     [ "",[ [] , [] ] ]
       
# ]

# For = [
    
#     [ "",[ [] , [] ] ]  
    
# ]

# conditional = [
    
#     [ "",[ [] , [] ] ]
    
# ]

# While = [
    
#     [ "",[ [] , [] ] ]
# ]

# function = [    
 
#     [ "",[ [] , [] ] ]
# ]

# types = [
    
#     [ "",[ [] , [] ] ]
# ]

# protocols = [

#     [ "",[ [] , [] ] ]
    
# ]

# vector = [
    
#     [ "",[ [] , [] ] ]
# ]

numbers = [
    
    ["E",["E","+","T"]],
    ["E",["E","-","T"]],
    ["E",["T"]],
    
<<<<<<< HEAD
    # sum
<<<<<<< HEAD
    ["E" , [ "A", "+" , "A" ]],
    ["A" , [ "i" , "+" , "i" ]],
    ["A" , [ "A" , "+" , "i" ]],
    
    # # backets
    
    # ["E" , [ "(" , "A" , ")" ]],
    
    # ["E",["A"]]

    ["E",["(","E",")"]],
<<<<<<< HEAD
    ["E",["(","i",")"]],
>>>>>>> 9c513df (parser bug fixed at repeated states)
=======
    ["E",["(","A",")"]],
>>>>>>> 31c5d2d (moving out verbose info)

=======
    ["E" , [ "A" ]],
    ["E",["(","A",")"]],
    ["A",["(","A",")"]],
    ["A",["A","+","E"]],
    ["E",["A","*","E"]],
    ["A",["i"]],
=======
    ["T",["T","*","F"]],
    ["T",["T","/","F"]],
    ["T",["F"]],
    
    ["F",["(","E",")"]],
    ["F",["i"]]
>>>>>>> 4ea3226 (another fix to the parser, chose the first reduction)
    
<<<<<<< HEAD
>>>>>>> a54ff54 (first grammar made)
=======
    # ["E",["A","X","=","X"]],
    # ["A",["let"]],
    # ["X",["i"]],
    
>>>>>>> 20b2c73 (perfect)
]

booleans = [
    
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    ["T" , [["T","&","T"] , ["F","&","T"] ,  ["T","|","T"]  , ["F","|","T"]  , ["T","!=","T"] , ["F","!=","T"] , 
            ["T",">","T"] , ["F",">","T"]  , ["T","<","T"]  , ["F","<","T"]  , ["T","<=","T"] , ["F","<=","T"] ,
            ["T",">=","T"] ,["F",">=","T"] , ["T","==","T"] , ["F","==","T"] , 
            ["T","is","T"] , ["F","is","T"] ,['!','T'] ,      ['!','F']]],
    
    ["T" , [["b","&","T"] , ["b","&","T"] ,  ["b","|","T"]  , ["b","!=","T"] ,
            ["b",">","T"] , ["b",">","T"]  , ["b","<","T"]  , ["b","<=","T"],
            ["b",">=","T"] ,["b",">=","T"] , ["b","==","T"] , 
            ["b","is","T"] , ["b","is","T"] ,['!','b'] ]],
    
    ["E" , [["T","&","b"]  , ["T","|","b"]  , ["T","!=","b"] ,
            ["T",">","b"]  , ["T","<","b"]  , ["T","<=","b"] ,
            ["T",">=","b"] , ["T","==","b"] , 
            ["T","is","b"] ]],
    
    ["T" , [["b","&","b"] , ["b","&","b"] ,  ["b","|","b"]  , ["b","!=","b"] ,
            ["b",">","b"] , ["b",">","b"]  , ["b","<","b"]  , ["b","<=","b"],
            ["b",">=","b"] ,["b",">=","b"] , ["b","==","b"] , 
            ["b","is","b"] , ["b","is","b"] ,['!','b'] ]],
    
    ["E" , [["b","&","E"]  , ["b","|","E"]  , ["b","!=","E"] ,
            ["b",">","E"]  , ["b","<","E"]  , ["b","<=","E"] ,
            ["b",">=","E"] , ["b","==","E"] , 
            ["b","is","E"] ]],
    
    ["E" , [["T","&","E"]  , ["T","|","E"]  , ["T","!=","E"] ,
            ["T",">","E"]  , ["T","<","E"]  , ["T","<=","E"] ,
            ["T",">=","E"] , ["T","==","E"] , 
            ["T","is","E"] ]],
=======
        "T",
=======
        "A",
>>>>>>> 31c5d2d (moving out verbose info)
        "E",
                            
>>>>>>> 9c513df (parser bug fixed at repeated states)
=======
        "E",
        "F",
        "T",
        # "A",
        # "X"
                           
>>>>>>> 4ea3226 (another fix to the parser, chose the first reduction)
]

<<<<<<< HEAD
numbers = [
    
    ["T" , [["T","+","T"] , ["T","+","T"] , ["T","-","T"],[ "T","*","T"], ["T","/","T"],["T","/","T"], ["T","^","T"], ["T","%","T"],["T","**","T"]]],
    ["T" , [["T","$2","+","T"] , ["T","$2","+","T"] , ["T","$2","-","T"],[ "T","$2","*","T"], ["T","$2","/","T"],["T","$2","/","T"], ["T","$2","^","T"], ["T","$2","%","T"],["T","$2","**","T"]]],
    ["E" , [["T","$2","+","E"] , ["T","$2","+","E"] , ["T","$2","-","E"],[ "T","$2","*","E"], ["T","$2","/","E"],["T","$2","/","E"], ["T","$2","^","E"], ["T","$2","%","E"],["T","$2","**","E"]]],
    ["E" , [["T","+","E"], ["F"+"E"],["T","-","E"],[ "T","*","E"], ["T","/","E"],["T","/","E"], ["T","^","E"], ["T","E"]]],
    ["T" , [ ["T","-=","T"] ,["T","+=","T"] ,["T","/=","T"] ,["T","*=","T"] , ["T","--"]  , ["T","++"]]],
    ["E" , [ ["T","-=","E"] ,["T","+=","E"] ,["T","/=","E"] ,["T","*=","E"] , ["E","--"] , ["E","++"],["E","**"],["E","**","E"]]],
    
    ["T" , [["b","+","T"] , ["b","+","T"] , ["b","-","T"],[ "b","*","T"], ["b","/","T"], ["b","^","T"], ["b","%","T"],["b","**","T"]]],
    ["T" , [["b","$2","+","T"] , ["b","$2","+","T"] , ["b","$2","-","T"],[ "b","$2","*","T"], ["b","$2","/","T"],["b","$2","/","T"], ["b","$2","^","T"], ["b","$2","%","T"],["b","$2","**","T"]]],
    ["E" , [["b","$2","+","E"] , ["b","$2","+","E"] , ["b","$2","-","E"],[ "b","$2","*","E"], ["b","$2","/","E"],["b","$2","/","E"], ["b","$2","^","E"], ["b","$2","%","E"],["b","$2","**","E"]]],
    ["E" , [["b","+","E"], ["F"+"E"],["b","-","E"],[ "b","*","E"], ["b","/","E"],["b","/","E"], ["b","^","E"]]],

<<<<<<< HEAD
]
=======
=======
terminals= [
            
            # "let",       
            "+",
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            "-",
>>>>>>> 31c5d2d (moving out verbose info)
=======
            
>>>>>>> a54ff54 (first grammar made)
=======
            "*",
>>>>>>> 5798f64 (another fix to the parser)
=======
            "%",
=======
>>>>>>> 20b2c73 (perfect)
            "-",
            "*",
            "/",
>>>>>>> 4ea3226 (another fix to the parser, chose the first reduction)
            "i" ,
            # "=" ,
            "(" ,
            ")" ,
            "$" , 
            
        ]
>>>>>>> 9c513df (parser bug fixed at repeated states)

IN = [
    
    ["p",[["p","$2"]]],
    ["T", [["T","in","T"] ,["T","$2","in","T"],["p","$2","in","T"],["p","$2","in","p"], ["p","in","T"] , ["p","in","p"]]],
    ["T", [["T","$2"]]],
    ["E", [["T","in","E"], ["T","$2","in","E"] ,["T","in","b"],["T","$2","in","b"] ,["p","$2","in","E"] ,["p","in","E"],["p","in","b"],["p","$2","in","b"]]],
       
]

For = [
    
    ["E" , [["for","T","$2","B"] , ["for","T","$2","E"], ["for","T","E"]]],
    ["E", [ ["for","T","$2","b"]]],
]

conditional = [
    
    ["if",[["if","T","$2","E"],["if","T","$2","b"],["if","T","$2","B"],["if","$2"],['if', 'T', '$2', 'T',]]],
    ["elif",[["if","elif","T","$2","E"],["if","elif","T","$2","b"],["if","elif","T","$2","B"],["elif","$2"],['if','elif', 'T', '$2', 'T',]]],
    ["E",[["if","else","E"],["if","else","b"],["if","else","B"]]],
    ["E",[["elif","else","E"],["elif","else","b"],["elif","else","B"]]],
    ["T",[["elif","else","T"],['if', 'else', 'T']]],
    
]

While = [
    
    ["E" , [["while","T","$2","B"] , ["while","T","$2","E"],["while","T","E"]]],
    ["E", [ ["while","T","$2","b"]]],
]

function = [    
 
    ["M" , [ ["function","T","$2","=>","$2","E"] , ["function","T",":","T" ,"=>","$2","E"] 
            ,["function","T","$2","=>","$2","b"] ,["function","T",":","T","=>","$2","b"] ,
             [ 'function', 'T', ':', 'T', 'b'],['function', 'T', '$2', 'b', ],['function', 'T', '$2' ,'E', ],
             ['T','$2' , '=>', '$2', 'E'],['T', ':' , 'T' , '=>', '$2', 'E'],
             ['T', ':', 'E'],['T', ':', 'T', 'b'],
            ]],
]

types = [
    ["M", [["type","T","$2","b"  ], ["type","T","$2","inherits","T","$2","b"],
           ["type","T","b"] , ['type', 'T', 'inherits', 'T', 'b']  ]],
    ["T" , [ ["new","F"] ]],
]

protocols = [
    ["M" , [["protocol","T","$2","b"] ,[ "protocol","T","$2","extends","T","$2","b"],['protocol', 'T', 'b',],['protocol', 'T', 'extends', 'T', 'b',]]]
    
]

vector = [
    
    ["T" , [[ "[","T","||","T" , "]"] , [ "[" , "p" , "]" ] , ["T","[" , "T" , "]" ]  ]],
]

gramar =[ vector , protocols , types , function , While , conditional , 
         For , IN , numbers , booleans , literals , expression_block , 
         strings , function_caLL
        ]