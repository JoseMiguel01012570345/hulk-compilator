<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
10+20*(4+e);
=======
let a: number = 10 as Hola in print(Hola);
=======
let a: number = 10.5 as Hola in print(Hola);
>>>>>>> 849d64d (translator moved from GrammarParser)
for (let i = 0; i < 100; i++){
    if a_b is 100e+300 "hello";
    else (ala & true);
<<<<<<< HEAD
}
>>>>>>> cbcf627 (first commit)
=======
    X(5);
}
>>>>>>> e754a75 (ambiguiti on function deleted)
=======
a *= 10
>>>>>>> 6da4297 (translator moved from GrammarParser)
=======
let 7x) = 10
=======
>>>>>>> 282f827 (many fixes added to gramatic for it to be count)
=======
A(X)
>>>>>>> 6f9c51e (gramar modified)
=======
A(X);
>>>>>>> 8380a4e (grammar tokenikezed)

5 == 5
=======
let  5a = 5
>>>>>>> 49a3f4f (grammar modified extensifly)

>>>>>>> 7e27204 (adding lookahead)
=======
( A(4) + B(5) + new (a())) ;
>>>>>>> b8678ef (parser almost finished)
=======
c((a)) + b;
>>>>>>> 2fa0417 (many marges)
=======
[]
>>>>>>> 036b011 (lexer error fixed)
=======
a(3,4,5);
>>>>>>> f002039 (F added to productions)
=======

<<<<<<< HEAD
    E/{q;};
>>>>>>> cd17c65 (fixes to blocks)
=======
    {q;}/{q;};
>>>>>>> 076a9a4 (block operation allowed)
=======
if (T) {
    
    3;
    
}
elif R {

}

>>>>>>> 882c73d (for , block , if else ,elif done)
=======
>>>>>>> 2694bab (in completed)
=======
print("The message is "Hello World");
>>>>>>> ec75ad0 (types, while, function already done)
=======
{
    42;
print(42);
print((((1 + 2) ^ 3) * 4) / 5)
print("Hello World");
print("The message is Hello World");
print("The meaning of life is " @ 42);
print(sin(2 * PI) ^ 2 + cos(3 * PI / log(4, 64)));
{ print(42); print(sin(PI/2)); print("Hello World");}
function tan(x) => sin(x) / cos(x);
function cot(x) => 1 / tan(x);function tan(x) => sin(x) / cos(x);print(tan(PI) ** 2 + cot(PI) ** 2);
function operate(x, y) { print(x + y);print(x - y);print(x * y);print(x / y);}
let msg = "Hello World" in print(msg);
let number = 42, text = "The meaning of life is" in print(text @ number);
let number = 42 in let text = "The meaning of life is" in print(text @ number);
let number = 42 in ( let text = "The meaning of life is" in ( print(text @ number)));
let a = 6, b = a * 7 in print(b);
let a = 6 in let b = a * 7 in print(b);
let a = 5, b = 10, c = 20 in { print(a+b); print(b*c); print(c/a);}
let a = (let b = 6 in b * 7) in print(a);
print(let b = 6 in b * 7);
let a = 20 in { let a = 42 in print(a); print(a);}
let a = 7, a = 7 * 6 in print(a);
let a = 7 in let a = 7 * 6 in print(a);
let a = 0 in {print(a);a := 1;print(a);}
let a = 0 in let b = a := 1 in { print(a);print(b);};
let a = 42 in if (a % 2 == 0) print("Even") else print("odd");
let a = 42 in print(if (a % 2 == 0) "even" else "odd");
let a = 42 in if (a % 2 == 0) {print(a);print("Even");}else print("Odd");
let a = 42, let mod = a % 3 in print( if (mod == 0) "Magic" elif (mod % 3 == 1) "Woke" else "Dumb");
let a = 10 in while (a >= 0) {print(a);a := a - 1;}
gcd(a, b) => while (a > 0) let m = a % b in {b := a;a := m;};
for (x in range(0, 10)) print(x);
let iterable = range(0, 10) in while (iterable.next())let x = iterable.current() inprint(x);
type Point { x = 0; y = 0; getX() => self.x; getY() => self.y; setX(x) => self.x := x; setY(y) => self.y := y; }
let pt = new Point() in print("x: " @ pt.getX() @ "; y: " @ pt.getY());
let pt = new Point(3,4) in print("x: " @ pt.getX() @ "; y: " @ pt.getY());
let pt = new PolarPoint(3,4) in print("rho: " @ pt.rho());
type PolarPoint(phi, rho) inherits Point(rho * sin(phi), rho * cos(phi)) { }
type PolarPoint inherits Point {rho() => sqrt(self.getX() ^ 2 + self.getY() ^ 2);}

type Person(firstname, lastname) {firstname = firstname;lastname = lastname;name() => self.firstname @@ self.lastname;}
type Knight inherits Person { name() => "Sir" @@ base();} let p = new Knight("Phil", "Collins") in print(p.name());
let x: Number = 42 in print(x);
function tan(x: Number): Number => sin(x) / cos(x);
type Point(x: Number, y: Number) {   x: Number = x; y: Number = y;}
type Bird {} type Plane {} type Superman { } let x = new Superman() in print( if (x is Bird) "It's bird!" elif (x is Plane) "It's a plane!" else "No, it's Superman!" );
type A { } type B inherits A { } type C inherits A { }
let x : A = if (rand() < 0.5) new B() else new C() in if (x is B) {let y : B = x as B in {  }} else { }
function fib(n) => if (n == 0 | n == 1) 1 else fib(n-1) + fib(n-2);
function fact(x) => let f = 1 in for (i in range(1, x+1)) f := f * i;
protocol Hashable { hash(): Number; }
protocol Equatable extends Hashable { equals(other: Object): Boolean; }
type Person { hash() : Number { } }
let x : Hashable = new Person() in print(x.hash());
protocol Iterable {     next() : Boolean; current() : Object;}
type Range(min:Number, max:Number) { min = min; max = max; current = min - 1; next(): Boolean => (self.current := self.current + 1) < max; current(): Number => self.current;}
for (x in range(0,10)) {    }
let iterable = range(0, 10) in     while (iterable.next()) let x = iterable.current() in {  }
let numbers = [1,2,3,4,5,6,7,8,9] in for (x in numbers) print(x);
let numbers = [1,2,3,4,5,6,7,8,9] in print(numbers[7]);
let squares = [x^2 || x in range(1,10)] in print(x);


}
>>>>>>> a7bc99e (parser arleady finished)
